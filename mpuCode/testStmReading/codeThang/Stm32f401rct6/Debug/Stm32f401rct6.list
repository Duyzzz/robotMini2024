
Stm32f401rct6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b9c  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004d34  08004d34  00005d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d4c  08004d4c  00006010  2**0
                  CONTENTS
  4 .ARM          00000008  08004d4c  08004d4c  00005d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d54  08004d54  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d54  08004d54  00005d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d58  08004d58  00005d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004d5c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003430  20000010  08004d6c  00006010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003440  08004d6c  00006440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bb4e  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c7c  00000000  00000000  00011b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00013810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c8  00000000  00000000  000141f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001c3f  00000000  00000000  000149c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000da87  00000000  00000000  000165ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008804a  00000000  00000000  00024086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac0d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a6c  00000000  00000000  000ac114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000aeb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004d1c 	.word	0x08004d1c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08004d1c 	.word	0x08004d1c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b96a 	b.w	8000d50 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9d08      	ldr	r5, [sp, #32]
 8000a9a:	460c      	mov	r4, r1
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d14e      	bne.n	8000b3e <__udivmoddi4+0xaa>
 8000aa0:	4694      	mov	ip, r2
 8000aa2:	458c      	cmp	ip, r1
 8000aa4:	4686      	mov	lr, r0
 8000aa6:	fab2 f282 	clz	r2, r2
 8000aaa:	d962      	bls.n	8000b72 <__udivmoddi4+0xde>
 8000aac:	b14a      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000aae:	f1c2 0320 	rsb	r3, r2, #32
 8000ab2:	4091      	lsls	r1, r2
 8000ab4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ab8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000abc:	4319      	orrs	r1, r3
 8000abe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ac2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ac6:	fa1f f68c 	uxth.w	r6, ip
 8000aca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ace:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ad2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ad6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ada:	fb04 f106 	mul.w	r1, r4, r6
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	d90a      	bls.n	8000af8 <__udivmoddi4+0x64>
 8000ae2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000aea:	f080 8112 	bcs.w	8000d12 <__udivmoddi4+0x27e>
 8000aee:	4299      	cmp	r1, r3
 8000af0:	f240 810f 	bls.w	8000d12 <__udivmoddi4+0x27e>
 8000af4:	3c02      	subs	r4, #2
 8000af6:	4463      	add	r3, ip
 8000af8:	1a59      	subs	r1, r3, r1
 8000afa:	fa1f f38e 	uxth.w	r3, lr
 8000afe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b02:	fb07 1110 	mls	r1, r7, r0, r1
 8000b06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b0a:	fb00 f606 	mul.w	r6, r0, r6
 8000b0e:	429e      	cmp	r6, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x94>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b1a:	f080 80fc 	bcs.w	8000d16 <__udivmoddi4+0x282>
 8000b1e:	429e      	cmp	r6, r3
 8000b20:	f240 80f9 	bls.w	8000d16 <__udivmoddi4+0x282>
 8000b24:	4463      	add	r3, ip
 8000b26:	3802      	subs	r0, #2
 8000b28:	1b9b      	subs	r3, r3, r6
 8000b2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b2e:	2100      	movs	r1, #0
 8000b30:	b11d      	cbz	r5, 8000b3a <__udivmoddi4+0xa6>
 8000b32:	40d3      	lsrs	r3, r2
 8000b34:	2200      	movs	r2, #0
 8000b36:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3e:	428b      	cmp	r3, r1
 8000b40:	d905      	bls.n	8000b4e <__udivmoddi4+0xba>
 8000b42:	b10d      	cbz	r5, 8000b48 <__udivmoddi4+0xb4>
 8000b44:	e9c5 0100 	strd	r0, r1, [r5]
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	e7f5      	b.n	8000b3a <__udivmoddi4+0xa6>
 8000b4e:	fab3 f183 	clz	r1, r3
 8000b52:	2900      	cmp	r1, #0
 8000b54:	d146      	bne.n	8000be4 <__udivmoddi4+0x150>
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xcc>
 8000b5a:	4290      	cmp	r0, r2
 8000b5c:	f0c0 80f0 	bcc.w	8000d40 <__udivmoddi4+0x2ac>
 8000b60:	1a86      	subs	r6, r0, r2
 8000b62:	eb64 0303 	sbc.w	r3, r4, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	2d00      	cmp	r5, #0
 8000b6a:	d0e6      	beq.n	8000b3a <__udivmoddi4+0xa6>
 8000b6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b70:	e7e3      	b.n	8000b3a <__udivmoddi4+0xa6>
 8000b72:	2a00      	cmp	r2, #0
 8000b74:	f040 8090 	bne.w	8000c98 <__udivmoddi4+0x204>
 8000b78:	eba1 040c 	sub.w	r4, r1, ip
 8000b7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b80:	fa1f f78c 	uxth.w	r7, ip
 8000b84:	2101      	movs	r1, #1
 8000b86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b96:	fb07 f006 	mul.w	r0, r7, r6
 8000b9a:	4298      	cmp	r0, r3
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x11c>
 8000b9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ba2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x11a>
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	f200 80cd 	bhi.w	8000d48 <__udivmoddi4+0x2b4>
 8000bae:	4626      	mov	r6, r4
 8000bb0:	1a1c      	subs	r4, r3, r0
 8000bb2:	fa1f f38e 	uxth.w	r3, lr
 8000bb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bba:	fb08 4410 	mls	r4, r8, r0, r4
 8000bbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bc2:	fb00 f707 	mul.w	r7, r0, r7
 8000bc6:	429f      	cmp	r7, r3
 8000bc8:	d908      	bls.n	8000bdc <__udivmoddi4+0x148>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bd2:	d202      	bcs.n	8000bda <__udivmoddi4+0x146>
 8000bd4:	429f      	cmp	r7, r3
 8000bd6:	f200 80b0 	bhi.w	8000d3a <__udivmoddi4+0x2a6>
 8000bda:	4620      	mov	r0, r4
 8000bdc:	1bdb      	subs	r3, r3, r7
 8000bde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be2:	e7a5      	b.n	8000b30 <__udivmoddi4+0x9c>
 8000be4:	f1c1 0620 	rsb	r6, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 f706 	lsr.w	r7, r2, r6
 8000bee:	431f      	orrs	r7, r3
 8000bf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000bf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000bf8:	ea43 030c 	orr.w	r3, r3, ip
 8000bfc:	40f4      	lsrs	r4, r6
 8000bfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000c02:	0c38      	lsrs	r0, r7, #16
 8000c04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c08:	fbb4 fef0 	udiv	lr, r4, r0
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fb00 441e 	mls	r4, r0, lr, r4
 8000c14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c18:	fb0e f90c 	mul.w	r9, lr, ip
 8000c1c:	45a1      	cmp	r9, r4
 8000c1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x1a6>
 8000c24:	193c      	adds	r4, r7, r4
 8000c26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c2a:	f080 8084 	bcs.w	8000d36 <__udivmoddi4+0x2a2>
 8000c2e:	45a1      	cmp	r9, r4
 8000c30:	f240 8081 	bls.w	8000d36 <__udivmoddi4+0x2a2>
 8000c34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c38:	443c      	add	r4, r7
 8000c3a:	eba4 0409 	sub.w	r4, r4, r9
 8000c3e:	fa1f f983 	uxth.w	r9, r3
 8000c42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c46:	fb00 4413 	mls	r4, r0, r3, r4
 8000c4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	d907      	bls.n	8000c66 <__udivmoddi4+0x1d2>
 8000c56:	193c      	adds	r4, r7, r4
 8000c58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c5c:	d267      	bcs.n	8000d2e <__udivmoddi4+0x29a>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	d965      	bls.n	8000d2e <__udivmoddi4+0x29a>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	443c      	add	r4, r7
 8000c66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	429c      	cmp	r4, r3
 8000c74:	46ce      	mov	lr, r9
 8000c76:	469c      	mov	ip, r3
 8000c78:	d351      	bcc.n	8000d1e <__udivmoddi4+0x28a>
 8000c7a:	d04e      	beq.n	8000d1a <__udivmoddi4+0x286>
 8000c7c:	b155      	cbz	r5, 8000c94 <__udivmoddi4+0x200>
 8000c7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c82:	eb64 040c 	sbc.w	r4, r4, ip
 8000c86:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8a:	40cb      	lsrs	r3, r1
 8000c8c:	431e      	orrs	r6, r3
 8000c8e:	40cc      	lsrs	r4, r1
 8000c90:	e9c5 6400 	strd	r6, r4, [r5]
 8000c94:	2100      	movs	r1, #0
 8000c96:	e750      	b.n	8000b3a <__udivmoddi4+0xa6>
 8000c98:	f1c2 0320 	rsb	r3, r2, #32
 8000c9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000ca0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	430c      	orrs	r4, r1
 8000cac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cb0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb4:	fa1f f78c 	uxth.w	r7, ip
 8000cb8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000cc0:	0c23      	lsrs	r3, r4, #16
 8000cc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc6:	fb00 f107 	mul.w	r1, r0, r7
 8000cca:	4299      	cmp	r1, r3
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x24c>
 8000cce:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000cd6:	d22c      	bcs.n	8000d32 <__udivmoddi4+0x29e>
 8000cd8:	4299      	cmp	r1, r3
 8000cda:	d92a      	bls.n	8000d32 <__udivmoddi4+0x29e>
 8000cdc:	3802      	subs	r0, #2
 8000cde:	4463      	add	r3, ip
 8000ce0:	1a5b      	subs	r3, r3, r1
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ce8:	fb08 3311 	mls	r3, r8, r1, r3
 8000cec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cf0:	fb01 f307 	mul.w	r3, r1, r7
 8000cf4:	42a3      	cmp	r3, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x276>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d00:	d213      	bcs.n	8000d2a <__udivmoddi4+0x296>
 8000d02:	42a3      	cmp	r3, r4
 8000d04:	d911      	bls.n	8000d2a <__udivmoddi4+0x296>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4464      	add	r4, ip
 8000d0a:	1ae4      	subs	r4, r4, r3
 8000d0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d10:	e739      	b.n	8000b86 <__udivmoddi4+0xf2>
 8000d12:	4604      	mov	r4, r0
 8000d14:	e6f0      	b.n	8000af8 <__udivmoddi4+0x64>
 8000d16:	4608      	mov	r0, r1
 8000d18:	e706      	b.n	8000b28 <__udivmoddi4+0x94>
 8000d1a:	45c8      	cmp	r8, r9
 8000d1c:	d2ae      	bcs.n	8000c7c <__udivmoddi4+0x1e8>
 8000d1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d26:	3801      	subs	r0, #1
 8000d28:	e7a8      	b.n	8000c7c <__udivmoddi4+0x1e8>
 8000d2a:	4631      	mov	r1, r6
 8000d2c:	e7ed      	b.n	8000d0a <__udivmoddi4+0x276>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	e799      	b.n	8000c66 <__udivmoddi4+0x1d2>
 8000d32:	4630      	mov	r0, r6
 8000d34:	e7d4      	b.n	8000ce0 <__udivmoddi4+0x24c>
 8000d36:	46d6      	mov	lr, sl
 8000d38:	e77f      	b.n	8000c3a <__udivmoddi4+0x1a6>
 8000d3a:	4463      	add	r3, ip
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	e74d      	b.n	8000bdc <__udivmoddi4+0x148>
 8000d40:	4606      	mov	r6, r0
 8000d42:	4623      	mov	r3, r4
 8000d44:	4608      	mov	r0, r1
 8000d46:	e70f      	b.n	8000b68 <__udivmoddi4+0xd4>
 8000d48:	3e02      	subs	r6, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	e730      	b.n	8000bb0 <__udivmoddi4+0x11c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d58:	f000 ffd0 	bl	8001cfc <HAL_Init>
  //printf("khởi tạo thành công");

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f88e 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f000 f9a6 	bl	80010b0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d64:	f000 f8f4 	bl	8000f50 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000d68:	f000 f94e 	bl	8001008 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000d6c:	f000 f976 	bl	800105c <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000d70:	f000 f91c 	bl	8000fac <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  while( MPU6050_Init(&hi2c2) != 104);
 8000d74:	bf00      	nop
 8000d76:	4837      	ldr	r0, [pc, #220]	@ (8000e54 <main+0x100>)
 8000d78:	f000 fa12 	bl	80011a0 <MPU6050_Init>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b68      	cmp	r3, #104	@ 0x68
 8000d80:	d1f9      	bne.n	8000d76 <main+0x22>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(status_MPU6050){
 8000d82:	4b35      	ldr	r3, [pc, #212]	@ (8000e58 <main+0x104>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d00c      	beq.n	8000da4 <main+0x50>

			  MPU6050_Balance_Data(&hi2c2, &MPU6050);
 8000d8a:	4934      	ldr	r1, [pc, #208]	@ (8000e5c <main+0x108>)
 8000d8c:	4831      	ldr	r0, [pc, #196]	@ (8000e54 <main+0x100>)
 8000d8e:	f000 fb47 	bl	8001420 <MPU6050_Balance_Data>
			  HAL_UART_Receive_IT(&huart2,(uint8_t*)&Receive_data,1);
 8000d92:	2201      	movs	r2, #1
 8000d94:	4932      	ldr	r1, [pc, #200]	@ (8000e60 <main+0x10c>)
 8000d96:	4833      	ldr	r0, [pc, #204]	@ (8000e64 <main+0x110>)
 8000d98:	f003 f870 	bl	8003e7c <HAL_UART_Receive_IT>
			  status_MPU6050 = false;
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e58 <main+0x104>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	e7ee      	b.n	8000d82 <main+0x2e>
	  }else{

		 //Filter_getAngleZ(&hi2c1, &MPU6050);
		  MPU6050_Read_Accel(&hi2c2, &MPU6050);
 8000da4:	492d      	ldr	r1, [pc, #180]	@ (8000e5c <main+0x108>)
 8000da6:	482b      	ldr	r0, [pc, #172]	@ (8000e54 <main+0x100>)
 8000da8:	f000 fa66 	bl	8001278 <MPU6050_Read_Accel>
		  MPU6050_Read_Gyro(&hi2c2, &MPU6050);
 8000dac:	492b      	ldr	r1, [pc, #172]	@ (8000e5c <main+0x108>)
 8000dae:	4829      	ldr	r0, [pc, #164]	@ (8000e54 <main+0x100>)
 8000db0:	f000 face 	bl	8001350 <MPU6050_Read_Gyro>

		 delta_gyroz2 = (int)(MPU6050.Gyro_Z[2] * 10);
 8000db4:	4b29      	ldr	r3, [pc, #164]	@ (8000e5c <main+0x108>)
 8000db6:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8000dba:	3320      	adds	r3, #32
 8000dbc:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8000dc0:	f04f 0200 	mov.w	r2, #0
 8000dc4:	4b28      	ldr	r3, [pc, #160]	@ (8000e68 <main+0x114>)
 8000dc6:	f7ff fbc3 	bl	8000550 <__aeabi_dmul>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	460b      	mov	r3, r1
 8000dce:	4610      	mov	r0, r2
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f7ff fdcf 	bl	8000974 <__aeabi_d2iz>
 8000dd6:	ee07 0a90 	vmov	s15, r0
 8000dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dde:	4b23      	ldr	r3, [pc, #140]	@ (8000e6c <main+0x118>)
 8000de0:	edc3 7a00 	vstr	s15, [r3]
		 delta_gyroz1 = (int)(MPU6050.Gyro_Z[1] * 10);
 8000de4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e5c <main+0x108>)
 8000de6:	f503 534a 	add.w	r3, r3, #12928	@ 0x3280
 8000dea:	3310      	adds	r3, #16
 8000dec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e68 <main+0x114>)
 8000df6:	f7ff fbab 	bl	8000550 <__aeabi_dmul>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff fdb7 	bl	8000974 <__aeabi_d2iz>
 8000e06:	ee07 0a90 	vmov	s15, r0
 8000e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e0e:	4b18      	ldr	r3, [pc, #96]	@ (8000e70 <main+0x11c>)
 8000e10:	edc3 7a00 	vstr	s15, [r3]
		 delta_gyroz0 = MPU6050.Gz;
 8000e14:	4b11      	ldr	r3, [pc, #68]	@ (8000e5c <main+0x108>)
 8000e16:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f7ff fdd1 	bl	80009c4 <__aeabi_d2f>
 8000e22:	4603      	mov	r3, r0
 8000e24:	4a13      	ldr	r2, [pc, #76]	@ (8000e74 <main+0x120>)
 8000e26:	6013      	str	r3, [r2, #0]
		 K_gz = (int)(MPU6050.KalmanAngleZ * 10);
 8000e28:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <main+0x108>)
 8000e2a:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 8000e2e:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8000e32:	f04f 0200 	mov.w	r2, #0
 8000e36:	4b0c      	ldr	r3, [pc, #48]	@ (8000e68 <main+0x114>)
 8000e38:	f7ff fb8a 	bl	8000550 <__aeabi_dmul>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fd96 	bl	8000974 <__aeabi_d2iz>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b21a      	sxth	r2, r3
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <main+0x124>)
 8000e4e:	801a      	strh	r2, [r3, #0]
	  if(status_MPU6050){
 8000e50:	e797      	b.n	8000d82 <main+0x2e>
 8000e52:	bf00      	nop
 8000e54:	20000080 	.word	0x20000080
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	20000168 	.word	0x20000168
 8000e60:	2000342a 	.word	0x2000342a
 8000e64:	2000011c 	.word	0x2000011c
 8000e68:	40240000 	.word	0x40240000
 8000e6c:	20003438 	.word	0x20003438
 8000e70:	20003430 	.word	0x20003430
 8000e74:	20003434 	.word	0x20003434
 8000e78:	2000342c 	.word	0x2000342c

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b094      	sub	sp, #80	@ 0x50
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0320 	add.w	r3, r7, #32
 8000e86:	2230      	movs	r2, #48	@ 0x30
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f003 ff1a 	bl	8004cc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	4b28      	ldr	r3, [pc, #160]	@ (8000f48 <SystemClock_Config+0xcc>)
 8000ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea8:	4a27      	ldr	r2, [pc, #156]	@ (8000f48 <SystemClock_Config+0xcc>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eae:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <SystemClock_Config+0xcc>)
 8000eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	607b      	str	r3, [r7, #4]
 8000ec0:	4b22      	ldr	r3, [pc, #136]	@ (8000f4c <SystemClock_Config+0xd0>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ec8:	4a20      	ldr	r2, [pc, #128]	@ (8000f4c <SystemClock_Config+0xd0>)
 8000eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ece:	6013      	str	r3, [r2, #0]
 8000ed0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f4c <SystemClock_Config+0xd0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000edc:	2302      	movs	r3, #2
 8000ede:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ee4:	2310      	movs	r3, #16
 8000ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eec:	2300      	movs	r3, #0
 8000eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000ef4:	2354      	movs	r3, #84	@ 0x54
 8000ef6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ef8:	2302      	movs	r3, #2
 8000efa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	f107 0320 	add.w	r3, r7, #32
 8000f04:	4618      	mov	r0, r3
 8000f06:	f002 fadb 	bl	80034c0 <HAL_RCC_OscConfig>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000f10:	f000 f940 	bl	8001194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f14:	230f      	movs	r3, #15
 8000f16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2102      	movs	r1, #2
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 fd3d 	bl	80039b0 <HAL_RCC_ClockConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000f3c:	f000 f92a 	bl	8001194 <Error_Handler>
  }
}
 8000f40:	bf00      	nop
 8000f42:	3750      	adds	r7, #80	@ 0x50
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40007000 	.word	0x40007000

08000f50 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f54:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <MX_I2C1_Init+0x50>)
 8000f56:	4a13      	ldr	r2, [pc, #76]	@ (8000fa4 <MX_I2C1_Init+0x54>)
 8000f58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f5a:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <MX_I2C1_Init+0x50>)
 8000f5c:	4a12      	ldr	r2, [pc, #72]	@ (8000fa8 <MX_I2C1_Init+0x58>)
 8000f5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f60:	4b0f      	ldr	r3, [pc, #60]	@ (8000fa0 <MX_I2C1_Init+0x50>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <MX_I2C1_Init+0x50>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa0 <MX_I2C1_Init+0x50>)
 8000f6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f72:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f74:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa0 <MX_I2C1_Init+0x50>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f7a:	4b09      	ldr	r3, [pc, #36]	@ (8000fa0 <MX_I2C1_Init+0x50>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <MX_I2C1_Init+0x50>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f86:	4b06      	ldr	r3, [pc, #24]	@ (8000fa0 <MX_I2C1_Init+0x50>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f8c:	4804      	ldr	r0, [pc, #16]	@ (8000fa0 <MX_I2C1_Init+0x50>)
 8000f8e:	f001 fa73 	bl	8002478 <HAL_I2C_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f98:	f000 f8fc 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000002c 	.word	0x2000002c
 8000fa4:	40005400 	.word	0x40005400
 8000fa8:	00061a80 	.word	0x00061a80

08000fac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_I2C2_Init+0x50>)
 8000fb2:	4a13      	ldr	r2, [pc, #76]	@ (8001000 <MX_I2C2_Init+0x54>)
 8000fb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_I2C2_Init+0x50>)
 8000fb8:	4a12      	ldr	r2, [pc, #72]	@ (8001004 <MX_I2C2_Init+0x58>)
 8000fba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_I2C2_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_I2C2_Init+0x50>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_I2C2_Init+0x50>)
 8000fca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000fce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ffc <MX_I2C2_Init+0x50>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <MX_I2C2_Init+0x50>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fdc:	4b07      	ldr	r3, [pc, #28]	@ (8000ffc <MX_I2C2_Init+0x50>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fe2:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <MX_I2C2_Init+0x50>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fe8:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <MX_I2C2_Init+0x50>)
 8000fea:	f001 fa45 	bl	8002478 <HAL_I2C_Init>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000ff4:	f000 f8ce 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000080 	.word	0x20000080
 8001000:	40005800 	.word	0x40005800
 8001004:	000186a0 	.word	0x000186a0

08001008 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800100c:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_USART1_UART_Init+0x4c>)
 800100e:	4a12      	ldr	r2, [pc, #72]	@ (8001058 <MX_USART1_UART_Init+0x50>)
 8001010:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <MX_USART1_UART_Init+0x4c>)
 8001014:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001018:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101a:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <MX_USART1_UART_Init+0x4c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <MX_USART1_UART_Init+0x4c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001026:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <MX_USART1_UART_Init+0x4c>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800102c:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <MX_USART1_UART_Init+0x4c>)
 800102e:	220c      	movs	r2, #12
 8001030:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001032:	4b08      	ldr	r3, [pc, #32]	@ (8001054 <MX_USART1_UART_Init+0x4c>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001038:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <MX_USART1_UART_Init+0x4c>)
 800103a:	2200      	movs	r2, #0
 800103c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_USART1_UART_Init+0x4c>)
 8001040:	f002 fe96 	bl	8003d70 <HAL_UART_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800104a:	f000 f8a3 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200000d4 	.word	0x200000d4
 8001058:	40011000 	.word	0x40011000

0800105c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001062:	4a12      	ldr	r2, [pc, #72]	@ (80010ac <MX_USART2_UART_Init+0x50>)
 8001064:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001068:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800106c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800106e:	4b0e      	ldr	r3, [pc, #56]	@ (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001074:	4b0c      	ldr	r3, [pc, #48]	@ (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	@ (80010a8 <MX_USART2_UART_Init+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001080:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001082:	220c      	movs	r2, #12
 8001084:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	4b08      	ldr	r3, [pc, #32]	@ (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800108c:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <MX_USART2_UART_Init+0x4c>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	@ (80010a8 <MX_USART2_UART_Init+0x4c>)
 8001094:	f002 fe6c 	bl	8003d70 <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800109e:	f000 f879 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000011c 	.word	0x2000011c
 80010ac:	40004400 	.word	0x40004400

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	607b      	str	r3, [r7, #4]
 80010ba:	4b10      	ldr	r3, [pc, #64]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	4a0f      	ldr	r2, [pc, #60]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010c6:	4b0d      	ldr	r3, [pc, #52]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	607b      	str	r3, [r7, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	4b09      	ldr	r3, [pc, #36]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	4a08      	ldr	r2, [pc, #32]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e2:	4b06      	ldr	r3, [pc, #24]	@ (80010fc <MX_GPIO_Init+0x4c>)
 80010e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800

08001100 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

	if(huart->Instance == huart2.Instance){
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681a      	ldr	r2, [r3, #0]
 800110c:	4b1b      	ldr	r3, [pc, #108]	@ (800117c <HAL_UART_RxCpltCallback+0x7c>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	429a      	cmp	r2, r3
 8001112:	d12f      	bne.n	8001174 <HAL_UART_RxCpltCallback+0x74>
		if(Receive_data == 'z'){
 8001114:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <HAL_UART_RxCpltCallback+0x80>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b7a      	cmp	r3, #122	@ 0x7a
 800111a:	d112      	bne.n	8001142 <HAL_UART_RxCpltCallback+0x42>

			Buffer[0] = (K_gz >> 8) & 0xFF;
 800111c:	4b19      	ldr	r3, [pc, #100]	@ (8001184 <HAL_UART_RxCpltCallback+0x84>)
 800111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001122:	121b      	asrs	r3, r3, #8
 8001124:	b21b      	sxth	r3, r3
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <HAL_UART_RxCpltCallback+0x88>)
 800112a:	701a      	strb	r2, [r3, #0]
			Buffer[1] = (K_gz) & 0xFF;
 800112c:	4b15      	ldr	r3, [pc, #84]	@ (8001184 <HAL_UART_RxCpltCallback+0x84>)
 800112e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <HAL_UART_RxCpltCallback+0x88>)
 8001136:	705a      	strb	r2, [r3, #1]
			HAL_UART_Transmit_IT(&huart2,(uint8_t*)&Buffer, 2);
 8001138:	2202      	movs	r2, #2
 800113a:	4913      	ldr	r1, [pc, #76]	@ (8001188 <HAL_UART_RxCpltCallback+0x88>)
 800113c:	480f      	ldr	r0, [pc, #60]	@ (800117c <HAL_UART_RxCpltCallback+0x7c>)
 800113e:	f002 fe67 	bl	8003e10 <HAL_UART_Transmit_IT>
		}

		if(Receive_data == 'a'){
 8001142:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <HAL_UART_RxCpltCallback+0x80>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b61      	cmp	r3, #97	@ 0x61
 8001148:	d10f      	bne.n	800116a <HAL_UART_RxCpltCallback+0x6a>
			K_gz = 0;
 800114a:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <HAL_UART_RxCpltCallback+0x84>)
 800114c:	2200      	movs	r2, #0
 800114e:	801a      	strh	r2, [r3, #0]
			MPU6050.KalmanAngleZ = 0;
 8001150:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <HAL_UART_RxCpltCallback+0x8c>)
 8001152:	f503 534b 	add.w	r3, r3, #12992	@ 0x32c0
 8001156:	4619      	mov	r1, r3
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	e941 2302 	strd	r2, r3, [r1, #-8]
			status_MPU6050 = true;
 8001164:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_UART_RxCpltCallback+0x90>)
 8001166:	2201      	movs	r2, #1
 8001168:	601a      	str	r2, [r3, #0]
		}

		HAL_UART_Receive_IT(&huart2,(uint8_t*)&Receive_data,1);
 800116a:	2201      	movs	r2, #1
 800116c:	4904      	ldr	r1, [pc, #16]	@ (8001180 <HAL_UART_RxCpltCallback+0x80>)
 800116e:	4803      	ldr	r0, [pc, #12]	@ (800117c <HAL_UART_RxCpltCallback+0x7c>)
 8001170:	f002 fe84 	bl	8003e7c <HAL_UART_Receive_IT>

	}
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	2000011c 	.word	0x2000011c
 8001180:	2000342a 	.word	0x2000342a
 8001184:	2000342c 	.word	0x2000342c
 8001188:	20003428 	.word	0x20003428
 800118c:	20000168 	.word	0x20000168
 8001190:	20000000 	.word	0x20000000

08001194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <Error_Handler+0x8>

080011a0 <MPU6050_Init>:
extern MPU6050_t MPU6050;




uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af04      	add	r7, sp, #16
 80011a6:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 80011a8:	2364      	movs	r3, #100	@ 0x64
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	2301      	movs	r3, #1
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	f107 030f 	add.w	r3, r7, #15
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	2275      	movs	r2, #117	@ 0x75
 80011ba:	21d0      	movs	r1, #208	@ 0xd0
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f001 fb99 	bl	80028f4 <HAL_I2C_Mem_Read>


    if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	2b68      	cmp	r3, #104	@ 0x68
 80011c6:	d14f      	bne.n	8001268 <MPU6050_Init+0xc8>
    {
    	Data = 0x80;
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	73bb      	strb	r3, [r7, #14]
		HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80011cc:	2364      	movs	r3, #100	@ 0x64
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 030e 	add.w	r3, r7, #14
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	226b      	movs	r2, #107	@ 0x6b
 80011de:	21d0      	movs	r1, #208	@ 0xd0
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f001 fa8d 	bl	8002700 <HAL_I2C_Mem_Write>
		HAL_Delay(100);
 80011e6:	2064      	movs	r0, #100	@ 0x64
 80011e8:	f000 fdfa 	bl	8001de0 <HAL_Delay>
    	// thanh ghi quản lý nguồn 0X6B chúng ta nên ghi tất cả số 0 để đánh thức cảm biến
		Data = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 80011f0:	2364      	movs	r3, #100	@ 0x64
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	2301      	movs	r3, #1
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	f107 030e 	add.w	r3, r7, #14
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	2301      	movs	r3, #1
 8001200:	226b      	movs	r2, #107	@ 0x6b
 8001202:	21d0      	movs	r1, #208	@ 0xd0
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f001 fa7b 	bl	8002700 <HAL_I2C_Mem_Write>

        // Đặt TỐC ĐỘ DỮ LIỆU là 1KHz bằng cách ghi thanh ghi SMPLRT_DIV 8/(7+1)
        Data = 0x07;
 800120a:	2307      	movs	r3, #7
 800120c:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800120e:	2364      	movs	r3, #100	@ 0x64
 8001210:	9302      	str	r3, [sp, #8]
 8001212:	2301      	movs	r3, #1
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	f107 030e 	add.w	r3, r7, #14
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2301      	movs	r3, #1
 800121e:	2219      	movs	r2, #25
 8001220:	21d0      	movs	r1, #208	@ 0xd0
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f001 fa6c 	bl	8002700 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g 4g 6g 8g
        Data = 0x00;
 8001228:	2300      	movs	r3, #0
 800122a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800122c:	2364      	movs	r3, #100	@ 0x64
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f107 030e 	add.w	r3, r7, #14
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	221c      	movs	r2, #28
 800123e:	21d0      	movs	r1, #208	@ 0xd0
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f001 fa5d 	bl	8002700 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x18;
 8001246:	2318      	movs	r3, #24
 8001248:	73bb      	strb	r3, [r7, #14]
        //Data = 0x00;
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800124a:	2364      	movs	r3, #100	@ 0x64
 800124c:	9302      	str	r3, [sp, #8]
 800124e:	2301      	movs	r3, #1
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	f107 030e 	add.w	r3, r7, #14
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2301      	movs	r3, #1
 800125a:	221b      	movs	r2, #27
 800125c:	21d0      	movs	r1, #208	@ 0xd0
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f001 fa4e 	bl	8002700 <HAL_I2C_Mem_Write>

        return 104;
 8001264:	2368      	movs	r3, #104	@ 0x68
 8001266:	e000      	b.n	800126a <MPU6050_Init+0xca>
    }
    return check;
 8001268:	7bfb      	ldrb	r3, [r7, #15]
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	0000      	movs	r0, r0
 8001274:	0000      	movs	r0, r0
	...

08001278 <MPU6050_Read_Accel>:


void MPU6050_Read_Accel(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af04      	add	r7, sp, #16
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 8001282:	2364      	movs	r3, #100	@ 0x64
 8001284:	9302      	str	r3, [sp, #8]
 8001286:	2306      	movs	r3, #6
 8001288:	9301      	str	r3, [sp, #4]
 800128a:	f107 0308 	add.w	r3, r7, #8
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	223b      	movs	r2, #59	@ 0x3b
 8001294:	21d0      	movs	r1, #208	@ 0xd0
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f001 fb2c 	bl	80028f4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800129c:	7a3b      	ldrb	r3, [r7, #8]
 800129e:	021b      	lsls	r3, r3, #8
 80012a0:	b21a      	sxth	r2, r3
 80012a2:	7a7b      	ldrb	r3, [r7, #9]
 80012a4:	b21b      	sxth	r3, r3
 80012a6:	4313      	orrs	r3, r2
 80012a8:	b21a      	sxth	r2, r3
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80012ae:	7abb      	ldrb	r3, [r7, #10]
 80012b0:	021b      	lsls	r3, r3, #8
 80012b2:	b21a      	sxth	r2, r3
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	4313      	orrs	r3, r2
 80012ba:	b21a      	sxth	r2, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80012c0:	7b3b      	ldrb	r3, [r7, #12]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	7b7b      	ldrb	r3, [r7, #13]
 80012c8:	b21b      	sxth	r3, r3
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b21a      	sxth	r2, r3
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	809a      	strh	r2, [r3, #4]
    /*** convert the RAW values into acceleration in 'g'
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 16384.0
         for more details check ACCEL_CONFIG Register              ****/

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f8cf 	bl	800047c <__aeabi_i2d>
 80012de:	f04f 0200 	mov.w	r2, #0
 80012e2:	4b19      	ldr	r3, [pc, #100]	@ (8001348 <MPU6050_Read_Accel+0xd0>)
 80012e4:	f7ff fa5e 	bl	80007a4 <__aeabi_ddiv>
 80012e8:	4602      	mov	r2, r0
 80012ea:	460b      	mov	r3, r1
 80012ec:	6839      	ldr	r1, [r7, #0]
 80012ee:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff f8bf 	bl	800047c <__aeabi_i2d>
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <MPU6050_Read_Accel+0xd0>)
 8001304:	f7ff fa4e 	bl	80007a4 <__aeabi_ddiv>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	6839      	ldr	r1, [r7, #0]
 800130e:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff f8af 	bl	800047c <__aeabi_i2d>
 800131e:	a308      	add	r3, pc, #32	@ (adr r3, 8001340 <MPU6050_Read_Accel+0xc8>)
 8001320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001324:	f7ff fa3e 	bl	80007a4 <__aeabi_ddiv>
 8001328:	4602      	mov	r2, r0
 800132a:	460b      	mov	r3, r1
 800132c:	6839      	ldr	r1, [r7, #0]
 800132e:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8001332:	bf00      	nop
 8001334:	3710      	adds	r7, #16
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	00000000 	.word	0x00000000
 8001344:	40cc2900 	.word	0x40cc2900
 8001348:	40d00000 	.word	0x40d00000
 800134c:	00000000 	.word	0x00000000

08001350 <MPU6050_Read_Gyro>:


void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b088      	sub	sp, #32
 8001354:	af04      	add	r7, sp, #16
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 800135a:	2364      	movs	r3, #100	@ 0x64
 800135c:	9302      	str	r3, [sp, #8]
 800135e:	2306      	movs	r3, #6
 8001360:	9301      	str	r3, [sp, #4]
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	2243      	movs	r2, #67	@ 0x43
 800136c:	21d0      	movs	r1, #208	@ 0xd0
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f001 fac0 	bl	80028f4 <HAL_I2C_Mem_Read>

    DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 8001374:	7a3b      	ldrb	r3, [r7, #8]
 8001376:	021b      	lsls	r3, r3, #8
 8001378:	b21a      	sxth	r2, r3
 800137a:	7a7b      	ldrb	r3, [r7, #9]
 800137c:	b21b      	sxth	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b21a      	sxth	r2, r3
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001386:	7abb      	ldrb	r3, [r7, #10]
 8001388:	021b      	lsls	r3, r3, #8
 800138a:	b21a      	sxth	r2, r3
 800138c:	7afb      	ldrb	r3, [r7, #11]
 800138e:	b21b      	sxth	r3, r3
 8001390:	4313      	orrs	r3, r2
 8001392:	b21a      	sxth	r2, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001398:	7b3b      	ldrb	r3, [r7, #12]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b21a      	sxth	r2, r3
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21a      	sxth	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	849a      	strh	r2, [r3, #36]	@ 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 0. So I am dividing by 131.0
         for more details check GYRO_CONFIG Register              ****/

    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f863 	bl	800047c <__aeabi_i2d>
 80013b6:	a318      	add	r3, pc, #96	@ (adr r3, 8001418 <MPU6050_Read_Gyro+0xc8>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f9f2 	bl	80007a4 <__aeabi_ddiv>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff f853 	bl	800047c <__aeabi_i2d>
 80013d6:	a310      	add	r3, pc, #64	@ (adr r3, 8001418 <MPU6050_Read_Gyro+0xc8>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff f9e2 	bl	80007a4 <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	6839      	ldr	r1, [r7, #0]
 80013e6:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff f843 	bl	800047c <__aeabi_i2d>
 80013f6:	a308      	add	r3, pc, #32	@ (adr r3, 8001418 <MPU6050_Read_Gyro+0xc8>)
 80013f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fc:	f7ff f9d2 	bl	80007a4 <__aeabi_ddiv>
 8001400:	4602      	mov	r2, r0
 8001402:	460b      	mov	r3, r1
 8001404:	6839      	ldr	r1, [r7, #0]
 8001406:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	f3af 8000 	nop.w
 8001418:	00000000 	.word	0x00000000
 800141c:	40606000 	.word	0x40606000

08001420 <MPU6050_Balance_Data>:

}

//// --------------------- Lấy mẫu ban đầu 4s ------------------------------ ////

void MPU6050_Balance_Data(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct){
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	@ 0x30
 8001424:	af04      	add	r7, sp, #16
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
	uint8_t Rec_Data[14];
	int16_t temp;

	// Read 14 BYTES of data starting from ACCEL_XOUT_H register

	int i = 0;
 800142a:	2300      	movs	r3, #0
 800142c:	61fb      	str	r3, [r7, #28]
	for(i = 0;i < 400;i++){
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	e13b      	b.n	80016ac <MPU6050_Balance_Data+0x28c>
		HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001434:	2364      	movs	r3, #100	@ 0x64
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	230e      	movs	r3, #14
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	f107 030c 	add.w	r3, r7, #12
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2301      	movs	r3, #1
 8001444:	223b      	movs	r2, #59	@ 0x3b
 8001446:	21d0      	movs	r1, #208	@ 0xd0
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f001 fa53 	bl	80028f4 <HAL_I2C_Mem_Read>

		DataStruct->Accel_X_RAW = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]);
 800144e:	7b3b      	ldrb	r3, [r7, #12]
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21a      	sxth	r2, r3
 8001454:	7b7b      	ldrb	r3, [r7, #13]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21a      	sxth	r2, r3
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	801a      	strh	r2, [r3, #0]
		DataStruct->Accel_Y_RAW = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 8001460:	7bbb      	ldrb	r3, [r7, #14]
 8001462:	021b      	lsls	r3, r3, #8
 8001464:	b21a      	sxth	r2, r3
 8001466:	7bfb      	ldrb	r3, [r7, #15]
 8001468:	b21b      	sxth	r3, r3
 800146a:	4313      	orrs	r3, r2
 800146c:	b21a      	sxth	r2, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	805a      	strh	r2, [r3, #2]
		DataStruct->Accel_Z_RAW = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 8001472:	7c3b      	ldrb	r3, [r7, #16]
 8001474:	021b      	lsls	r3, r3, #8
 8001476:	b21a      	sxth	r2, r3
 8001478:	7c7b      	ldrb	r3, [r7, #17]
 800147a:	b21b      	sxth	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b21a      	sxth	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	809a      	strh	r2, [r3, #4]
		temp = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
 8001484:	7cbb      	ldrb	r3, [r7, #18]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	7cfb      	ldrb	r3, [r7, #19]
 800148c:	b21b      	sxth	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	837b      	strh	r3, [r7, #26]
		DataStruct->Gyro_X_RAW = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 8001492:	7d3b      	ldrb	r3, [r7, #20]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	7d7b      	ldrb	r3, [r7, #21]
 800149a:	b21b      	sxth	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b21a      	sxth	r2, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	841a      	strh	r2, [r3, #32]
		DataStruct->Gyro_Y_RAW = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80014a4:	7dbb      	ldrb	r3, [r7, #22]
 80014a6:	021b      	lsls	r3, r3, #8
 80014a8:	b21a      	sxth	r2, r3
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	4313      	orrs	r3, r2
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	845a      	strh	r2, [r3, #34]	@ 0x22
		DataStruct->Gyro_Z_RAW = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 80014b6:	7e3b      	ldrb	r3, [r7, #24]
 80014b8:	021b      	lsls	r3, r3, #8
 80014ba:	b21a      	sxth	r2, r3
 80014bc:	7e7b      	ldrb	r3, [r7, #25]
 80014be:	b21b      	sxth	r3, r3
 80014c0:	4313      	orrs	r3, r2
 80014c2:	b21a      	sxth	r2, r3
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	849a      	strh	r2, [r3, #36]	@ 0x24

		DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe ffd4 	bl	800047c <__aeabi_i2d>
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	4ba3      	ldr	r3, [pc, #652]	@ (8001768 <MPU6050_Balance_Data+0x348>)
 80014da:	f7ff f963 	bl	80007a4 <__aeabi_ddiv>
 80014de:	4602      	mov	r2, r0
 80014e0:	460b      	mov	r3, r1
 80014e2:	6839      	ldr	r1, [r7, #0]
 80014e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
		DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe ffc4 	bl	800047c <__aeabi_i2d>
 80014f4:	f04f 0200 	mov.w	r2, #0
 80014f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001768 <MPU6050_Balance_Data+0x348>)
 80014fa:	f7ff f953 	bl	80007a4 <__aeabi_ddiv>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	6839      	ldr	r1, [r7, #0]
 8001504:	e9c1 2304 	strd	r2, r3, [r1, #16]
		DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800150e:	4618      	mov	r0, r3
 8001510:	f7fe ffb4 	bl	800047c <__aeabi_i2d>
 8001514:	a390      	add	r3, pc, #576	@ (adr r3, 8001758 <MPU6050_Balance_Data+0x338>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff f943 	bl	80007a4 <__aeabi_ddiv>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	6839      	ldr	r1, [r7, #0]
 8001524:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->Temperature = (float) ((int16_t) temp / (float) 340.0 + (float) 36.53);
 8001528:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800152c:	ee07 3a90 	vmov	s15, r3
 8001530:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001534:	eddf 6a8d 	vldr	s13, [pc, #564]	@ 800176c <MPU6050_Balance_Data+0x34c>
 8001538:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800153c:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001770 <MPU6050_Balance_Data+0x350>
 8001540:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 800154a:	edc3 7aa8 	vstr	s15, [r3, #672]	@ 0x2a0
		DataStruct->Gx = DataStruct->Gyro_X_RAW / 16.4;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe ff91 	bl	800047c <__aeabi_i2d>
 800155a:	a381      	add	r3, pc, #516	@ (adr r3, 8001760 <MPU6050_Balance_Data+0x340>)
 800155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001560:	f7ff f920 	bl	80007a4 <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	6839      	ldr	r1, [r7, #0]
 800156a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		DataStruct->Gy = DataStruct->Gyro_Y_RAW / 16.4;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8001574:	4618      	mov	r0, r3
 8001576:	f7fe ff81 	bl	800047c <__aeabi_i2d>
 800157a:	a379      	add	r3, pc, #484	@ (adr r3, 8001760 <MPU6050_Balance_Data+0x340>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff f910 	bl	80007a4 <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	6839      	ldr	r1, [r7, #0]
 800158a:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
		DataStruct->Gz = DataStruct->Gyro_Z_RAW / 16.4;
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8001594:	4618      	mov	r0, r3
 8001596:	f7fe ff71 	bl	800047c <__aeabi_i2d>
 800159a:	a371      	add	r3, pc, #452	@ (adr r3, 8001760 <MPU6050_Balance_Data+0x340>)
 800159c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a0:	f7ff f900 	bl	80007a4 <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	6839      	ldr	r1, [r7, #0]
 80015aa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

		DataStruct->De_Gx += DataStruct->Gx;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80015ba:	f7fe fe13 	bl	80001e4 <__adddf3>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	6839      	ldr	r1, [r7, #0]
 80015c4:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		DataStruct->De_Gy += DataStruct->Gy;
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80015d4:	f7fe fe06 	bl	80001e4 <__adddf3>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	6839      	ldr	r1, [r7, #0]
 80015de:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
		DataStruct->De_Gz += DataStruct->Gz;
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80015ee:	f7fe fdf9 	bl	80001e4 <__adddf3>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	6839      	ldr	r1, [r7, #0]
 80015f8:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		DataStruct->De_Ax += DataStruct->Ax;
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001608:	f7fe fdec 	bl	80001e4 <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	6839      	ldr	r1, [r7, #0]
 8001612:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		DataStruct->De_Ay += DataStruct->Ay;
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001622:	f7fe fddf 	bl	80001e4 <__adddf3>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	6839      	ldr	r1, [r7, #0]
 800162c:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		DataStruct->De_Az += DataStruct->Az;
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800163c:	f7fe fdd2 	bl	80001e4 <__adddf3>
 8001640:	4602      	mov	r2, r0
 8001642:	460b      	mov	r3, r1
 8001644:	6839      	ldr	r1, [r7, #0]
 8001646:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

		DataStruct->Num_Z[i] = DataStruct->Az;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	69f9      	ldr	r1, [r7, #28]
 8001654:	310e      	adds	r1, #14
 8001656:	00c9      	lsls	r1, r1, #3
 8001658:	4401      	add	r1, r0
 800165a:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_Y[i] = DataStruct->Ay;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	69f9      	ldr	r1, [r7, #28]
 8001668:	f201 312e 	addw	r1, r1, #814	@ 0x32e
 800166c:	00c9      	lsls	r1, r1, #3
 800166e:	4401      	add	r1, r0
 8001670:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_X[i] = DataStruct->Ax;
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800167a:	6838      	ldr	r0, [r7, #0]
 800167c:	69f9      	ldr	r1, [r7, #28]
 800167e:	f501 71cf 	add.w	r1, r1, #414	@ 0x19e
 8001682:	00c9      	lsls	r1, r1, #3
 8001684:	4401      	add	r1, r0
 8001686:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_Gz[i] = DataStruct->Gz;
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	69f9      	ldr	r1, [r7, #28]
 8001694:	f201 41be 	addw	r1, r1, #1214	@ 0x4be
 8001698:	00c9      	lsls	r1, r1, #3
 800169a:	4401      	add	r1, r0
 800169c:	e9c1 2300 	strd	r2, r3, [r1]

		HAL_Delay(10);
 80016a0:	200a      	movs	r0, #10
 80016a2:	f000 fb9d 	bl	8001de0 <HAL_Delay>
	for(i = 0;i < 400;i++){
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3301      	adds	r3, #1
 80016aa:	61fb      	str	r3, [r7, #28]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80016b2:	f6ff aebf 	blt.w	8001434 <MPU6050_Balance_Data+0x14>
	}
	DataStruct->De_Gx = DataStruct->De_Gx / 400.0;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001774 <MPU6050_Balance_Data+0x354>)
 80016c2:	f7ff f86f 	bl	80007a4 <__aeabi_ddiv>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	6839      	ldr	r1, [r7, #0]
 80016cc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	DataStruct->De_Gy = DataStruct->De_Gy / 400.0;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	@ 0x48
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	4b26      	ldr	r3, [pc, #152]	@ (8001774 <MPU6050_Balance_Data+0x354>)
 80016dc:	f7ff f862 	bl	80007a4 <__aeabi_ddiv>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	6839      	ldr	r1, [r7, #0]
 80016e6:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48
	DataStruct->De_Gz = DataStruct->De_Gz / 400.0;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <MPU6050_Balance_Data+0x354>)
 80016f6:	f7ff f855 	bl	80007a4 <__aeabi_ddiv>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	6839      	ldr	r1, [r7, #0]
 8001700:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
	DataStruct->De_Ax = DataStruct->De_Ax / 400.0;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	@ 0x58
 800170a:	f04f 0200 	mov.w	r2, #0
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <MPU6050_Balance_Data+0x354>)
 8001710:	f7ff f848 	bl	80007a4 <__aeabi_ddiv>
 8001714:	4602      	mov	r2, r0
 8001716:	460b      	mov	r3, r1
 8001718:	6839      	ldr	r1, [r7, #0]
 800171a:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
	DataStruct->De_Ay = DataStruct->De_Ay / 400.0;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <MPU6050_Balance_Data+0x354>)
 800172a:	f7ff f83b 	bl	80007a4 <__aeabi_ddiv>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	6839      	ldr	r1, [r7, #0]
 8001734:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
	DataStruct->De_Az = DataStruct->De_Az / 400.0;
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	@ 0x68
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	4b0c      	ldr	r3, [pc, #48]	@ (8001774 <MPU6050_Balance_Data+0x354>)
 8001744:	f7ff f82e 	bl	80007a4 <__aeabi_ddiv>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	6839      	ldr	r1, [r7, #0]
 800174e:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68

	for(i = 0; i < 400; i++){
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e06c      	b.n	8001832 <MPU6050_Balance_Data+0x412>
 8001758:	00000000 	.word	0x00000000
 800175c:	40cc2900 	.word	0x40cc2900
 8001760:	66666666 	.word	0x66666666
 8001764:	40306666 	.word	0x40306666
 8001768:	40d00000 	.word	0x40d00000
 800176c:	43aa0000 	.word	0x43aa0000
 8001770:	42121eb8 	.word	0x42121eb8
 8001774:	40790000 	.word	0x40790000
		DataStruct->Num_Z[i] = DataStruct->Num_Z[i] - DataStruct->De_Az;
 8001778:	683a      	ldr	r2, [r7, #0]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	330e      	adds	r3, #14
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	4413      	add	r3, r2
 8001782:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 800178c:	f7fe fd28 	bl	80001e0 <__aeabi_dsub>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	6838      	ldr	r0, [r7, #0]
 8001796:	69f9      	ldr	r1, [r7, #28]
 8001798:	310e      	adds	r1, #14
 800179a:	00c9      	lsls	r1, r1, #3
 800179c:	4401      	add	r1, r0
 800179e:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_Y[i] = DataStruct->Num_Y[i] - DataStruct->De_Ay;
 80017a2:	683a      	ldr	r2, [r7, #0]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	f203 332e 	addw	r3, r3, #814	@ 0x32e
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4413      	add	r3, r2
 80017ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80017b8:	f7fe fd12 	bl	80001e0 <__aeabi_dsub>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	6838      	ldr	r0, [r7, #0]
 80017c2:	69f9      	ldr	r1, [r7, #28]
 80017c4:	f201 312e 	addw	r1, r1, #814	@ 0x32e
 80017c8:	00c9      	lsls	r1, r1, #3
 80017ca:	4401      	add	r1, r0
 80017cc:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_X[i] = DataStruct->Num_X[i] - DataStruct->De_Ax;
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	f503 73cf 	add.w	r3, r3, #414	@ 0x19e
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	4413      	add	r3, r2
 80017dc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80017e6:	f7fe fcfb 	bl	80001e0 <__aeabi_dsub>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	6838      	ldr	r0, [r7, #0]
 80017f0:	69f9      	ldr	r1, [r7, #28]
 80017f2:	f501 71cf 	add.w	r1, r1, #414	@ 0x19e
 80017f6:	00c9      	lsls	r1, r1, #3
 80017f8:	4401      	add	r1, r0
 80017fa:	e9c1 2300 	strd	r2, r3, [r1]
		DataStruct->Num_Gz[i] = DataStruct->Num_Gz[i] - DataStruct->De_Gz;
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f203 43be 	addw	r3, r3, #1214	@ 0x4be
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	4413      	add	r3, r2
 800180a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8001814:	f7fe fce4 	bl	80001e0 <__aeabi_dsub>
 8001818:	4602      	mov	r2, r0
 800181a:	460b      	mov	r3, r1
 800181c:	6838      	ldr	r0, [r7, #0]
 800181e:	69f9      	ldr	r1, [r7, #28]
 8001820:	f201 41be 	addw	r1, r1, #1214	@ 0x4be
 8001824:	00c9      	lsls	r1, r1, #3
 8001826:	4401      	add	r1, r0
 8001828:	e9c1 2300 	strd	r2, r3, [r1]
	for(i = 0; i < 400; i++){
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	3301      	adds	r3, #1
 8001830:	61fb      	str	r3, [r7, #28]
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001838:	db9e      	blt.n	8001778 <MPU6050_Balance_Data+0x358>
	}

	for(i = 1;i < 400;i++){
 800183a:	2301      	movs	r3, #1
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	e05d      	b.n	80018fc <MPU6050_Balance_Data+0x4dc>
					DataStruct->Num_Z[0] += DataStruct->Num_Z[i];
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	330e      	adds	r3, #14
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	4413      	add	r3, r2
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fcc6 	bl	80001e4 <__adddf3>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	6839      	ldr	r1, [r7, #0]
 800185e:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
					DataStruct->Num_Y[0] += DataStruct->Num_Y[i];
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 8001868:	3310      	adds	r3, #16
 800186a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	f203 332e 	addw	r3, r3, #814	@ 0x32e
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4413      	add	r3, r2
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f7fe fcb1 	bl	80001e4 <__adddf3>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 8001890:	3310      	adds	r3, #16
 8001892:	e9c3 0100 	strd	r0, r1, [r3]
					DataStruct->Num_X[0] += DataStruct->Num_X[i];
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800189c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f503 73cf 	add.w	r3, r3, #414	@ 0x19e
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	4413      	add	r3, r2
 80018ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b0:	f7fe fc98 	bl	80001e4 <__adddf3>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	6839      	ldr	r1, [r7, #0]
 80018ba:	f501 614f 	add.w	r1, r1, #3312	@ 0xcf0
 80018be:	e9c1 2300 	strd	r2, r3, [r1]
					DataStruct->Num_Gz[0] += DataStruct->Num_Gz[i];
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	f503 5317 	add.w	r3, r3, #9664	@ 0x25c0
 80018c8:	3330      	adds	r3, #48	@ 0x30
 80018ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f203 43be 	addw	r3, r3, #1214	@ 0x4be
 80018d6:	00db      	lsls	r3, r3, #3
 80018d8:	4413      	add	r3, r2
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f7fe fc81 	bl	80001e4 <__adddf3>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	f503 5317 	add.w	r3, r3, #9664	@ 0x25c0
 80018f0:	3330      	adds	r3, #48	@ 0x30
 80018f2:	e9c3 0100 	strd	r0, r1, [r3]
	for(i = 1;i < 400;i++){
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3301      	adds	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8001902:	db9d      	blt.n	8001840 <MPU6050_Balance_Data+0x420>

		}
	DataStruct->Num_Z[0] = DataStruct->Num_Z[0] / 400.0;
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	@ 0x70
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b23      	ldr	r3, [pc, #140]	@ (800199c <MPU6050_Balance_Data+0x57c>)
 8001910:	f7fe ff48 	bl	80007a4 <__aeabi_ddiv>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	6839      	ldr	r1, [r7, #0]
 800191a:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
	DataStruct->Num_Y[0] = DataStruct->Num_Y[0] / 400.0;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 8001924:	3310      	adds	r3, #16
 8001926:	e9d3 0100 	ldrd	r0, r1, [r3]
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	4b1b      	ldr	r3, [pc, #108]	@ (800199c <MPU6050_Balance_Data+0x57c>)
 8001930:	f7fe ff38 	bl	80007a4 <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	f503 53cb 	add.w	r3, r3, #6496	@ 0x1960
 8001942:	3310      	adds	r3, #16
 8001944:	e9c3 0100 	strd	r0, r1, [r3]
	DataStruct->Num_X[0] = DataStruct->Num_X[0] / 400.0;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f503 634f 	add.w	r3, r3, #3312	@ 0xcf0
 800194e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b11      	ldr	r3, [pc, #68]	@ (800199c <MPU6050_Balance_Data+0x57c>)
 8001958:	f7fe ff24 	bl	80007a4 <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	6839      	ldr	r1, [r7, #0]
 8001962:	f501 614f 	add.w	r1, r1, #3312	@ 0xcf0
 8001966:	e9c1 2300 	strd	r2, r3, [r1]
	DataStruct->Num_Gz[0] = DataStruct->Num_Gz[0] / 400.0;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	f503 5317 	add.w	r3, r3, #9664	@ 0x25c0
 8001970:	3330      	adds	r3, #48	@ 0x30
 8001972:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	4b08      	ldr	r3, [pc, #32]	@ (800199c <MPU6050_Balance_Data+0x57c>)
 800197c:	f7fe ff12 	bl	80007a4 <__aeabi_ddiv>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	4619      	mov	r1, r3
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f503 5317 	add.w	r3, r3, #9664	@ 0x25c0
 800198e:	3330      	adds	r3, #48	@ 0x30
 8001990:	e9c3 0100 	strd	r0, r1, [r3]


}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40790000 	.word	0x40790000

080019a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	607b      	str	r3, [r7, #4]
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <HAL_MspInit+0x4c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ae:	4a0f      	ldr	r2, [pc, #60]	@ (80019ec <HAL_MspInit+0x4c>)
 80019b0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019b6:	4b0d      	ldr	r3, [pc, #52]	@ (80019ec <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019be:	607b      	str	r3, [r7, #4]
 80019c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	603b      	str	r3, [r7, #0]
 80019c6:	4b09      	ldr	r3, [pc, #36]	@ (80019ec <HAL_MspInit+0x4c>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ca:	4a08      	ldr	r2, [pc, #32]	@ (80019ec <HAL_MspInit+0x4c>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d2:	4b06      	ldr	r3, [pc, #24]	@ (80019ec <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	@ 0x30
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001af8 <HAL_I2C_MspInit+0x108>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d12c      	bne.n	8001a6c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a38      	ldr	r2, [pc, #224]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001a1c:	f043 0302 	orr.w	r3, r3, #2
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b36      	ldr	r3, [pc, #216]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8001a2e:	23c0      	movs	r3, #192	@ 0xc0
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a32:	2312      	movs	r3, #18
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	482d      	ldr	r0, [pc, #180]	@ (8001b00 <HAL_I2C_MspInit+0x110>)
 8001a4a:	f000 fb91 	bl	8002170 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	4b2a      	ldr	r3, [pc, #168]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	4a29      	ldr	r2, [pc, #164]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001a58:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5e:	4b27      	ldr	r3, [pc, #156]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a6a:	e041      	b.n	8001af0 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a24      	ldr	r2, [pc, #144]	@ (8001b04 <HAL_I2C_MspInit+0x114>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d13c      	bne.n	8001af0 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	613b      	str	r3, [r7, #16]
 8001a7a:	4b20      	ldr	r3, [pc, #128]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001a80:	f043 0302 	orr.w	r3, r3, #2
 8001a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a86:	4b1d      	ldr	r3, [pc, #116]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	613b      	str	r3, [r7, #16]
 8001a90:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a98:	2312      	movs	r3, #18
 8001a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001aa4:	2304      	movs	r3, #4
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	4814      	ldr	r0, [pc, #80]	@ (8001b00 <HAL_I2C_MspInit+0x110>)
 8001ab0:	f000 fb5e 	bl	8002170 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001ab4:	2308      	movs	r3, #8
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ab8:	2312      	movs	r3, #18
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001ac4:	2309      	movs	r3, #9
 8001ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	480c      	ldr	r0, [pc, #48]	@ (8001b00 <HAL_I2C_MspInit+0x110>)
 8001ad0:	f000 fb4e 	bl	8002170 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	4b08      	ldr	r3, [pc, #32]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	4a07      	ldr	r2, [pc, #28]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001ade:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_I2C_MspInit+0x10c>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	68fb      	ldr	r3, [r7, #12]
}
 8001af0:	bf00      	nop
 8001af2:	3730      	adds	r7, #48	@ 0x30
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40005400 	.word	0x40005400
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020400 	.word	0x40020400
 8001b04:	40005800 	.word	0x40005800

08001b08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08c      	sub	sp, #48	@ 0x30
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b10:	f107 031c 	add.w	r3, r7, #28
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a36      	ldr	r2, [pc, #216]	@ (8001c00 <HAL_UART_MspInit+0xf8>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d12d      	bne.n	8001b86 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	4b35      	ldr	r3, [pc, #212]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b32:	4a34      	ldr	r2, [pc, #208]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001b34:	f043 0310 	orr.w	r3, r3, #16
 8001b38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b3a:	4b32      	ldr	r3, [pc, #200]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	f003 0310 	and.w	r3, r3, #16
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
 8001b4a:	4b2e      	ldr	r3, [pc, #184]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001b50:	f043 0301 	orr.w	r3, r3, #1
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b2b      	ldr	r3, [pc, #172]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	617b      	str	r3, [r7, #20]
 8001b60:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b62:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b70:	2303      	movs	r3, #3
 8001b72:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b74:	2307      	movs	r3, #7
 8001b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b78:	f107 031c 	add.w	r3, r7, #28
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4822      	ldr	r0, [pc, #136]	@ (8001c08 <HAL_UART_MspInit+0x100>)
 8001b80:	f000 faf6 	bl	8002170 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b84:	e038      	b.n	8001bf8 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a20      	ldr	r2, [pc, #128]	@ (8001c0c <HAL_UART_MspInit+0x104>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d133      	bne.n	8001bf8 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	4b1b      	ldr	r3, [pc, #108]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b98:	4a1a      	ldr	r2, [pc, #104]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001b9a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba0:	4b18      	ldr	r3, [pc, #96]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ba8:	613b      	str	r3, [r7, #16]
 8001baa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bac:	2300      	movs	r3, #0
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	4b14      	ldr	r3, [pc, #80]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb4:	4a13      	ldr	r2, [pc, #76]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001bb6:	f043 0301 	orr.w	r3, r3, #1
 8001bba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <HAL_UART_MspInit+0xfc>)
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bc8:	230c      	movs	r3, #12
 8001bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bcc:	2302      	movs	r3, #2
 8001bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd8:	2307      	movs	r3, #7
 8001bda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bdc:	f107 031c 	add.w	r3, r7, #28
 8001be0:	4619      	mov	r1, r3
 8001be2:	4809      	ldr	r0, [pc, #36]	@ (8001c08 <HAL_UART_MspInit+0x100>)
 8001be4:	f000 fac4 	bl	8002170 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001be8:	2200      	movs	r2, #0
 8001bea:	2100      	movs	r1, #0
 8001bec:	2026      	movs	r0, #38	@ 0x26
 8001bee:	f000 f9f6 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bf2:	2026      	movs	r0, #38	@ 0x26
 8001bf4:	f000 fa0f 	bl	8002016 <HAL_NVIC_EnableIRQ>
}
 8001bf8:	bf00      	nop
 8001bfa:	3730      	adds	r7, #48	@ 0x30
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40011000 	.word	0x40011000
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40004400 	.word	0x40004400

08001c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <NMI_Handler+0x4>

08001c18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c1c:	bf00      	nop
 8001c1e:	e7fd      	b.n	8001c1c <HardFault_Handler+0x4>

08001c20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c24:	bf00      	nop
 8001c26:	e7fd      	b.n	8001c24 <MemManage_Handler+0x4>

08001c28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c2c:	bf00      	nop
 8001c2e:	e7fd      	b.n	8001c2c <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c34:	bf00      	nop
 8001c36:	e7fd      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr

08001c62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c66:	f000 f89b 	bl	8001da0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c74:	4802      	ldr	r0, [pc, #8]	@ (8001c80 <USART2_IRQHandler+0x10>)
 8001c76:	f002 f927 	bl	8003ec8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c7a:	bf00      	nop
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	2000011c 	.word	0x2000011c

08001c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c88:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <SystemInit+0x20>)
 8001c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ca4 <SystemInit+0x20>)
 8001c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c98:	bf00      	nop
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ce0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001cac:	f7ff ffea 	bl	8001c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cb0:	480c      	ldr	r0, [pc, #48]	@ (8001ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001cb2:	490d      	ldr	r1, [pc, #52]	@ (8001ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cb8:	e002      	b.n	8001cc0 <LoopCopyDataInit>

08001cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cbe:	3304      	adds	r3, #4

08001cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cc4:	d3f9      	bcc.n	8001cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ccc:	e001      	b.n	8001cd2 <LoopFillZerobss>

08001cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cd0:	3204      	adds	r2, #4

08001cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cd4:	d3fb      	bcc.n	8001cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cd6:	f002 fffd 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cda:	f7ff f83b 	bl	8000d54 <main>
  bx  lr    
 8001cde:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ce0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ce8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001cec:	08004d5c 	.word	0x08004d5c
  ldr r2, =_sbss
 8001cf0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001cf4:	20003440 	.word	0x20003440

08001cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cf8:	e7fe      	b.n	8001cf8 <ADC_IRQHandler>
	...

08001cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d00:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <HAL_Init+0x40>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0d      	ldr	r2, [pc, #52]	@ (8001d3c <HAL_Init+0x40>)
 8001d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <HAL_Init+0x40>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a0a      	ldr	r2, [pc, #40]	@ (8001d3c <HAL_Init+0x40>)
 8001d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d18:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <HAL_Init+0x40>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a07      	ldr	r2, [pc, #28]	@ (8001d3c <HAL_Init+0x40>)
 8001d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d24:	2003      	movs	r0, #3
 8001d26:	f000 f94f 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f000 f808 	bl	8001d40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d30:	f7ff fe36 	bl	80019a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023c00 	.word	0x40023c00

08001d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <HAL_InitTick+0x54>)
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_InitTick+0x58>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	4619      	mov	r1, r3
 8001d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 f967 	bl	8002032 <HAL_SYSTICK_Config>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e00e      	b.n	8001d8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d80a      	bhi.n	8001d8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f000 f92f 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d80:	4a06      	ldr	r2, [pc, #24]	@ (8001d9c <HAL_InitTick+0x5c>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	e000      	b.n	8001d8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3708      	adds	r7, #8
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000004 	.word	0x20000004
 8001d98:	2000000c 	.word	0x2000000c
 8001d9c:	20000008 	.word	0x20000008

08001da0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <HAL_IncTick+0x20>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	461a      	mov	r2, r3
 8001daa:	4b06      	ldr	r3, [pc, #24]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4413      	add	r3, r2
 8001db0:	4a04      	ldr	r2, [pc, #16]	@ (8001dc4 <HAL_IncTick+0x24>)
 8001db2:	6013      	str	r3, [r2, #0]
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	2000000c 	.word	0x2000000c
 8001dc4:	2000343c 	.word	0x2000343c

08001dc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return uwTick;
 8001dcc:	4b03      	ldr	r3, [pc, #12]	@ (8001ddc <HAL_GetTick+0x14>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop
 8001ddc:	2000343c 	.word	0x2000343c

08001de0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001de8:	f7ff ffee 	bl	8001dc8 <HAL_GetTick>
 8001dec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df8:	d005      	beq.n	8001e06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_Delay+0x44>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	4413      	add	r3, r2
 8001e04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e06:	bf00      	nop
 8001e08:	f7ff ffde 	bl	8001dc8 <HAL_GetTick>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	1ad3      	subs	r3, r2, r3
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d8f7      	bhi.n	8001e08 <HAL_Delay+0x28>
  {
  }
}
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	2000000c 	.word	0x2000000c

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	@ (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	@ (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	@ (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff8e 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff29 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff3e 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff8e 	bl	8001f1c <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff31 	bl	8001e8c <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa2 	bl	8001f84 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002056:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002058:	f7ff feb6 	bl	8001dc8 <HAL_GetTick>
 800205c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d008      	beq.n	800207c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2280      	movs	r2, #128	@ 0x80
 800206e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e052      	b.n	8002122 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f022 0216 	bic.w	r2, r2, #22
 800208a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695a      	ldr	r2, [r3, #20]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800209a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d103      	bne.n	80020ac <HAL_DMA_Abort+0x62>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d007      	beq.n	80020bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0208 	bic.w	r2, r2, #8
 80020ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0201 	bic.w	r2, r2, #1
 80020ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020cc:	e013      	b.n	80020f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020ce:	f7ff fe7b 	bl	8001dc8 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d90c      	bls.n	80020f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2203      	movs	r2, #3
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e015      	b.n	8002122 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	2b00      	cmp	r3, #0
 8002102:	d1e4      	bne.n	80020ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002108:	223f      	movs	r2, #63	@ 0x3f
 800210a:	409a      	lsls	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2201      	movs	r2, #1
 8002114:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}

0800212a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d004      	beq.n	8002148 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2280      	movs	r2, #128	@ 0x80
 8002142:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e00c      	b.n	8002162 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2205      	movs	r2, #5
 800214c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f022 0201 	bic.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e159      	b.n	8002440 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	f040 8148 	bne.w	800243a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d005      	beq.n	80021c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d130      	bne.n	8002224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0201 	and.w	r2, r3, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b03      	cmp	r3, #3
 800222e:	d017      	beq.n	8002260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d123      	bne.n	80022b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	220f      	movs	r2, #15
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	08da      	lsrs	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3208      	adds	r2, #8
 80022ae:	69b9      	ldr	r1, [r7, #24]
 80022b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0203 	and.w	r2, r3, #3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a2 	beq.w	800243a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b57      	ldr	r3, [pc, #348]	@ (8002458 <HAL_GPIO_Init+0x2e8>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	4a56      	ldr	r2, [pc, #344]	@ (8002458 <HAL_GPIO_Init+0x2e8>)
 8002300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002304:	6453      	str	r3, [r2, #68]	@ 0x44
 8002306:	4b54      	ldr	r3, [pc, #336]	@ (8002458 <HAL_GPIO_Init+0x2e8>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002312:	4a52      	ldr	r2, [pc, #328]	@ (800245c <HAL_GPIO_Init+0x2ec>)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3302      	adds	r3, #2
 800231a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a49      	ldr	r2, [pc, #292]	@ (8002460 <HAL_GPIO_Init+0x2f0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d019      	beq.n	8002372 <HAL_GPIO_Init+0x202>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a48      	ldr	r2, [pc, #288]	@ (8002464 <HAL_GPIO_Init+0x2f4>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d013      	beq.n	800236e <HAL_GPIO_Init+0x1fe>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a47      	ldr	r2, [pc, #284]	@ (8002468 <HAL_GPIO_Init+0x2f8>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d00d      	beq.n	800236a <HAL_GPIO_Init+0x1fa>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a46      	ldr	r2, [pc, #280]	@ (800246c <HAL_GPIO_Init+0x2fc>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d007      	beq.n	8002366 <HAL_GPIO_Init+0x1f6>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a45      	ldr	r2, [pc, #276]	@ (8002470 <HAL_GPIO_Init+0x300>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d101      	bne.n	8002362 <HAL_GPIO_Init+0x1f2>
 800235e:	2304      	movs	r3, #4
 8002360:	e008      	b.n	8002374 <HAL_GPIO_Init+0x204>
 8002362:	2307      	movs	r3, #7
 8002364:	e006      	b.n	8002374 <HAL_GPIO_Init+0x204>
 8002366:	2303      	movs	r3, #3
 8002368:	e004      	b.n	8002374 <HAL_GPIO_Init+0x204>
 800236a:	2302      	movs	r3, #2
 800236c:	e002      	b.n	8002374 <HAL_GPIO_Init+0x204>
 800236e:	2301      	movs	r3, #1
 8002370:	e000      	b.n	8002374 <HAL_GPIO_Init+0x204>
 8002372:	2300      	movs	r3, #0
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	f002 0203 	and.w	r2, r2, #3
 800237a:	0092      	lsls	r2, r2, #2
 800237c:	4093      	lsls	r3, r2
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4313      	orrs	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002384:	4935      	ldr	r1, [pc, #212]	@ (800245c <HAL_GPIO_Init+0x2ec>)
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	089b      	lsrs	r3, r3, #2
 800238a:	3302      	adds	r3, #2
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002392:	4b38      	ldr	r3, [pc, #224]	@ (8002474 <HAL_GPIO_Init+0x304>)
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023b6:	4a2f      	ldr	r2, [pc, #188]	@ (8002474 <HAL_GPIO_Init+0x304>)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002474 <HAL_GPIO_Init+0x304>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023e0:	4a24      	ldr	r2, [pc, #144]	@ (8002474 <HAL_GPIO_Init+0x304>)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023e6:	4b23      	ldr	r3, [pc, #140]	@ (8002474 <HAL_GPIO_Init+0x304>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800240a:	4a1a      	ldr	r2, [pc, #104]	@ (8002474 <HAL_GPIO_Init+0x304>)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002410:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <HAL_GPIO_Init+0x304>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4313      	orrs	r3, r2
 8002432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002434:	4a0f      	ldr	r2, [pc, #60]	@ (8002474 <HAL_GPIO_Init+0x304>)
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	3301      	adds	r3, #1
 800243e:	61fb      	str	r3, [r7, #28]
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	2b0f      	cmp	r3, #15
 8002444:	f67f aea2 	bls.w	800218c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002448:	bf00      	nop
 800244a:	bf00      	nop
 800244c:	3724      	adds	r7, #36	@ 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40013800 	.word	0x40013800
 8002460:	40020000 	.word	0x40020000
 8002464:	40020400 	.word	0x40020400
 8002468:	40020800 	.word	0x40020800
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40021000 	.word	0x40021000
 8002474:	40013c00 	.word	0x40013c00

08002478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e12b      	b.n	80026e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d106      	bne.n	80024a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff faa6 	bl	80019f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2224      	movs	r2, #36	@ 0x24
 80024a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f022 0201 	bic.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024dc:	f001 fc20 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 80024e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	4a81      	ldr	r2, [pc, #516]	@ (80026ec <HAL_I2C_Init+0x274>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d807      	bhi.n	80024fc <HAL_I2C_Init+0x84>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a80      	ldr	r2, [pc, #512]	@ (80026f0 <HAL_I2C_Init+0x278>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	bf94      	ite	ls
 80024f4:	2301      	movls	r3, #1
 80024f6:	2300      	movhi	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e006      	b.n	800250a <HAL_I2C_Init+0x92>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	4a7d      	ldr	r2, [pc, #500]	@ (80026f4 <HAL_I2C_Init+0x27c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	bf94      	ite	ls
 8002504:	2301      	movls	r3, #1
 8002506:	2300      	movhi	r3, #0
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0e7      	b.n	80026e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4a78      	ldr	r2, [pc, #480]	@ (80026f8 <HAL_I2C_Init+0x280>)
 8002516:	fba2 2303 	umull	r2, r3, r2, r3
 800251a:	0c9b      	lsrs	r3, r3, #18
 800251c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68ba      	ldr	r2, [r7, #8]
 800252e:	430a      	orrs	r2, r1
 8002530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	4a6a      	ldr	r2, [pc, #424]	@ (80026ec <HAL_I2C_Init+0x274>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d802      	bhi.n	800254c <HAL_I2C_Init+0xd4>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	3301      	adds	r3, #1
 800254a:	e009      	b.n	8002560 <HAL_I2C_Init+0xe8>
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002552:	fb02 f303 	mul.w	r3, r2, r3
 8002556:	4a69      	ldr	r2, [pc, #420]	@ (80026fc <HAL_I2C_Init+0x284>)
 8002558:	fba2 2303 	umull	r2, r3, r2, r3
 800255c:	099b      	lsrs	r3, r3, #6
 800255e:	3301      	adds	r3, #1
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	6812      	ldr	r2, [r2, #0]
 8002564:	430b      	orrs	r3, r1
 8002566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002572:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	495c      	ldr	r1, [pc, #368]	@ (80026ec <HAL_I2C_Init+0x274>)
 800257c:	428b      	cmp	r3, r1
 800257e:	d819      	bhi.n	80025b4 <HAL_I2C_Init+0x13c>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	1e59      	subs	r1, r3, #1
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fbb1 f3f3 	udiv	r3, r1, r3
 800258e:	1c59      	adds	r1, r3, #1
 8002590:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002594:	400b      	ands	r3, r1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00a      	beq.n	80025b0 <HAL_I2C_Init+0x138>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	1e59      	subs	r1, r3, #1
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a8:	3301      	adds	r3, #1
 80025aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ae:	e051      	b.n	8002654 <HAL_I2C_Init+0x1dc>
 80025b0:	2304      	movs	r3, #4
 80025b2:	e04f      	b.n	8002654 <HAL_I2C_Init+0x1dc>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d111      	bne.n	80025e0 <HAL_I2C_Init+0x168>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	1e58      	subs	r0, r3, #1
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6859      	ldr	r1, [r3, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	440b      	add	r3, r1
 80025ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ce:	3301      	adds	r3, #1
 80025d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bf0c      	ite	eq
 80025d8:	2301      	moveq	r3, #1
 80025da:	2300      	movne	r3, #0
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	e012      	b.n	8002606 <HAL_I2C_Init+0x18e>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1e58      	subs	r0, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	0099      	lsls	r1, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf0c      	ite	eq
 8002600:	2301      	moveq	r3, #1
 8002602:	2300      	movne	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_I2C_Init+0x196>
 800260a:	2301      	movs	r3, #1
 800260c:	e022      	b.n	8002654 <HAL_I2C_Init+0x1dc>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10e      	bne.n	8002634 <HAL_I2C_Init+0x1bc>
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1e58      	subs	r0, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6859      	ldr	r1, [r3, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	005b      	lsls	r3, r3, #1
 8002622:	440b      	add	r3, r1
 8002624:	fbb0 f3f3 	udiv	r3, r0, r3
 8002628:	3301      	adds	r3, #1
 800262a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800262e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002632:	e00f      	b.n	8002654 <HAL_I2C_Init+0x1dc>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1e58      	subs	r0, r3, #1
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6859      	ldr	r1, [r3, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	0099      	lsls	r1, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	fbb0 f3f3 	udiv	r3, r0, r3
 800264a:	3301      	adds	r3, #1
 800264c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002650:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002654:	6879      	ldr	r1, [r7, #4]
 8002656:	6809      	ldr	r1, [r1, #0]
 8002658:	4313      	orrs	r3, r2
 800265a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69da      	ldr	r2, [r3, #28]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	430a      	orrs	r2, r1
 8002676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002682:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6911      	ldr	r1, [r2, #16]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	68d2      	ldr	r2, [r2, #12]
 800268e:	4311      	orrs	r1, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	6812      	ldr	r2, [r2, #0]
 8002694:	430b      	orrs	r3, r1
 8002696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	699b      	ldr	r3, [r3, #24]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f042 0201 	orr.w	r2, r2, #1
 80026c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2220      	movs	r2, #32
 80026ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80026e0:	2300      	movs	r3, #0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3710      	adds	r7, #16
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
 80026ea:	bf00      	nop
 80026ec:	000186a0 	.word	0x000186a0
 80026f0:	001e847f 	.word	0x001e847f
 80026f4:	003d08ff 	.word	0x003d08ff
 80026f8:	431bde83 	.word	0x431bde83
 80026fc:	10624dd3 	.word	0x10624dd3

08002700 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b088      	sub	sp, #32
 8002704:	af02      	add	r7, sp, #8
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4603      	mov	r3, r0
 8002710:	817b      	strh	r3, [r7, #10]
 8002712:	460b      	mov	r3, r1
 8002714:	813b      	strh	r3, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800271a:	f7ff fb55 	bl	8001dc8 <HAL_GetTick>
 800271e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002726:	b2db      	uxtb	r3, r3
 8002728:	2b20      	cmp	r3, #32
 800272a:	f040 80d9 	bne.w	80028e0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	2319      	movs	r3, #25
 8002734:	2201      	movs	r2, #1
 8002736:	496d      	ldr	r1, [pc, #436]	@ (80028ec <HAL_I2C_Mem_Write+0x1ec>)
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fc8b 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002744:	2302      	movs	r3, #2
 8002746:	e0cc      	b.n	80028e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_I2C_Mem_Write+0x56>
 8002752:	2302      	movs	r3, #2
 8002754:	e0c5      	b.n	80028e2 <HAL_I2C_Mem_Write+0x1e2>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0301 	and.w	r3, r3, #1
 8002768:	2b01      	cmp	r3, #1
 800276a:	d007      	beq.n	800277c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0201 	orr.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800278a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2221      	movs	r2, #33	@ 0x21
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2240      	movs	r2, #64	@ 0x40
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6a3a      	ldr	r2, [r7, #32]
 80027a6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80027ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a4d      	ldr	r2, [pc, #308]	@ (80028f0 <HAL_I2C_Mem_Write+0x1f0>)
 80027bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80027be:	88f8      	ldrh	r0, [r7, #6]
 80027c0:	893a      	ldrh	r2, [r7, #8]
 80027c2:	8979      	ldrh	r1, [r7, #10]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	4603      	mov	r3, r0
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f000 fac2 	bl	8002d58 <I2C_RequestMemoryWrite>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d052      	beq.n	8002880 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e081      	b.n	80028e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027de:	697a      	ldr	r2, [r7, #20]
 80027e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fd50 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00d      	beq.n	800280a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d107      	bne.n	8002806 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002804:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e06b      	b.n	80028e2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002824:	3b01      	subs	r3, #1
 8002826:	b29a      	uxth	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002830:	b29b      	uxth	r3, r3
 8002832:	3b01      	subs	r3, #1
 8002834:	b29a      	uxth	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b04      	cmp	r3, #4
 8002846:	d11b      	bne.n	8002880 <HAL_I2C_Mem_Write+0x180>
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800284c:	2b00      	cmp	r3, #0
 800284e:	d017      	beq.n	8002880 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002854:	781a      	ldrb	r2, [r3, #0]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002860:	1c5a      	adds	r2, r3, #1
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	b29a      	uxth	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1aa      	bne.n	80027de <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002888:	697a      	ldr	r2, [r7, #20]
 800288a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 fd43 	bl	8003318 <I2C_WaitOnBTFFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00d      	beq.n	80028b4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289c:	2b04      	cmp	r3, #4
 800289e:	d107      	bne.n	80028b0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ae:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e016      	b.n	80028e2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2220      	movs	r2, #32
 80028c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80028dc:	2300      	movs	r3, #0
 80028de:	e000      	b.n	80028e2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80028e0:	2302      	movs	r3, #2
  }
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	00100002 	.word	0x00100002
 80028f0:	ffff0000 	.word	0xffff0000

080028f4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08c      	sub	sp, #48	@ 0x30
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	4608      	mov	r0, r1
 80028fe:	4611      	mov	r1, r2
 8002900:	461a      	mov	r2, r3
 8002902:	4603      	mov	r3, r0
 8002904:	817b      	strh	r3, [r7, #10]
 8002906:	460b      	mov	r3, r1
 8002908:	813b      	strh	r3, [r7, #8]
 800290a:	4613      	mov	r3, r2
 800290c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800290e:	f7ff fa5b 	bl	8001dc8 <HAL_GetTick>
 8002912:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b20      	cmp	r3, #32
 800291e:	f040 8214 	bne.w	8002d4a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2319      	movs	r3, #25
 8002928:	2201      	movs	r2, #1
 800292a:	497b      	ldr	r1, [pc, #492]	@ (8002b18 <HAL_I2C_Mem_Read+0x224>)
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f000 fb91 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d001      	beq.n	800293c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002938:	2302      	movs	r3, #2
 800293a:	e207      	b.n	8002d4c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002942:	2b01      	cmp	r3, #1
 8002944:	d101      	bne.n	800294a <HAL_I2C_Mem_Read+0x56>
 8002946:	2302      	movs	r3, #2
 8002948:	e200      	b.n	8002d4c <HAL_I2C_Mem_Read+0x458>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2201      	movs	r2, #1
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b01      	cmp	r3, #1
 800295e:	d007      	beq.n	8002970 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800297e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2222      	movs	r2, #34	@ 0x22
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2240      	movs	r2, #64	@ 0x40
 800298c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80029a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a5b      	ldr	r2, [pc, #364]	@ (8002b1c <HAL_I2C_Mem_Read+0x228>)
 80029b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80029b2:	88f8      	ldrh	r0, [r7, #6]
 80029b4:	893a      	ldrh	r2, [r7, #8]
 80029b6:	8979      	ldrh	r1, [r7, #10]
 80029b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	4603      	mov	r3, r0
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fa5e 	bl	8002e84 <I2C_RequestMemoryRead>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e1bc      	b.n	8002d4c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d113      	bne.n	8002a02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029da:	2300      	movs	r3, #0
 80029dc:	623b      	str	r3, [r7, #32]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	695b      	ldr	r3, [r3, #20]
 80029e4:	623b      	str	r3, [r7, #32]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	623b      	str	r3, [r7, #32]
 80029ee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	e190      	b.n	8002d24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d11b      	bne.n	8002a42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	61fb      	str	r3, [r7, #28]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	61fb      	str	r3, [r7, #28]
 8002a2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3e:	601a      	str	r2, [r3, #0]
 8002a40:	e170      	b.n	8002d24 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d11b      	bne.n	8002a82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	695b      	ldr	r3, [r3, #20]
 8002a74:	61bb      	str	r3, [r7, #24]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	e150      	b.n	8002d24 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a82:	2300      	movs	r3, #0
 8002a84:	617b      	str	r3, [r7, #20]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	617b      	str	r3, [r7, #20]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a98:	e144      	b.n	8002d24 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	f200 80f1 	bhi.w	8002c86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d123      	bne.n	8002af4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ab0:	68f8      	ldr	r0, [r7, #12]
 8002ab2:	f000 fc79 	bl	80033a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e145      	b.n	8002d4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	b2d2      	uxtb	r2, r2
 8002acc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad2:	1c5a      	adds	r2, r3, #1
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002adc:	3b01      	subs	r3, #1
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29a      	uxth	r2, r3
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002af2:	e117      	b.n	8002d24 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d14e      	bne.n	8002b9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	9300      	str	r3, [sp, #0]
 8002b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b02:	2200      	movs	r2, #0
 8002b04:	4906      	ldr	r1, [pc, #24]	@ (8002b20 <HAL_I2C_Mem_Read+0x22c>)
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	f000 faa4 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d008      	beq.n	8002b24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e11a      	b.n	8002d4c <HAL_I2C_Mem_Read+0x458>
 8002b16:	bf00      	nop
 8002b18:	00100002 	.word	0x00100002
 8002b1c:	ffff0000 	.word	0xffff0000
 8002b20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	691a      	ldr	r2, [r3, #16]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3e:	b2d2      	uxtb	r2, r2
 8002b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b46:	1c5a      	adds	r2, r3, #1
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b70:	b2d2      	uxtb	r2, r2
 8002b72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b82:	3b01      	subs	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b98:	e0c4      	b.n	8002d24 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	496c      	ldr	r1, [pc, #432]	@ (8002d54 <HAL_I2C_Mem_Read+0x460>)
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f000 fa55 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e0cb      	b.n	8002d4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	4955      	ldr	r1, [pc, #340]	@ (8002d54 <HAL_I2C_Mem_Read+0x460>)
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fa27 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e09d      	b.n	8002d4c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691a      	ldr	r2, [r3, #16]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c2a:	b2d2      	uxtb	r2, r2
 8002c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c32:	1c5a      	adds	r2, r3, #1
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c64:	1c5a      	adds	r2, r3, #1
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c84:	e04e      	b.n	8002d24 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c88:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 fb8c 	bl	80033a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e058      	b.n	8002d4c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f003 0304 	and.w	r3, r3, #4
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	d124      	bne.n	8002d24 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cde:	2b03      	cmp	r3, #3
 8002ce0:	d107      	bne.n	8002cf2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002cf0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d04:	1c5a      	adds	r2, r3, #1
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f47f aeb6 	bne.w	8002a9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2220      	movs	r2, #32
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e000      	b.n	8002d4c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d4a:	2302      	movs	r3, #2
  }
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3728      	adds	r7, #40	@ 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	00010004 	.word	0x00010004

08002d58 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b088      	sub	sp, #32
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	4608      	mov	r0, r1
 8002d62:	4611      	mov	r1, r2
 8002d64:	461a      	mov	r2, r3
 8002d66:	4603      	mov	r3, r0
 8002d68:	817b      	strh	r3, [r7, #10]
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	813b      	strh	r3, [r7, #8]
 8002d6e:	4613      	mov	r3, r2
 8002d70:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d80:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f000 f960 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00d      	beq.n	8002db6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002da8:	d103      	bne.n	8002db2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e05f      	b.n	8002e76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002dc4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc8:	6a3a      	ldr	r2, [r7, #32]
 8002dca:	492d      	ldr	r1, [pc, #180]	@ (8002e80 <I2C_RequestMemoryWrite+0x128>)
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f9bb 	bl	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e04c      	b.n	8002e76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ddc:	2300      	movs	r3, #0
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002df4:	6a39      	ldr	r1, [r7, #32]
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 fa46 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00d      	beq.n	8002e1e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	d107      	bne.n	8002e1a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e02b      	b.n	8002e76 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e1e:	88fb      	ldrh	r3, [r7, #6]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d105      	bne.n	8002e30 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e24:	893b      	ldrh	r3, [r7, #8]
 8002e26:	b2da      	uxtb	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	611a      	str	r2, [r3, #16]
 8002e2e:	e021      	b.n	8002e74 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e30:	893b      	ldrh	r3, [r7, #8]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	b2da      	uxtb	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e40:	6a39      	ldr	r1, [r7, #32]
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fa20 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d107      	bne.n	8002e66 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e005      	b.n	8002e76 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e6a:	893b      	ldrh	r3, [r7, #8]
 8002e6c:	b2da      	uxtb	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	00010002 	.word	0x00010002

08002e84 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b088      	sub	sp, #32
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4603      	mov	r3, r0
 8002e94:	817b      	strh	r3, [r7, #10]
 8002e96:	460b      	mov	r3, r1
 8002e98:	813b      	strh	r3, [r7, #8]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002eac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ebc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002eca:	68f8      	ldr	r0, [r7, #12]
 8002ecc:	f000 f8c2 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00d      	beq.n	8002ef2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ee4:	d103      	bne.n	8002eee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002eec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e0aa      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ef2:	897b      	ldrh	r3, [r7, #10]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002f00:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f04:	6a3a      	ldr	r2, [r7, #32]
 8002f06:	4952      	ldr	r1, [pc, #328]	@ (8003050 <I2C_RequestMemoryRead+0x1cc>)
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 f91d 	bl	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d001      	beq.n	8002f18 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e097      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f18:	2300      	movs	r3, #0
 8002f1a:	617b      	str	r3, [r7, #20]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	617b      	str	r3, [r7, #20]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f30:	6a39      	ldr	r1, [r7, #32]
 8002f32:	68f8      	ldr	r0, [r7, #12]
 8002f34:	f000 f9a8 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00d      	beq.n	8002f5a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	d107      	bne.n	8002f56 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f54:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e076      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f5a:	88fb      	ldrh	r3, [r7, #6]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d105      	bne.n	8002f6c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002f60:	893b      	ldrh	r3, [r7, #8]
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	611a      	str	r2, [r3, #16]
 8002f6a:	e021      	b.n	8002fb0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002f6c:	893b      	ldrh	r3, [r7, #8]
 8002f6e:	0a1b      	lsrs	r3, r3, #8
 8002f70:	b29b      	uxth	r3, r3
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f7c:	6a39      	ldr	r1, [r7, #32]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 f982 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d107      	bne.n	8002fa2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fa0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e050      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa6:	893b      	ldrh	r3, [r7, #8]
 8002fa8:	b2da      	uxtb	r2, r3
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb2:	6a39      	ldr	r1, [r7, #32]
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f000 f967 	bl	8003288 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fba:	4603      	mov	r3, r0
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00d      	beq.n	8002fdc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	2b04      	cmp	r3, #4
 8002fc6:	d107      	bne.n	8002fd8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e035      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fee:	9300      	str	r3, [sp, #0]
 8002ff0:	6a3b      	ldr	r3, [r7, #32]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f000 f82b 	bl	8003054 <I2C_WaitOnFlagUntilTimeout>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00d      	beq.n	8003020 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003012:	d103      	bne.n	800301c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e013      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003020:	897b      	ldrh	r3, [r7, #10]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f043 0301 	orr.w	r3, r3, #1
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003032:	6a3a      	ldr	r2, [r7, #32]
 8003034:	4906      	ldr	r1, [pc, #24]	@ (8003050 <I2C_RequestMemoryRead+0x1cc>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 f886 	bl	8003148 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	00010002 	.word	0x00010002

08003054 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003064:	e048      	b.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306c:	d044      	beq.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800306e:	f7fe feab 	bl	8001dc8 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	683a      	ldr	r2, [r7, #0]
 800307a:	429a      	cmp	r2, r3
 800307c:	d302      	bcc.n	8003084 <I2C_WaitOnFlagUntilTimeout+0x30>
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d139      	bne.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	0c1b      	lsrs	r3, r3, #16
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b01      	cmp	r3, #1
 800308c:	d10d      	bne.n	80030aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	43da      	mvns	r2, r3
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4013      	ands	r3, r2
 800309a:	b29b      	uxth	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	bf0c      	ite	eq
 80030a0:	2301      	moveq	r3, #1
 80030a2:	2300      	movne	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	461a      	mov	r2, r3
 80030a8:	e00c      	b.n	80030c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	43da      	mvns	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	4013      	ands	r3, r2
 80030b6:	b29b      	uxth	r3, r3
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	bf0c      	ite	eq
 80030bc:	2301      	moveq	r3, #1
 80030be:	2300      	movne	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d116      	bne.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	f043 0220 	orr.w	r2, r3, #32
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e023      	b.n	8003140 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	0c1b      	lsrs	r3, r3, #16
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d10d      	bne.n	800311e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695b      	ldr	r3, [r3, #20]
 8003108:	43da      	mvns	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf0c      	ite	eq
 8003114:	2301      	moveq	r3, #1
 8003116:	2300      	movne	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	e00c      	b.n	8003138 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	43da      	mvns	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	4013      	ands	r3, r2
 800312a:	b29b      	uxth	r3, r3
 800312c:	2b00      	cmp	r3, #0
 800312e:	bf0c      	ite	eq
 8003130:	2301      	moveq	r3, #1
 8003132:	2300      	movne	r3, #0
 8003134:	b2db      	uxtb	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	79fb      	ldrb	r3, [r7, #7]
 800313a:	429a      	cmp	r2, r3
 800313c:	d093      	beq.n	8003066 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
 8003154:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003156:	e071      	b.n	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003162:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003166:	d123      	bne.n	80031b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003176:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003180:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e067      	b.n	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d041      	beq.n	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031b8:	f7fe fe06 	bl	8001dc8 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d302      	bcc.n	80031ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d136      	bne.n	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	0c1b      	lsrs	r3, r3, #16
 80031d2:	b2db      	uxtb	r3, r3
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d10c      	bne.n	80031f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	43da      	mvns	r2, r3
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	4013      	ands	r3, r2
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	bf14      	ite	ne
 80031ea:	2301      	movne	r3, #1
 80031ec:	2300      	moveq	r3, #0
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e00b      	b.n	800320a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	43da      	mvns	r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	4013      	ands	r3, r2
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b00      	cmp	r3, #0
 8003202:	bf14      	ite	ne
 8003204:	2301      	movne	r3, #1
 8003206:	2300      	moveq	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d016      	beq.n	800323c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2200      	movs	r2, #0
 8003212:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	f043 0220 	orr.w	r2, r3, #32
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e021      	b.n	8003280 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	0c1b      	lsrs	r3, r3, #16
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b01      	cmp	r3, #1
 8003244:	d10c      	bne.n	8003260 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695b      	ldr	r3, [r3, #20]
 800324c:	43da      	mvns	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	4013      	ands	r3, r2
 8003252:	b29b      	uxth	r3, r3
 8003254:	2b00      	cmp	r3, #0
 8003256:	bf14      	ite	ne
 8003258:	2301      	movne	r3, #1
 800325a:	2300      	moveq	r3, #0
 800325c:	b2db      	uxtb	r3, r3
 800325e:	e00b      	b.n	8003278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4013      	ands	r3, r2
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	bf14      	ite	ne
 8003272:	2301      	movne	r3, #1
 8003274:	2300      	moveq	r3, #0
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	f47f af6d 	bne.w	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003294:	e034      	b.n	8003300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f8e3 	bl	8003462 <I2C_IsAcknowledgeFailed>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e034      	b.n	8003310 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ac:	d028      	beq.n	8003300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ae:	f7fe fd8b 	bl	8001dc8 <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d302      	bcc.n	80032c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d11d      	bne.n	8003300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ce:	2b80      	cmp	r3, #128	@ 0x80
 80032d0:	d016      	beq.n	8003300 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2200      	movs	r2, #0
 80032d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	f043 0220 	orr.w	r2, r3, #32
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e007      	b.n	8003310 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800330a:	2b80      	cmp	r3, #128	@ 0x80
 800330c:	d1c3      	bne.n	8003296 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003324:	e034      	b.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f89b 	bl	8003462 <I2C_IsAcknowledgeFailed>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d001      	beq.n	8003336 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e034      	b.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d028      	beq.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800333e:	f7fe fd43 	bl	8001dc8 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	429a      	cmp	r2, r3
 800334c:	d302      	bcc.n	8003354 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d11d      	bne.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695b      	ldr	r3, [r3, #20]
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	2b04      	cmp	r3, #4
 8003360:	d016      	beq.n	8003390 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e007      	b.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	f003 0304 	and.w	r3, r3, #4
 800339a:	2b04      	cmp	r3, #4
 800339c:	d1c3      	bne.n	8003326 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3710      	adds	r7, #16
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033b4:	e049      	b.n	800344a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	f003 0310 	and.w	r3, r3, #16
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d119      	bne.n	80033f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f06f 0210 	mvn.w	r2, #16
 80033cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e030      	b.n	800345a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f8:	f7fe fce6 	bl	8001dc8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	429a      	cmp	r2, r3
 8003406:	d302      	bcc.n	800340e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11d      	bne.n	800344a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003418:	2b40      	cmp	r3, #64	@ 0x40
 800341a:	d016      	beq.n	800344a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2220      	movs	r2, #32
 8003426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003436:	f043 0220 	orr.w	r2, r3, #32
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e007      	b.n	800345a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	695b      	ldr	r3, [r3, #20]
 8003450:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d1ae      	bne.n	80033b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003462:	b480      	push	{r7}
 8003464:	b083      	sub	sp, #12
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	695b      	ldr	r3, [r3, #20]
 8003470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003478:	d11b      	bne.n	80034b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003482:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2220      	movs	r2, #32
 800348e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	f043 0204 	orr.w	r2, r3, #4
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e000      	b.n	80034b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e267      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d075      	beq.n	80035ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034de:	4b88      	ldr	r3, [pc, #544]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00c      	beq.n	8003504 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ea:	4b85      	ldr	r3, [pc, #532]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d112      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b82      	ldr	r3, [pc, #520]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003502:	d10b      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	4b7e      	ldr	r3, [pc, #504]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05b      	beq.n	80035c8 <HAL_RCC_OscConfig+0x108>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d157      	bne.n	80035c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e242      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003524:	d106      	bne.n	8003534 <HAL_RCC_OscConfig+0x74>
 8003526:	4b76      	ldr	r3, [pc, #472]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a75      	ldr	r2, [pc, #468]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x98>
 800353e:	4b70      	ldr	r3, [pc, #448]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6f      	ldr	r2, [pc, #444]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b6d      	ldr	r3, [pc, #436]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a6c      	ldr	r2, [pc, #432]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003558:	4b69      	ldr	r3, [pc, #420]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a68      	ldr	r2, [pc, #416]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b66      	ldr	r3, [pc, #408]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a65      	ldr	r2, [pc, #404]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fe fc26 	bl	8001dc8 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fe fc22 	bl	8001dc8 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	@ 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e207      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b5b      	ldr	r3, [pc, #364]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xc0>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fe fc12 	bl	8001dc8 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fc0e 	bl	8001dc8 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	@ 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1f3      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	4b51      	ldr	r3, [pc, #324]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0xe8>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d063      	beq.n	800369e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d11c      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b44      	ldr	r3, [pc, #272]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e1c7      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	4b3b      	ldr	r3, [pc, #236]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4937      	ldr	r1, [pc, #220]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	e03a      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003630:	4b34      	ldr	r3, [pc, #208]	@ (8003704 <HAL_RCC_OscConfig+0x244>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fe fbc7 	bl	8001dc8 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363e:	f7fe fbc3 	bl	8001dc8 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e1a8      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	4b2b      	ldr	r3, [pc, #172]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365c:	4b28      	ldr	r3, [pc, #160]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4925      	ldr	r1, [pc, #148]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
 8003670:	e015      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003672:	4b24      	ldr	r3, [pc, #144]	@ (8003704 <HAL_RCC_OscConfig+0x244>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe fba6 	bl	8001dc8 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003680:	f7fe fba2 	bl	8001dc8 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e187      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d036      	beq.n	8003718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <HAL_RCC_OscConfig+0x248>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fe fb86 	bl	8001dc8 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c0:	f7fe fb82 	bl	8001dc8 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e167      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x200>
 80036de:	e01b      	b.n	8003718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e0:	4b09      	ldr	r3, [pc, #36]	@ (8003708 <HAL_RCC_OscConfig+0x248>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fe fb6f 	bl	8001dc8 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	e00e      	b.n	800370c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ee:	f7fe fb6b 	bl	8001dc8 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d907      	bls.n	800370c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e150      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003700:	40023800 	.word	0x40023800
 8003704:	42470000 	.word	0x42470000
 8003708:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	4b88      	ldr	r3, [pc, #544]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8097 	beq.w	8003854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b81      	ldr	r3, [pc, #516]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	4b7d      	ldr	r3, [pc, #500]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	4a7c      	ldr	r2, [pc, #496]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	@ 0x40
 8003746:	4b7a      	ldr	r3, [pc, #488]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b77      	ldr	r3, [pc, #476]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d118      	bne.n	8003794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003762:	4b74      	ldr	r3, [pc, #464]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a73      	ldr	r2, [pc, #460]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376e:	f7fe fb2b 	bl	8001dc8 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fe fb27 	bl	8001dc8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e10c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	4b6a      	ldr	r3, [pc, #424]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x2ea>
 800379c:	4b64      	ldr	r3, [pc, #400]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a0:	4a63      	ldr	r2, [pc, #396]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x30c>
 80037b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037be:	4b5c      	ldr	r3, [pc, #368]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037cc:	4b58      	ldr	r3, [pc, #352]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d0:	4a57      	ldr	r2, [pc, #348]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d8:	4b55      	ldr	r3, [pc, #340]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a54      	ldr	r2, [pc, #336]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe faec 	bl	8001dc8 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fe fae8 	bl	8001dc8 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0cb      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	4b49      	ldr	r3, [pc, #292]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ee      	beq.n	80037f4 <HAL_RCC_OscConfig+0x334>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003818:	f7fe fad6 	bl	8001dc8 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fe fad2 	bl	8001dc8 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0b5      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	4b3e      	ldr	r3, [pc, #248]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ee      	bne.n	8003820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b39      	ldr	r3, [pc, #228]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	4a38      	ldr	r2, [pc, #224]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003852:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a1 	beq.w	80039a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800385e:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b08      	cmp	r3, #8
 8003868:	d05c      	beq.n	8003924 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d141      	bne.n	80038f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b31      	ldr	r3, [pc, #196]	@ (8003938 <HAL_RCC_OscConfig+0x478>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fe faa6 	bl	8001dc8 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003880:	f7fe faa2 	bl	8001dc8 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e087      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	3b01      	subs	r3, #1
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	491b      	ldr	r1, [pc, #108]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <HAL_RCC_OscConfig+0x478>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fe fa7b 	bl	8001dc8 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fe fa77 	bl	8001dc8 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e05c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e8:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x416>
 80038f4:	e054      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b10      	ldr	r3, [pc, #64]	@ (8003938 <HAL_RCC_OscConfig+0x478>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fe fa64 	bl	8001dc8 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fe fa60 	bl	8001dc8 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e045      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x444>
 8003922:	e03d      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e038      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003930:	40023800 	.word	0x40023800
 8003934:	40007000 	.word	0x40007000
 8003938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <HAL_RCC_OscConfig+0x4ec>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d028      	beq.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d121      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d11a      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	4293      	cmp	r3, r2
 8003976:	d111      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	3b01      	subs	r3, #1
 8003986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0cc      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b68      	ldr	r3, [pc, #416]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d90c      	bls.n	80039ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b65      	ldr	r3, [pc, #404]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b63      	ldr	r3, [pc, #396]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b8      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b59      	ldr	r3, [pc, #356]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a58      	ldr	r2, [pc, #352]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a1c:	4b53      	ldr	r3, [pc, #332]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a52      	ldr	r2, [pc, #328]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b50      	ldr	r3, [pc, #320]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	494d      	ldr	r1, [pc, #308]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d044      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b47      	ldr	r3, [pc, #284]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d119      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e06f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e067      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8e:	4b37      	ldr	r3, [pc, #220]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4934      	ldr	r1, [pc, #208]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fe f992 	bl	8001dc8 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fe f98e 	bl	8001dc8 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e04f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	4b2b      	ldr	r3, [pc, #172]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 020c 	and.w	r2, r3, #12
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1eb      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b25      	ldr	r3, [pc, #148]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d20c      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b22      	ldr	r3, [pc, #136]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e032      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	4b19      	ldr	r3, [pc, #100]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4916      	ldr	r1, [pc, #88]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b22:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	490e      	ldr	r1, [pc, #56]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b36:	f000 f821 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	490a      	ldr	r1, [pc, #40]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	4a09      	ldr	r2, [pc, #36]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b52:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe f8f2 	bl	8001d40 <HAL_InitTick>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023c00 	.word	0x40023c00
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	08004d34 	.word	0x08004d34
 8003b74:	20000004 	.word	0x20000004
 8003b78:	20000008 	.word	0x20000008

08003b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b80:	b090      	sub	sp, #64	@ 0x40
 8003b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b94:	4b59      	ldr	r3, [pc, #356]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d00d      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x40>
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	f200 80a1 	bhi.w	8003ce8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bae:	e09b      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b53      	ldr	r3, [pc, #332]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bb4:	e09b      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bb6:	4b53      	ldr	r3, [pc, #332]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bba:	e098      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bbc:	4b4f      	ldr	r3, [pc, #316]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bc4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc6:	4b4d      	ldr	r3, [pc, #308]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d028      	beq.n	8003c24 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	2200      	movs	r2, #0
 8003bda:	623b      	str	r3, [r7, #32]
 8003bdc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bde:	6a3b      	ldr	r3, [r7, #32]
 8003be0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003be4:	2100      	movs	r1, #0
 8003be6:	4b47      	ldr	r3, [pc, #284]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003be8:	fb03 f201 	mul.w	r2, r3, r1
 8003bec:	2300      	movs	r3, #0
 8003bee:	fb00 f303 	mul.w	r3, r0, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	4a43      	ldr	r2, [pc, #268]	@ (8003d04 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bf6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bfc:	460a      	mov	r2, r1
 8003bfe:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c02:	4413      	add	r3, r2
 8003c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c08:	2200      	movs	r2, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	61fa      	str	r2, [r7, #28]
 8003c0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c12:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c16:	f7fc ff25 	bl	8000a64 <__aeabi_uldivmod>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	4613      	mov	r3, r2
 8003c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c22:	e053      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c24:	4b35      	ldr	r3, [pc, #212]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	099b      	lsrs	r3, r3, #6
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	613b      	str	r3, [r7, #16]
 8003c2e:	617a      	str	r2, [r7, #20]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c36:	f04f 0b00 	mov.w	fp, #0
 8003c3a:	4652      	mov	r2, sl
 8003c3c:	465b      	mov	r3, fp
 8003c3e:	f04f 0000 	mov.w	r0, #0
 8003c42:	f04f 0100 	mov.w	r1, #0
 8003c46:	0159      	lsls	r1, r3, #5
 8003c48:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c4c:	0150      	lsls	r0, r2, #5
 8003c4e:	4602      	mov	r2, r0
 8003c50:	460b      	mov	r3, r1
 8003c52:	ebb2 080a 	subs.w	r8, r2, sl
 8003c56:	eb63 090b 	sbc.w	r9, r3, fp
 8003c5a:	f04f 0200 	mov.w	r2, #0
 8003c5e:	f04f 0300 	mov.w	r3, #0
 8003c62:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c66:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c6a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c6e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c72:	eb63 0509 	sbc.w	r5, r3, r9
 8003c76:	f04f 0200 	mov.w	r2, #0
 8003c7a:	f04f 0300 	mov.w	r3, #0
 8003c7e:	00eb      	lsls	r3, r5, #3
 8003c80:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c84:	00e2      	lsls	r2, r4, #3
 8003c86:	4614      	mov	r4, r2
 8003c88:	461d      	mov	r5, r3
 8003c8a:	eb14 030a 	adds.w	r3, r4, sl
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	eb45 030b 	adc.w	r3, r5, fp
 8003c94:	607b      	str	r3, [r7, #4]
 8003c96:	f04f 0200 	mov.w	r2, #0
 8003c9a:	f04f 0300 	mov.w	r3, #0
 8003c9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ca2:	4629      	mov	r1, r5
 8003ca4:	028b      	lsls	r3, r1, #10
 8003ca6:	4621      	mov	r1, r4
 8003ca8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cac:	4621      	mov	r1, r4
 8003cae:	028a      	lsls	r2, r1, #10
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	60fa      	str	r2, [r7, #12]
 8003cbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cc0:	f7fc fed0 	bl	8000a64 <__aeabi_uldivmod>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4613      	mov	r3, r2
 8003cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ccc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cfc <HAL_RCC_GetSysClockFreq+0x180>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	f003 0303 	and.w	r3, r3, #3
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003cdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ce6:	e002      	b.n	8003cee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce8:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3740      	adds	r7, #64	@ 0x40
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	00f42400 	.word	0x00f42400
 8003d04:	017d7840 	.word	0x017d7840

08003d08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000004 	.word	0x20000004

08003d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d24:	f7ff fff0 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	4b05      	ldr	r3, [pc, #20]	@ (8003d40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	0a9b      	lsrs	r3, r3, #10
 8003d30:	f003 0307 	and.w	r3, r3, #7
 8003d34:	4903      	ldr	r1, [pc, #12]	@ (8003d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d36:	5ccb      	ldrb	r3, [r1, r3]
 8003d38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	40023800 	.word	0x40023800
 8003d44:	08004d44 	.word	0x08004d44

08003d48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d4c:	f7ff ffdc 	bl	8003d08 <HAL_RCC_GetHCLKFreq>
 8003d50:	4602      	mov	r2, r0
 8003d52:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	0b5b      	lsrs	r3, r3, #13
 8003d58:	f003 0307 	and.w	r3, r3, #7
 8003d5c:	4903      	ldr	r1, [pc, #12]	@ (8003d6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d5e:	5ccb      	ldrb	r3, [r1, r3]
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	08004d44 	.word	0x08004d44

08003d70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e042      	b.n	8003e08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd feb6 	bl	8001b08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2224      	movs	r2, #36	@ 0x24
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003db2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fd11 	bl	80047dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	691a      	ldr	r2, [r3, #16]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003dc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003dd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003de8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2200      	movs	r2, #0
 8003e04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b085      	sub	sp, #20
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	d121      	bne.n	8003e6e <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d002      	beq.n	8003e36 <HAL_UART_Transmit_IT+0x26>
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e01a      	b.n	8003e70 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	88fa      	ldrh	r2, [r7, #6]
 8003e4a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2221      	movs	r2, #33	@ 0x21
 8003e56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003e68:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	e000      	b.n	8003e70 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003e6e:	2302      	movs	r3, #2
  }
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	4613      	mov	r3, r2
 8003e88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d112      	bne.n	8003ebc <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_UART_Receive_IT+0x26>
 8003e9c:	88fb      	ldrh	r3, [r7, #6]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e00b      	b.n	8003ebe <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	68b9      	ldr	r1, [r7, #8]
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f000 faba 	bl	800442c <UART_Start_Receive_IT>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	e000      	b.n	8003ebe <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ebc:	2302      	movs	r3, #2
  }
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b0ba      	sub	sp, #232	@ 0xe8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10f      	bne.n	8003f2e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f12:	f003 0320 	and.w	r3, r3, #32
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d009      	beq.n	8003f2e <HAL_UART_IRQHandler+0x66>
 8003f1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f1e:	f003 0320 	and.w	r3, r3, #32
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d003      	beq.n	8003f2e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fb99 	bl	800465e <UART_Receive_IT>
      return;
 8003f2c:	e25b      	b.n	80043e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	f000 80de 	beq.w	80040f4 <HAL_UART_IRQHandler+0x22c>
 8003f38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d106      	bne.n	8003f52 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f48:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	f000 80d1 	beq.w	80040f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d00b      	beq.n	8003f76 <HAL_UART_IRQHandler+0xae>
 8003f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d005      	beq.n	8003f76 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f6e:	f043 0201 	orr.w	r2, r3, #1
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f7a:	f003 0304 	and.w	r3, r3, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00b      	beq.n	8003f9a <HAL_UART_IRQHandler+0xd2>
 8003f82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f92:	f043 0202 	orr.w	r2, r3, #2
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00b      	beq.n	8003fbe <HAL_UART_IRQHandler+0xf6>
 8003fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d005      	beq.n	8003fbe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	f043 0204 	orr.w	r2, r3, #4
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc2:	f003 0308 	and.w	r3, r3, #8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d011      	beq.n	8003fee <HAL_UART_IRQHandler+0x126>
 8003fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fce:	f003 0320 	and.w	r3, r3, #32
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d105      	bne.n	8003fe2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fda:	f003 0301 	and.w	r3, r3, #1
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d005      	beq.n	8003fee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fe6:	f043 0208 	orr.w	r2, r3, #8
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 81f2 	beq.w	80043dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d008      	beq.n	8004016 <HAL_UART_IRQHandler+0x14e>
 8004004:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004008:	f003 0320 	and.w	r3, r3, #32
 800400c:	2b00      	cmp	r3, #0
 800400e:	d002      	beq.n	8004016 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 fb24 	bl	800465e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004020:	2b40      	cmp	r3, #64	@ 0x40
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d103      	bne.n	8004042 <HAL_UART_IRQHandler+0x17a>
 800403a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800403e:	2b00      	cmp	r3, #0
 8004040:	d04f      	beq.n	80040e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 fa2c 	bl	80044a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004052:	2b40      	cmp	r3, #64	@ 0x40
 8004054:	d141      	bne.n	80040da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3314      	adds	r3, #20
 800405c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004060:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004064:	e853 3f00 	ldrex	r3, [r3]
 8004068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800406c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004070:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004074:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3314      	adds	r3, #20
 800407e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004082:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004086:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800408e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800409a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1d9      	bne.n	8004056 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d013      	beq.n	80040d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040ae:	4a7e      	ldr	r2, [pc, #504]	@ (80042a8 <HAL_UART_IRQHandler+0x3e0>)
 80040b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040b6:	4618      	mov	r0, r3
 80040b8:	f7fe f837 	bl	800212a <HAL_DMA_Abort_IT>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d016      	beq.n	80040f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80040cc:	4610      	mov	r0, r2
 80040ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	e00e      	b.n	80040f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f994 	bl	8004400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d8:	e00a      	b.n	80040f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f000 f990 	bl	8004400 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e0:	e006      	b.n	80040f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f98c 	bl	8004400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040ee:	e175      	b.n	80043dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	bf00      	nop
    return;
 80040f2:	e173      	b.n	80043dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	f040 814f 	bne.w	800439c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004102:	f003 0310 	and.w	r3, r3, #16
 8004106:	2b00      	cmp	r3, #0
 8004108:	f000 8148 	beq.w	800439c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004110:	f003 0310 	and.w	r3, r3, #16
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8141 	beq.w	800439c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800411a:	2300      	movs	r3, #0
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	60bb      	str	r3, [r7, #8]
 800412e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b40      	cmp	r3, #64	@ 0x40
 800413c:	f040 80b6 	bne.w	80042ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800414c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004150:	2b00      	cmp	r3, #0
 8004152:	f000 8145 	beq.w	80043e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800415a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800415e:	429a      	cmp	r2, r3
 8004160:	f080 813e 	bcs.w	80043e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800416a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004170:	69db      	ldr	r3, [r3, #28]
 8004172:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004176:	f000 8088 	beq.w	800428a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	330c      	adds	r3, #12
 8004180:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004190:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004194:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004198:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	330c      	adds	r3, #12
 80041a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80041a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1d9      	bne.n	800417a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041d8:	f023 0301 	bic.w	r3, r3, #1
 80041dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041f6:	e841 2300 	strex	r3, r2, [r1]
 80041fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e1      	bne.n	80041c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3314      	adds	r3, #20
 8004208:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004214:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004218:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004226:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004228:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800422c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004234:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e3      	bne.n	8004202 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	330c      	adds	r3, #12
 800424e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004250:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004252:	e853 3f00 	ldrex	r3, [r3]
 8004256:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004258:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800425a:	f023 0310 	bic.w	r3, r3, #16
 800425e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	330c      	adds	r3, #12
 8004268:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800426c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800426e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004270:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004272:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004274:	e841 2300 	strex	r3, r2, [r1]
 8004278:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800427a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1e3      	bne.n	8004248 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004284:	4618      	mov	r0, r3
 8004286:	f7fd fee0 	bl	800204a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2202      	movs	r2, #2
 800428e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004298:	b29b      	uxth	r3, r3
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	b29b      	uxth	r3, r3
 800429e:	4619      	mov	r1, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 f8b7 	bl	8004414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042a6:	e09b      	b.n	80043e0 <HAL_UART_IRQHandler+0x518>
 80042a8:	08004567 	.word	0x08004567
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 808e 	beq.w	80043e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8089 	beq.w	80043e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	330c      	adds	r3, #12
 80042d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042dc:	e853 3f00 	ldrex	r3, [r3]
 80042e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	330c      	adds	r3, #12
 80042f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80042f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042fe:	e841 2300 	strex	r3, r2, [r1]
 8004302:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004304:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1e3      	bne.n	80042d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	3314      	adds	r3, #20
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004314:	e853 3f00 	ldrex	r3, [r3]
 8004318:	623b      	str	r3, [r7, #32]
   return(result);
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	f023 0301 	bic.w	r3, r3, #1
 8004320:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3314      	adds	r3, #20
 800432a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800432e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004332:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004334:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004336:	e841 2300 	strex	r3, r2, [r1]
 800433a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800433c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1e3      	bne.n	800430a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2220      	movs	r2, #32
 8004346:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0310 	bic.w	r3, r3, #16
 8004366:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	330c      	adds	r3, #12
 8004370:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004374:	61fa      	str	r2, [r7, #28]
 8004376:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	69fa      	ldr	r2, [r7, #28]
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	617b      	str	r3, [r7, #20]
   return(result);
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e3      	bne.n	8004350 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2202      	movs	r2, #2
 800438c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800438e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004392:	4619      	mov	r1, r3
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f83d 	bl	8004414 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800439a:	e023      	b.n	80043e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800439c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d009      	beq.n	80043bc <HAL_UART_IRQHandler+0x4f4>
 80043a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 f8ea 	bl	800458e <UART_Transmit_IT>
    return;
 80043ba:	e014      	b.n	80043e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00e      	beq.n	80043e6 <HAL_UART_IRQHandler+0x51e>
 80043c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 f92a 	bl	800462e <UART_EndTransmit_IT>
    return;
 80043da:	e004      	b.n	80043e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80043dc:	bf00      	nop
 80043de:	e002      	b.n	80043e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80043e4:	bf00      	nop
  }
}
 80043e6:	37e8      	adds	r7, #232	@ 0xe8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	460b      	mov	r3, r1
 800441e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	88fa      	ldrh	r2, [r7, #6]
 8004444:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	88fa      	ldrh	r2, [r7, #6]
 800444a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2222      	movs	r2, #34	@ 0x22
 8004456:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d007      	beq.n	8004472 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68da      	ldr	r2, [r3, #12]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004470:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f042 0201 	orr.w	r2, r2, #1
 8004480:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0220 	orr.w	r2, r2, #32
 8004490:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b095      	sub	sp, #84	@ 0x54
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	330c      	adds	r3, #12
 80044c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044c8:	643a      	str	r2, [r7, #64]	@ 0x40
 80044ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044ce:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e5      	bne.n	80044a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3314      	adds	r3, #20
 80044e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f023 0301 	bic.w	r3, r3, #1
 80044f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	3314      	adds	r3, #20
 80044fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80044fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004502:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004504:	e841 2300 	strex	r3, r2, [r1]
 8004508:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800450a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1e5      	bne.n	80044dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004514:	2b01      	cmp	r3, #1
 8004516:	d119      	bne.n	800454c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	330c      	adds	r3, #12
 800451e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	e853 3f00 	ldrex	r3, [r3]
 8004526:	60bb      	str	r3, [r7, #8]
   return(result);
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f023 0310 	bic.w	r3, r3, #16
 800452e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004538:	61ba      	str	r2, [r7, #24]
 800453a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453c:	6979      	ldr	r1, [r7, #20]
 800453e:	69ba      	ldr	r2, [r7, #24]
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	613b      	str	r3, [r7, #16]
   return(result);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1e5      	bne.n	8004518 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800455a:	bf00      	nop
 800455c:	3754      	adds	r7, #84	@ 0x54
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr

08004566 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004566:	b580      	push	{r7, lr}
 8004568:	b084      	sub	sp, #16
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004572:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004580:	68f8      	ldr	r0, [r7, #12]
 8004582:	f7ff ff3d 	bl	8004400 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800458e:	b480      	push	{r7}
 8004590:	b085      	sub	sp, #20
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b21      	cmp	r3, #33	@ 0x21
 80045a0:	d13e      	bne.n	8004620 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045aa:	d114      	bne.n	80045d6 <UART_Transmit_IT+0x48>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d110      	bne.n	80045d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	461a      	mov	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6a1b      	ldr	r3, [r3, #32]
 80045ce:	1c9a      	adds	r2, r3, #2
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	621a      	str	r2, [r3, #32]
 80045d4:	e008      	b.n	80045e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	1c59      	adds	r1, r3, #1
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6211      	str	r1, [r2, #32]
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	3b01      	subs	r3, #1
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	4619      	mov	r1, r3
 80045f6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10f      	bne.n	800461c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800460a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	68da      	ldr	r2, [r3, #12]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800461a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800461c:	2300      	movs	r3, #0
 800461e:	e000      	b.n	8004622 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004620:	2302      	movs	r3, #2
  }
}
 8004622:	4618      	mov	r0, r3
 8004624:	3714      	adds	r7, #20
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	68da      	ldr	r2, [r3, #12]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004644:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff fecc 	bl	80043ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3708      	adds	r7, #8
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b08c      	sub	sp, #48	@ 0x30
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b22      	cmp	r3, #34	@ 0x22
 8004670:	f040 80ae 	bne.w	80047d0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800467c:	d117      	bne.n	80046ae <UART_Receive_IT+0x50>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d113      	bne.n	80046ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004686:	2300      	movs	r3, #0
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800468e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	b29b      	uxth	r3, r3
 8004698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469c:	b29a      	uxth	r2, r3
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046a6:	1c9a      	adds	r2, r3, #2
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80046ac:	e026      	b.n	80046fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80046b4:	2300      	movs	r3, #0
 80046b6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046c0:	d007      	beq.n	80046d2 <UART_Receive_IT+0x74>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d10a      	bne.n	80046e0 <UART_Receive_IT+0x82>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d106      	bne.n	80046e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046dc:	701a      	strb	r2, [r3, #0]
 80046de:	e008      	b.n	80046f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f6:	1c5a      	adds	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004700:	b29b      	uxth	r3, r3
 8004702:	3b01      	subs	r3, #1
 8004704:	b29b      	uxth	r3, r3
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4619      	mov	r1, r3
 800470a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800470c:	2b00      	cmp	r3, #0
 800470e:	d15d      	bne.n	80047cc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 0220 	bic.w	r2, r2, #32
 800471e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800472e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2220      	movs	r2, #32
 8004744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004752:	2b01      	cmp	r3, #1
 8004754:	d135      	bne.n	80047c2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	330c      	adds	r3, #12
 8004762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	613b      	str	r3, [r7, #16]
   return(result);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f023 0310 	bic.w	r3, r3, #16
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	330c      	adds	r3, #12
 800477a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800477c:	623a      	str	r2, [r7, #32]
 800477e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	69f9      	ldr	r1, [r7, #28]
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	61bb      	str	r3, [r7, #24]
   return(result);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e5      	bne.n	800475c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0310 	and.w	r3, r3, #16
 800479a:	2b10      	cmp	r3, #16
 800479c:	d10a      	bne.n	80047b4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047b8:	4619      	mov	r1, r3
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7ff fe2a 	bl	8004414 <HAL_UARTEx_RxEventCallback>
 80047c0:	e002      	b.n	80047c8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f7fc fc9c 	bl	8001100 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047c8:	2300      	movs	r3, #0
 80047ca:	e002      	b.n	80047d2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047cc:	2300      	movs	r3, #0
 80047ce:	e000      	b.n	80047d2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047d0:	2302      	movs	r3, #2
  }
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3730      	adds	r7, #48	@ 0x30
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e0:	b0c0      	sub	sp, #256	@ 0x100
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	68d9      	ldr	r1, [r3, #12]
 80047fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	ea40 0301 	orr.w	r3, r0, r1
 8004804:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	431a      	orrs	r2, r3
 8004814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004818:	695b      	ldr	r3, [r3, #20]
 800481a:	431a      	orrs	r2, r3
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	4313      	orrs	r3, r2
 8004824:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004834:	f021 010c 	bic.w	r1, r1, #12
 8004838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004842:	430b      	orrs	r3, r1
 8004844:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	695b      	ldr	r3, [r3, #20]
 800484e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004856:	6999      	ldr	r1, [r3, #24]
 8004858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	ea40 0301 	orr.w	r3, r0, r1
 8004862:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	4b8f      	ldr	r3, [pc, #572]	@ (8004aa8 <UART_SetConfig+0x2cc>)
 800486c:	429a      	cmp	r2, r3
 800486e:	d005      	beq.n	800487c <UART_SetConfig+0xa0>
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b8d      	ldr	r3, [pc, #564]	@ (8004aac <UART_SetConfig+0x2d0>)
 8004878:	429a      	cmp	r2, r3
 800487a:	d104      	bne.n	8004886 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800487c:	f7ff fa64 	bl	8003d48 <HAL_RCC_GetPCLK2Freq>
 8004880:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004884:	e003      	b.n	800488e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004886:	f7ff fa4b 	bl	8003d20 <HAL_RCC_GetPCLK1Freq>
 800488a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004892:	69db      	ldr	r3, [r3, #28]
 8004894:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004898:	f040 810c 	bne.w	8004ab4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800489c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048a6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048ae:	4622      	mov	r2, r4
 80048b0:	462b      	mov	r3, r5
 80048b2:	1891      	adds	r1, r2, r2
 80048b4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048b6:	415b      	adcs	r3, r3
 80048b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048be:	4621      	mov	r1, r4
 80048c0:	eb12 0801 	adds.w	r8, r2, r1
 80048c4:	4629      	mov	r1, r5
 80048c6:	eb43 0901 	adc.w	r9, r3, r1
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	f04f 0300 	mov.w	r3, #0
 80048d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048de:	4690      	mov	r8, r2
 80048e0:	4699      	mov	r9, r3
 80048e2:	4623      	mov	r3, r4
 80048e4:	eb18 0303 	adds.w	r3, r8, r3
 80048e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048ec:	462b      	mov	r3, r5
 80048ee:	eb49 0303 	adc.w	r3, r9, r3
 80048f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80048f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004902:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004906:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800490a:	460b      	mov	r3, r1
 800490c:	18db      	adds	r3, r3, r3
 800490e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004910:	4613      	mov	r3, r2
 8004912:	eb42 0303 	adc.w	r3, r2, r3
 8004916:	657b      	str	r3, [r7, #84]	@ 0x54
 8004918:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800491c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004920:	f7fc f8a0 	bl	8000a64 <__aeabi_uldivmod>
 8004924:	4602      	mov	r2, r0
 8004926:	460b      	mov	r3, r1
 8004928:	4b61      	ldr	r3, [pc, #388]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 800492a:	fba3 2302 	umull	r2, r3, r3, r2
 800492e:	095b      	lsrs	r3, r3, #5
 8004930:	011c      	lsls	r4, r3, #4
 8004932:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004936:	2200      	movs	r2, #0
 8004938:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800493c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004940:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004944:	4642      	mov	r2, r8
 8004946:	464b      	mov	r3, r9
 8004948:	1891      	adds	r1, r2, r2
 800494a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800494c:	415b      	adcs	r3, r3
 800494e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004950:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004954:	4641      	mov	r1, r8
 8004956:	eb12 0a01 	adds.w	sl, r2, r1
 800495a:	4649      	mov	r1, r9
 800495c:	eb43 0b01 	adc.w	fp, r3, r1
 8004960:	f04f 0200 	mov.w	r2, #0
 8004964:	f04f 0300 	mov.w	r3, #0
 8004968:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800496c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004970:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004974:	4692      	mov	sl, r2
 8004976:	469b      	mov	fp, r3
 8004978:	4643      	mov	r3, r8
 800497a:	eb1a 0303 	adds.w	r3, sl, r3
 800497e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004982:	464b      	mov	r3, r9
 8004984:	eb4b 0303 	adc.w	r3, fp, r3
 8004988:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800498c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004998:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800499c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049a0:	460b      	mov	r3, r1
 80049a2:	18db      	adds	r3, r3, r3
 80049a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80049a6:	4613      	mov	r3, r2
 80049a8:	eb42 0303 	adc.w	r3, r2, r3
 80049ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049b6:	f7fc f855 	bl	8000a64 <__aeabi_uldivmod>
 80049ba:	4602      	mov	r2, r0
 80049bc:	460b      	mov	r3, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 80049c2:	fba3 2301 	umull	r2, r3, r3, r1
 80049c6:	095b      	lsrs	r3, r3, #5
 80049c8:	2264      	movs	r2, #100	@ 0x64
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	1acb      	subs	r3, r1, r3
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049d6:	4b36      	ldr	r3, [pc, #216]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 80049d8:	fba3 2302 	umull	r2, r3, r3, r2
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049e4:	441c      	add	r4, r3
 80049e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049f0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80049f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80049f8:	4642      	mov	r2, r8
 80049fa:	464b      	mov	r3, r9
 80049fc:	1891      	adds	r1, r2, r2
 80049fe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a00:	415b      	adcs	r3, r3
 8004a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a08:	4641      	mov	r1, r8
 8004a0a:	1851      	adds	r1, r2, r1
 8004a0c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a0e:	4649      	mov	r1, r9
 8004a10:	414b      	adcs	r3, r1
 8004a12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a20:	4659      	mov	r1, fp
 8004a22:	00cb      	lsls	r3, r1, #3
 8004a24:	4651      	mov	r1, sl
 8004a26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2a:	4651      	mov	r1, sl
 8004a2c:	00ca      	lsls	r2, r1, #3
 8004a2e:	4610      	mov	r0, r2
 8004a30:	4619      	mov	r1, r3
 8004a32:	4603      	mov	r3, r0
 8004a34:	4642      	mov	r2, r8
 8004a36:	189b      	adds	r3, r3, r2
 8004a38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a3c:	464b      	mov	r3, r9
 8004a3e:	460a      	mov	r2, r1
 8004a40:	eb42 0303 	adc.w	r3, r2, r3
 8004a44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a54:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	18db      	adds	r3, r3, r3
 8004a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a62:	4613      	mov	r3, r2
 8004a64:	eb42 0303 	adc.w	r3, r2, r3
 8004a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a72:	f7fb fff7 	bl	8000a64 <__aeabi_uldivmod>
 8004a76:	4602      	mov	r2, r0
 8004a78:	460b      	mov	r3, r1
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 8004a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a80:	095b      	lsrs	r3, r3, #5
 8004a82:	2164      	movs	r1, #100	@ 0x64
 8004a84:	fb01 f303 	mul.w	r3, r1, r3
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	3332      	adds	r3, #50	@ 0x32
 8004a8e:	4a08      	ldr	r2, [pc, #32]	@ (8004ab0 <UART_SetConfig+0x2d4>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	f003 0207 	and.w	r2, r3, #7
 8004a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4422      	add	r2, r4
 8004aa2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004aa4:	e106      	b.n	8004cb4 <UART_SetConfig+0x4d8>
 8004aa6:	bf00      	nop
 8004aa8:	40011000 	.word	0x40011000
 8004aac:	40011400 	.word	0x40011400
 8004ab0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ab8:	2200      	movs	r2, #0
 8004aba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004abe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ac2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ac6:	4642      	mov	r2, r8
 8004ac8:	464b      	mov	r3, r9
 8004aca:	1891      	adds	r1, r2, r2
 8004acc:	6239      	str	r1, [r7, #32]
 8004ace:	415b      	adcs	r3, r3
 8004ad0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ad6:	4641      	mov	r1, r8
 8004ad8:	1854      	adds	r4, r2, r1
 8004ada:	4649      	mov	r1, r9
 8004adc:	eb43 0501 	adc.w	r5, r3, r1
 8004ae0:	f04f 0200 	mov.w	r2, #0
 8004ae4:	f04f 0300 	mov.w	r3, #0
 8004ae8:	00eb      	lsls	r3, r5, #3
 8004aea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004aee:	00e2      	lsls	r2, r4, #3
 8004af0:	4614      	mov	r4, r2
 8004af2:	461d      	mov	r5, r3
 8004af4:	4643      	mov	r3, r8
 8004af6:	18e3      	adds	r3, r4, r3
 8004af8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004afc:	464b      	mov	r3, r9
 8004afe:	eb45 0303 	adc.w	r3, r5, r3
 8004b02:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b12:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b16:	f04f 0200 	mov.w	r2, #0
 8004b1a:	f04f 0300 	mov.w	r3, #0
 8004b1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b22:	4629      	mov	r1, r5
 8004b24:	008b      	lsls	r3, r1, #2
 8004b26:	4621      	mov	r1, r4
 8004b28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b2c:	4621      	mov	r1, r4
 8004b2e:	008a      	lsls	r2, r1, #2
 8004b30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b34:	f7fb ff96 	bl	8000a64 <__aeabi_uldivmod>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4b60      	ldr	r3, [pc, #384]	@ (8004cc0 <UART_SetConfig+0x4e4>)
 8004b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8004b42:	095b      	lsrs	r3, r3, #5
 8004b44:	011c      	lsls	r4, r3, #4
 8004b46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b50:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b58:	4642      	mov	r2, r8
 8004b5a:	464b      	mov	r3, r9
 8004b5c:	1891      	adds	r1, r2, r2
 8004b5e:	61b9      	str	r1, [r7, #24]
 8004b60:	415b      	adcs	r3, r3
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b68:	4641      	mov	r1, r8
 8004b6a:	1851      	adds	r1, r2, r1
 8004b6c:	6139      	str	r1, [r7, #16]
 8004b6e:	4649      	mov	r1, r9
 8004b70:	414b      	adcs	r3, r1
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	f04f 0200 	mov.w	r2, #0
 8004b78:	f04f 0300 	mov.w	r3, #0
 8004b7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b80:	4659      	mov	r1, fp
 8004b82:	00cb      	lsls	r3, r1, #3
 8004b84:	4651      	mov	r1, sl
 8004b86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b8a:	4651      	mov	r1, sl
 8004b8c:	00ca      	lsls	r2, r1, #3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	4619      	mov	r1, r3
 8004b92:	4603      	mov	r3, r0
 8004b94:	4642      	mov	r2, r8
 8004b96:	189b      	adds	r3, r3, r2
 8004b98:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	eb42 0303 	adc.w	r3, r2, r3
 8004ba4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bb2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bb4:	f04f 0200 	mov.w	r2, #0
 8004bb8:	f04f 0300 	mov.w	r3, #0
 8004bbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bc0:	4649      	mov	r1, r9
 8004bc2:	008b      	lsls	r3, r1, #2
 8004bc4:	4641      	mov	r1, r8
 8004bc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bca:	4641      	mov	r1, r8
 8004bcc:	008a      	lsls	r2, r1, #2
 8004bce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bd2:	f7fb ff47 	bl	8000a64 <__aeabi_uldivmod>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	460b      	mov	r3, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	4b38      	ldr	r3, [pc, #224]	@ (8004cc0 <UART_SetConfig+0x4e4>)
 8004bde:	fba3 2301 	umull	r2, r3, r3, r1
 8004be2:	095b      	lsrs	r3, r3, #5
 8004be4:	2264      	movs	r2, #100	@ 0x64
 8004be6:	fb02 f303 	mul.w	r3, r2, r3
 8004bea:	1acb      	subs	r3, r1, r3
 8004bec:	011b      	lsls	r3, r3, #4
 8004bee:	3332      	adds	r3, #50	@ 0x32
 8004bf0:	4a33      	ldr	r2, [pc, #204]	@ (8004cc0 <UART_SetConfig+0x4e4>)
 8004bf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bf6:	095b      	lsrs	r3, r3, #5
 8004bf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bfc:	441c      	add	r4, r3
 8004bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c02:	2200      	movs	r2, #0
 8004c04:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c06:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c08:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	464b      	mov	r3, r9
 8004c10:	1891      	adds	r1, r2, r2
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	415b      	adcs	r3, r3
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c1c:	4641      	mov	r1, r8
 8004c1e:	1851      	adds	r1, r2, r1
 8004c20:	6039      	str	r1, [r7, #0]
 8004c22:	4649      	mov	r1, r9
 8004c24:	414b      	adcs	r3, r1
 8004c26:	607b      	str	r3, [r7, #4]
 8004c28:	f04f 0200 	mov.w	r2, #0
 8004c2c:	f04f 0300 	mov.w	r3, #0
 8004c30:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c34:	4659      	mov	r1, fp
 8004c36:	00cb      	lsls	r3, r1, #3
 8004c38:	4651      	mov	r1, sl
 8004c3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c3e:	4651      	mov	r1, sl
 8004c40:	00ca      	lsls	r2, r1, #3
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	4603      	mov	r3, r0
 8004c48:	4642      	mov	r2, r8
 8004c4a:	189b      	adds	r3, r3, r2
 8004c4c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c4e:	464b      	mov	r3, r9
 8004c50:	460a      	mov	r2, r1
 8004c52:	eb42 0303 	adc.w	r3, r2, r3
 8004c56:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c62:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c64:	f04f 0200 	mov.w	r2, #0
 8004c68:	f04f 0300 	mov.w	r3, #0
 8004c6c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c70:	4649      	mov	r1, r9
 8004c72:	008b      	lsls	r3, r1, #2
 8004c74:	4641      	mov	r1, r8
 8004c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c7a:	4641      	mov	r1, r8
 8004c7c:	008a      	lsls	r2, r1, #2
 8004c7e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c82:	f7fb feef 	bl	8000a64 <__aeabi_uldivmod>
 8004c86:	4602      	mov	r2, r0
 8004c88:	460b      	mov	r3, r1
 8004c8a:	4b0d      	ldr	r3, [pc, #52]	@ (8004cc0 <UART_SetConfig+0x4e4>)
 8004c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	2164      	movs	r1, #100	@ 0x64
 8004c94:	fb01 f303 	mul.w	r3, r1, r3
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	3332      	adds	r3, #50	@ 0x32
 8004c9e:	4a08      	ldr	r2, [pc, #32]	@ (8004cc0 <UART_SetConfig+0x4e4>)
 8004ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca4:	095b      	lsrs	r3, r3, #5
 8004ca6:	f003 020f 	and.w	r2, r3, #15
 8004caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4422      	add	r2, r4
 8004cb2:	609a      	str	r2, [r3, #8]
}
 8004cb4:	bf00      	nop
 8004cb6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cc0:	51eb851f 	.word	0x51eb851f

08004cc4 <memset>:
 8004cc4:	4402      	add	r2, r0
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d100      	bne.n	8004cce <memset+0xa>
 8004ccc:	4770      	bx	lr
 8004cce:	f803 1b01 	strb.w	r1, [r3], #1
 8004cd2:	e7f9      	b.n	8004cc8 <memset+0x4>

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004d0c <__libc_init_array+0x38>)
 8004cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004d10 <__libc_init_array+0x3c>)
 8004cda:	1b64      	subs	r4, r4, r5
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	2600      	movs	r6, #0
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8004d14 <__libc_init_array+0x40>)
 8004ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8004d18 <__libc_init_array+0x44>)
 8004ce8:	f000 f818 	bl	8004d1c <_init>
 8004cec:	1b64      	subs	r4, r4, r5
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	08004d54 	.word	0x08004d54
 8004d10:	08004d54 	.word	0x08004d54
 8004d14:	08004d54 	.word	0x08004d54
 8004d18:	08004d58 	.word	0x08004d58

08004d1c <_init>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr

08004d28 <_fini>:
 8004d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2a:	bf00      	nop
 8004d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2e:	bc08      	pop	{r3}
 8004d30:	469e      	mov	lr, r3
 8004d32:	4770      	bx	lr
