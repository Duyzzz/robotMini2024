
speedFire.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053b0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080054c0  080054c0  000154c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054ec  080054ec  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080054ec  080054ec  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080054ec  080054ec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054ec  080054ec  000154ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080054f0  080054f0  000154f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080054f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000010  08005500  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  08005500  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c0d6  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b58  00000000  00000000  0002c10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  0002dc68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c18  00000000  00000000  0002e928  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a79  00000000  00000000  0002f540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009868  00000000  00000000  00046fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000898aa  00000000  00000000  00050821  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da0cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003814  00000000  00000000  000da148  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080054a8 	.word	0x080054a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080054a8 	.word	0x080054a8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	; 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000ba8:	f1a2 0201 	sub.w	r2, r2, #1
 8000bac:	d1ed      	bne.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d5a:	2afd      	cmp	r2, #253	; 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	; 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	; 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	; 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <initSecondOrderFilter>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */

void initSecondOrderFilter(SecondOrderFilter *filter, float dt, float cutoff_freq) {
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
    float omega_c = 2.0f * M_PI * cutoff_freq;
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fa2f 	bl	8000418 <__aeabi_f2d>
 8000fba:	a343      	add	r3, pc, #268	; (adr r3, 80010c8 <initSecondOrderFilter+0x120>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fa82 	bl	80004c8 <__aeabi_dmul>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	460c      	mov	r4, r1
 8000fc8:	4618      	mov	r0, r3
 8000fca:	4621      	mov	r1, r4
 8000fcc:	f7ff fd3e 	bl	8000a4c <__aeabi_d2f>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	61bb      	str	r3, [r7, #24]
    float alpha = omega_c * dt / 2.0f;
 8000fd4:	68b9      	ldr	r1, [r7, #8]
 8000fd6:	69b8      	ldr	r0, [r7, #24]
 8000fd8:	f7ff fe96 	bl	8000d08 <__aeabi_fmul>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff44 	bl	8000e70 <__aeabi_fdiv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	617b      	str	r3, [r7, #20]
    float k = alpha / (1.0f + alpha);
 8000fec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000ff0:	6978      	ldr	r0, [r7, #20]
 8000ff2:	f7ff fd81 	bl	8000af8 <__addsf3>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff38 	bl	8000e70 <__aeabi_fdiv>
 8001000:	4603      	mov	r3, r0
 8001002:	613b      	str	r3, [r7, #16]

    // Feedforward coefficients
    filter->b[0] = k * k;
 8001004:	6939      	ldr	r1, [r7, #16]
 8001006:	6938      	ldr	r0, [r7, #16]
 8001008:	f7ff fe7e 	bl	8000d08 <__aeabi_fmul>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	619a      	str	r2, [r3, #24]
    filter->b[1] = 2.0f * filter->b[0];
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	699b      	ldr	r3, [r3, #24]
 8001018:	4619      	mov	r1, r3
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fd6c 	bl	8000af8 <__addsf3>
 8001020:	4603      	mov	r3, r0
 8001022:	461a      	mov	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	61da      	str	r2, [r3, #28]
    filter->b[2] = filter->b[0];
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	699a      	ldr	r2, [r3, #24]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	621a      	str	r2, [r3, #32]

    // Feedback coefficients
    filter->a[0] = 1.0f; // Always 1 for normalization
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001036:	625a      	str	r2, [r3, #36]	; 0x24
    filter->a[1] = 2.0f * (k * k - k);
 8001038:	6939      	ldr	r1, [r7, #16]
 800103a:	6938      	ldr	r0, [r7, #16]
 800103c:	f7ff fe64 	bl	8000d08 <__aeabi_fmul>
 8001040:	4603      	mov	r3, r0
 8001042:	6939      	ldr	r1, [r7, #16]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fd55 	bl	8000af4 <__aeabi_fsub>
 800104a:	4603      	mov	r3, r0
 800104c:	4619      	mov	r1, r3
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fd52 	bl	8000af8 <__addsf3>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	629a      	str	r2, [r3, #40]	; 0x28
    filter->a[2] = 1.0f - 2.0f * k + k * k;
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	4619      	mov	r1, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fd49 	bl	8000af8 <__addsf3>
 8001066:	4603      	mov	r3, r0
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 800106e:	f7ff fd41 	bl	8000af4 <__aeabi_fsub>
 8001072:	4603      	mov	r3, r0
 8001074:	461c      	mov	r4, r3
 8001076:	6939      	ldr	r1, [r7, #16]
 8001078:	6938      	ldr	r0, [r7, #16]
 800107a:	f7ff fe45 	bl	8000d08 <__aeabi_fmul>
 800107e:	4603      	mov	r3, r0
 8001080:	4619      	mov	r1, r3
 8001082:	4620      	mov	r0, r4
 8001084:	f7ff fd38 	bl	8000af8 <__addsf3>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c

    // Initialize states
    for (int i = 0; i < 3; i++) {
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
 8001094:	e010      	b.n	80010b8 <initSecondOrderFilter+0x110>
        filter->x[i] = 0.0f;
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	69fa      	ldr	r2, [r7, #28]
 800109a:	f04f 0100 	mov.w	r1, #0
 800109e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        filter->y[i] = 0.0f;
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	3302      	adds	r3, #2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	4413      	add	r3, r2
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < 3; i++) {
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3301      	adds	r3, #1
 80010b6:	61fb      	str	r3, [r7, #28]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	ddeb      	ble.n	8001096 <initSecondOrderFilter+0xee>
    }
}
 80010be:	bf00      	nop
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd90      	pop	{r4, r7, pc}
 80010c6:	bf00      	nop
 80010c8:	54442d18 	.word	0x54442d18
 80010cc:	401921fb 	.word	0x401921fb

080010d0 <PID_Init>:
    return filter->y[0];
}


void PID_Init(PID_TypeDef *uPID, float dtF, float cutoffF)
{
 80010d0:	b590      	push	{r4, r7, lr}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	initSecondOrderFilter(&uPID->scdFil, dtF, cutoffF);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	3370      	adds	r3, #112	; 0x70
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <initSecondOrderFilter>
	uPID->OutputSum = *uPID->MyOutput;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ee:	cb18      	ldmia	r3, {r3, r4}
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	cb18      	ldmia	r3, {r3, r4}
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	
	if (uPID->OutputSum > uPID->OutMax)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800110e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001112:	461a      	mov	r2, r3
 8001114:	4623      	mov	r3, r4
 8001116:	f7ff fc67 	bl	80009e8 <__aeabi_dcmpgt>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d008      	beq.n	8001132 <PID_Init+0x62>
	{
		uPID->OutputSum = uPID->OutMax;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001126:	e9d4 3400 	ldrd	r3, r4, [r4]
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }
	
}
 8001130:	e017      	b.n	8001162 <PID_Init+0x92>
	else if (uPID->OutputSum < uPID->OutMin)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800113e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001142:	461a      	mov	r2, r3
 8001144:	4623      	mov	r3, r4
 8001146:	f7ff fc31 	bl	80009ac <__aeabi_dcmplt>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d100      	bne.n	8001152 <PID_Init+0x82>
}
 8001150:	e007      	b.n	8001162 <PID_Init+0x92>
		uPID->OutputSum = uPID->OutMin;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001158:	e9d4 3400 	ldrd	r3, r4, [r4]
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
}
 8001162:	bf00      	nop
 8001164:	3714      	adds	r7, #20
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}
 800116a:	0000      	movs	r0, r0
 800116c:	0000      	movs	r0, r0
	...

08001170 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b08b      	sub	sp, #44	; 0x2c
 8001174:	af06      	add	r7, sp, #24
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	603b      	str	r3, [r7, #0]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	687a      	ldr	r2, [r7, #4]
 8001182:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	68ba      	ldr	r2, [r7, #8]
 8001188:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	2200      	movs	r2, #0
 8001194:	705a      	strb	r2, [r3, #1]
	
	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8001196:	a418      	add	r4, pc, #96	; (adr r4, 80011f8 <PID+0x88>)
 8001198:	e9d4 3400 	ldrd	r3, r4, [r4]
 800119c:	e9cd 3400 	strd	r3, r4, [sp]
 80011a0:	f04f 0200 	mov.w	r2, #0
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	68f8      	ldr	r0, [r7, #12]
 80011aa:	f000 f956 	bl	800145a <PID_SetOutputLimits>
	
	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2264      	movs	r2, #100	; 0x64
 80011b2:	609a      	str	r2, [r3, #8]
	
	PID_SetControllerDirection(uPID, ControllerDirection);
 80011b4:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80011b8:	4619      	mov	r1, r3
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f000 fa84 	bl	80016c8 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80011c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80011c4:	9304      	str	r3, [sp, #16]
 80011c6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80011ca:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80011ce:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80011d2:	e9cd 3400 	strd	r3, r4, [sp]
 80011d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 f9c2 	bl	8001564 <PID_SetTunings2>
	
	uPID->LastTime = GetTime() - uPID->SampleTime;
 80011e0:	f001 f9fe 	bl	80025e0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	1ad2      	subs	r2, r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	605a      	str	r2, [r3, #4]
	
}
 80011f0:	bf00      	nop
 80011f2:	3714      	adds	r7, #20
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	00000000 	.word	0x00000000
 80011fc:	406fe000 	.word	0x406fe000

08001200 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8001200:	b5b0      	push	{r4, r5, r7, lr}
 8001202:	b08c      	sub	sp, #48	; 0x30
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;
	
	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	785b      	ldrb	r3, [r3, #1]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d101      	bne.n	8001214 <PID_Compute+0x14>
	{
		return _FALSE;
 8001210:	2300      	movs	r3, #0
 8001212:	e0fc      	b.n	800140e <PID_Compute+0x20e>
	}
	
	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8001214:	f001 f9e4 	bl	80025e0 <HAL_GetTick>
 8001218:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	623b      	str	r3, [r7, #32]
	
	if (timeChange >= uPID->SampleTime)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	6a3a      	ldr	r2, [r7, #32]
 800122a:	429a      	cmp	r2, r3
 800122c:	f0c0 80ee 	bcc.w	800140c <PID_Compute+0x20c>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001234:	cb18      	ldmia	r3, {r3, r4}
 8001236:	e9c7 3406 	strd	r3, r4, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001242:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001246:	f7fe ff87 	bl	8000158 <__aeabi_dsub>
 800124a:	4603      	mov	r3, r0
 800124c:	460c      	mov	r4, r1
 800124e:	e9c7 3404 	strd	r3, r4, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f103 0458 	add.w	r4, r3, #88	; 0x58
 8001258:	e9d4 3400 	ldrd	r3, r4, [r4]
 800125c:	461a      	mov	r2, r3
 800125e:	4623      	mov	r3, r4
 8001260:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001264:	f7fe ff78 	bl	8000158 <__aeabi_dsub>
 8001268:	4603      	mov	r3, r0
 800126a:	460c      	mov	r4, r1
 800126c:	e9c7 3402 	strd	r3, r4, [r7, #8]
		
		uPID->OutputSum     += (uPID->Ki * error);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800127c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001280:	f7ff f922 	bl	80004c8 <__aeabi_dmul>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4620      	mov	r0, r4
 800128a:	4629      	mov	r1, r5
 800128c:	f7fe ff66 	bl	800015c <__adddf3>
 8001290:	4603      	mov	r3, r0
 8001292:	460c      	mov	r4, r1
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d114      	bne.n	80012cc <PID_Compute+0xcc>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80012ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80012b2:	f7ff f909 	bl	80004c8 <__aeabi_dmul>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4620      	mov	r0, r4
 80012bc:	4629      	mov	r1, r5
 80012be:	f7fe ff4b 	bl	8000158 <__aeabi_dsub>
 80012c2:	4603      	mov	r3, r0
 80012c4:	460c      	mov	r4, r1
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		}
		
		if (uPID->OutputSum > uPID->OutMax)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80012d8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012dc:	461a      	mov	r2, r3
 80012de:	4623      	mov	r3, r4
 80012e0:	f7ff fb82 	bl	80009e8 <__aeabi_dcmpgt>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d008      	beq.n	80012fc <PID_Compute+0xfc>
		{
			uPID->OutputSum = uPID->OutMax;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80012f0:	e9d4 3400 	ldrd	r3, r4, [r4]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
 80012fa:	e016      	b.n	800132a <PID_Compute+0x12a>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001308:	e9d4 3400 	ldrd	r3, r4, [r4]
 800130c:	461a      	mov	r2, r3
 800130e:	4623      	mov	r3, r4
 8001310:	f7ff fb4c 	bl	80009ac <__aeabi_dcmplt>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <PID_Compute+0x12a>
		{
			uPID->OutputSum = uPID->OutMin;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001320:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
		}
		else { }
		
		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d00f      	beq.n	8001352 <PID_Compute+0x152>
		{
			output = uPID->Kp * error;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001338:	e9d4 3400 	ldrd	r3, r4, [r4]
 800133c:	461a      	mov	r2, r3
 800133e:	4623      	mov	r3, r4
 8001340:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001344:	f7ff f8c0 	bl	80004c8 <__aeabi_dmul>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8001350:	e005      	b.n	800135e <PID_Compute+0x15e>
		}
		else
		{
			output = 0;
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	f04f 0400 	mov.w	r4, #0
 800135a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		}
		
		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800136a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800136e:	f7ff f8ab 	bl	80004c8 <__aeabi_dmul>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7fe feed 	bl	8000158 <__aeabi_dsub>
 800137e:	4603      	mov	r3, r0
 8001380:	460c      	mov	r4, r1
 8001382:	461a      	mov	r2, r3
 8001384:	4623      	mov	r3, r4
 8001386:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800138a:	f7fe fee7 	bl	800015c <__adddf3>
 800138e:	4603      	mov	r3, r0
 8001390:	460c      	mov	r4, r1
 8001392:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		//applySecondOrderFilter(&(uPID->scdFil), uPID->Kd * dInput)
		
		if (output > uPID->OutMax)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800139c:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013a0:	461a      	mov	r2, r3
 80013a2:	4623      	mov	r3, r4
 80013a4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013a8:	f7ff fb1e 	bl	80009e8 <__aeabi_dcmpgt>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d007      	beq.n	80013c2 <PID_Compute+0x1c2>
		{
			output = uPID->OutMax;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80013b8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013bc:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80013c0:	e014      	b.n	80013ec <PID_Compute+0x1ec>
		}
		else if (output < uPID->OutMin)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80013c8:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4623      	mov	r3, r4
 80013d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80013d4:	f7ff faea 	bl	80009ac <__aeabi_dcmplt>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d006      	beq.n	80013ec <PID_Compute+0x1ec>
		{
			output = uPID->OutMin;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80013e4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80013e8:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		}
		else { }
		
		*uPID->MyOutput = output;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80013f0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80013f4:	e9c2 3400 	strd	r3, r4, [r2]
		
		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80013fe:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
		uPID->LastTime = now;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001406:	605a      	str	r2, [r3, #4]
		
		return _TRUE;
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <PID_Compute+0x20e>
		
	}
	else
	{
		return _FALSE;
 800140c:	2300      	movs	r3, #0
	}
	
}
 800140e:	4618      	mov	r0, r3
 8001410:	3730      	adds	r7, #48	; 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bdb0      	pop	{r4, r5, r7, pc}

08001416 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode, float dt, float cutoff)
{
 8001416:	b580      	push	{r7, lr}
 8001418:	b086      	sub	sp, #24
 800141a:	af00      	add	r7, sp, #0
 800141c:	60f8      	str	r0, [r7, #12]
 800141e:	607a      	str	r2, [r7, #4]
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	460b      	mov	r3, r1
 8001424:	72fb      	strb	r3, [r7, #11]
	
	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8001426:	7afb      	ldrb	r3, [r7, #11]
 8001428:	2b01      	cmp	r3, #1
 800142a:	bf0c      	ite	eq
 800142c:	2301      	moveq	r3, #1
 800142e:	2300      	movne	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	75fb      	strb	r3, [r7, #23]
	
	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8001434:	7dfb      	ldrb	r3, [r7, #23]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d008      	beq.n	800144c <PID_SetMode+0x36>
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d104      	bne.n	800144c <PID_SetMode+0x36>
	{
		PID_Init(uPID, dt, cutoff);
 8001442:	683a      	ldr	r2, [r7, #0]
 8001444:	6879      	ldr	r1, [r7, #4]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f7ff fe42 	bl	80010d0 <PID_Init>
	}
	
	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	7dfa      	ldrb	r2, [r7, #23]
 8001450:	705a      	strb	r2, [r3, #1]
	
}
 8001452:	bf00      	nop
 8001454:	3718      	adds	r7, #24
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}

0800145a <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800145a:	b590      	push	{r4, r7, lr}
 800145c:	b085      	sub	sp, #20
 800145e:	af00      	add	r7, sp, #0
 8001460:	60f8      	str	r0, [r7, #12]
 8001462:	e9c7 2300 	strd	r2, r3, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8001466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800146a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800146e:	f7ff fab1 	bl	80009d4 <__aeabi_dcmpge>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d170      	bne.n	800155a <PID_SetOutputLimits+0x100>
	{
		return;
	}
	
	uPID->OutMin = Min;
 8001478:	68fa      	ldr	r2, [r7, #12]
 800147a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800147e:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60
	uPID->OutMax = Max;
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001488:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	
	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d063      	beq.n	800155c <PID_SetOutputLimits+0x102>
	{
		
		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80014a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80014a6:	461a      	mov	r2, r3
 80014a8:	4623      	mov	r3, r4
 80014aa:	f7ff fa9d 	bl	80009e8 <__aeabi_dcmpgt>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d009      	beq.n	80014c8 <PID_SetOutputLimits+0x6e>
		{
			*uPID->MyOutput = uPID->OutMax;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f103 0468 	add.w	r4, r3, #104	; 0x68
 80014be:	e9d4 3400 	ldrd	r3, r4, [r4]
 80014c2:	e9c2 3400 	strd	r3, r4, [r2]
 80014c6:	e018      	b.n	80014fa <PID_SetOutputLimits+0xa0>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80014d6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80014da:	461a      	mov	r2, r3
 80014dc:	4623      	mov	r3, r4
 80014de:	f7ff fa65 	bl	80009ac <__aeabi_dcmplt>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d008      	beq.n	80014fa <PID_SetOutputLimits+0xa0>
		{
			*uPID->MyOutput = uPID->OutMin;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80014f2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80014f6:	e9c2 3400 	strd	r3, r4, [r2]
		}
		else { }
		
		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8001506:	e9d4 3400 	ldrd	r3, r4, [r4]
 800150a:	461a      	mov	r2, r3
 800150c:	4623      	mov	r3, r4
 800150e:	f7ff fa6b 	bl	80009e8 <__aeabi_dcmpgt>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d008      	beq.n	800152a <PID_SetOutputLimits+0xd0>
		{
			uPID->OutputSum = uPID->OutMax;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f103 0468 	add.w	r4, r3, #104	; 0x68
 800151e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
 8001528:	e018      	b.n	800155c <PID_SetOutputLimits+0x102>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f103 0460 	add.w	r4, r3, #96	; 0x60
 8001536:	e9d4 3400 	ldrd	r3, r4, [r4]
 800153a:	461a      	mov	r2, r3
 800153c:	4623      	mov	r3, r4
 800153e:	f7ff fa35 	bl	80009ac <__aeabi_dcmplt>
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	d009      	beq.n	800155c <PID_SetOutputLimits+0x102>
		{
			uPID->OutputSum = uPID->OutMin;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	f103 0460 	add.w	r4, r3, #96	; 0x60
 800154e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
 8001558:	e000      	b.n	800155c <PID_SetOutputLimits+0x102>
		return;
 800155a:	bf00      	nop
		}
		else { }
		
	}
	
}
 800155c:	3714      	adds	r7, #20
 800155e:	46bd      	mov	sp, r7
 8001560:	bd90      	pop	{r4, r7, pc}
	...

08001564 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8001564:	b590      	push	{r4, r7, lr}
 8001566:	b087      	sub	sp, #28
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	e9c7 2300 	strd	r2, r3, [r7]
	
	double SampleTimeInSec;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8001570:	f04f 0200 	mov.w	r2, #0
 8001574:	f04f 0300 	mov.w	r3, #0
 8001578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800157c:	f7ff fa16 	bl	80009ac <__aeabi_dcmplt>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	f040 8099 	bne.w	80016ba <PID_SetTunings2+0x156>
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001594:	f7ff fa0a 	bl	80009ac <__aeabi_dcmplt>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 808d 	bne.w	80016ba <PID_SetTunings2+0x156>
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	f04f 0300 	mov.w	r3, #0
 80015a8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015ac:	f7ff f9fe 	bl	80009ac <__aeabi_dcmplt>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 8081 	bne.w	80016ba <PID_SetTunings2+0x156>
	{
		return;
	}
	
	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80015be:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80015c0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	461a      	mov	r2, r3
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	e9d7 3400 	ldrd	r3, r4, [r7]
 80015da:	e9c2 3404 	strd	r3, r4, [r2, #16]
	uPID->DispKi = Ki;
 80015de:	68fa      	ldr	r2, [r7, #12]
 80015e0:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80015e4:	e9c2 3406 	strd	r3, r4, [r2, #24]
	uPID->DispKd = Kd;
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80015ee:	e9c2 3408 	strd	r3, r4, [r2, #32]
	
	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe feec 	bl	80003d4 <__aeabi_ui2d>
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	4b30      	ldr	r3, [pc, #192]	; (80016c4 <PID_SetTunings2+0x160>)
 8001602:	f7ff f88b 	bl	800071c <__aeabi_ddiv>
 8001606:	4603      	mov	r3, r0
 8001608:	460c      	mov	r4, r1
 800160a:	e9c7 3404 	strd	r3, r4, [r7, #16]
	
	uPID->Kp = Kp;
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001614:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8001618:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800161c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001620:	f7fe ff52 	bl	80004c8 <__aeabi_dmul>
 8001624:	4603      	mov	r3, r0
 8001626:	460c      	mov	r4, r1
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800162e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001632:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001636:	f7ff f871 	bl	800071c <__aeabi_ddiv>
 800163a:	4603      	mov	r3, r0
 800163c:	460c      	mov	r4, r1
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	
	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	78db      	ldrb	r3, [r3, #3]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d137      	bne.n	80016bc <PID_SetTunings2+0x158>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f103 0428 	add.w	r4, r3, #40	; 0x28
 8001652:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001656:	461a      	mov	r2, r3
 8001658:	4623      	mov	r3, r4
 800165a:	f04f 0000 	mov.w	r0, #0
 800165e:	f04f 0100 	mov.w	r1, #0
 8001662:	f7fe fd79 	bl	8000158 <__aeabi_dsub>
 8001666:	4603      	mov	r3, r0
 8001668:	460c      	mov	r4, r1
 800166a:	68fa      	ldr	r2, [r7, #12]
 800166c:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001676:	e9d4 3400 	ldrd	r3, r4, [r4]
 800167a:	461a      	mov	r2, r3
 800167c:	4623      	mov	r3, r4
 800167e:	f04f 0000 	mov.w	r0, #0
 8001682:	f04f 0100 	mov.w	r1, #0
 8001686:	f7fe fd67 	bl	8000158 <__aeabi_dsub>
 800168a:	4603      	mov	r3, r0
 800168c:	460c      	mov	r4, r1
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f103 0438 	add.w	r4, r3, #56	; 0x38
 800169a:	e9d4 3400 	ldrd	r3, r4, [r4]
 800169e:	461a      	mov	r2, r3
 80016a0:	4623      	mov	r3, r4
 80016a2:	f04f 0000 	mov.w	r0, #0
 80016a6:	f04f 0100 	mov.w	r1, #0
 80016aa:	f7fe fd55 	bl	8000158 <__aeabi_dsub>
 80016ae:	4603      	mov	r3, r0
 80016b0:	460c      	mov	r4, r1
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
 80016b8:	e000      	b.n	80016bc <PID_SetTunings2+0x158>
		return;
 80016ba:	bf00      	nop
		
	}
	
}
 80016bc:	371c      	adds	r7, #28
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd90      	pop	{r4, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	408f4000 	.word	0x408f4000

080016c8 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	460b      	mov	r3, r1
 80016d2:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	785b      	ldrb	r3, [r3, #1]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d03a      	beq.n	8001752 <PID_SetControllerDirection+0x8a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	78db      	ldrb	r3, [r3, #3]
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d035      	beq.n	8001752 <PID_SetControllerDirection+0x8a>
	{
		
		uPID->Kp = (0 - uPID->Kp);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80016ec:	e9d4 3400 	ldrd	r3, r4, [r4]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4623      	mov	r3, r4
 80016f4:	f04f 0000 	mov.w	r0, #0
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	f7fe fd2c 	bl	8000158 <__aeabi_dsub>
 8001700:	4603      	mov	r3, r0
 8001702:	460c      	mov	r4, r1
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8001710:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001714:	461a      	mov	r2, r3
 8001716:	4623      	mov	r3, r4
 8001718:	f04f 0000 	mov.w	r0, #0
 800171c:	f04f 0100 	mov.w	r1, #0
 8001720:	f7fe fd1a 	bl	8000158 <__aeabi_dsub>
 8001724:	4603      	mov	r3, r0
 8001726:	460c      	mov	r4, r1
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8001734:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001738:	461a      	mov	r2, r3
 800173a:	4623      	mov	r3, r4
 800173c:	f04f 0000 	mov.w	r0, #0
 8001740:	f04f 0100 	mov.w	r1, #0
 8001744:	f7fe fd08 	bl	8000158 <__aeabi_dsub>
 8001748:	4603      	mov	r3, r0
 800174a:	460c      	mov	r4, r1
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		
	}
	
	uPID->ControllerDirection = Direction;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	78fa      	ldrb	r2, [r7, #3]
 8001756:	70da      	strb	r2, [r3, #3]
	
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bd90      	pop	{r4, r7, pc}

08001760 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	6039      	str	r1, [r7, #0]
	
	double ratio;
	
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	dd2e      	ble.n	80017ce <PID_SetSampleTime+0x6e>
	{
		
		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8001770:	6838      	ldr	r0, [r7, #0]
 8001772:	f7fe fe3f 	bl	80003f4 <__aeabi_i2d>
 8001776:	4604      	mov	r4, r0
 8001778:	460d      	mov	r5, r1
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	4618      	mov	r0, r3
 8001780:	f7fe fe28 	bl	80003d4 <__aeabi_ui2d>
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4620      	mov	r0, r4
 800178a:	4629      	mov	r1, r5
 800178c:	f7fe ffc6 	bl	800071c <__aeabi_ddiv>
 8001790:	4603      	mov	r3, r0
 8001792:	460c      	mov	r4, r1
 8001794:	e9c7 3402 	strd	r3, r4, [r7, #8]
		
		uPID->Ki *= ratio;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800179e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017a2:	f7fe fe91 	bl	80004c8 <__aeabi_dmul>
 80017a6:	4603      	mov	r3, r0
 80017a8:	460c      	mov	r4, r1
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
		uPID->Kd /= ratio;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80017b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017ba:	f7fe ffaf 	bl	800071c <__aeabi_ddiv>
 80017be:	4603      	mov	r3, r0
 80017c0:	460c      	mov	r4, r1
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	609a      	str	r2, [r3, #8]
		
	}
	
}
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

080017d8 <HAL_UART_RxCpltCallback>:
void hBridge(int pwmVal, char index);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	command = commandFromMain[0];
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <HAL_UART_RxCpltCallback+0x2c>)
 80017e2:	781a      	ldrb	r2, [r3, #0]
 80017e4:	4b08      	ldr	r3, [pc, #32]	; (8001808 <HAL_UART_RxCpltCallback+0x30>)
 80017e6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart2, commandFromMain, 1);
 80017e8:	2201      	movs	r2, #1
 80017ea:	4906      	ldr	r1, [pc, #24]	; (8001804 <HAL_UART_RxCpltCallback+0x2c>)
 80017ec:	4807      	ldr	r0, [pc, #28]	; (800180c <HAL_UART_RxCpltCallback+0x34>)
 80017ee:	f003 f924 	bl	8004a3a <HAL_UART_Receive_DMA>
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80017f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f6:	4806      	ldr	r0, [pc, #24]	; (8001810 <HAL_UART_RxCpltCallback+0x38>)
 80017f8:	f001 fc1a 	bl	8003030 <HAL_GPIO_TogglePin>
}
 80017fc:	bf00      	nop
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	200000f4 	.word	0x200000f4
 8001808:	20000030 	.word	0x20000030
 800180c:	20000328 	.word	0x20000328
 8001810:	40011000 	.word	0x40011000
 8001814:	00000000 	.word	0x00000000

08001818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800181e:	f000 fe87 	bl	8002530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001822:	f000 f931 	bl	8001a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001826:	f000 fb37 	bl	8001e98 <MX_GPIO_Init>
  MX_DMA_Init();
 800182a:	f000 fb17 	bl	8001e5c <MX_DMA_Init>
  MX_TIM1_Init();
 800182e:	f000 f971 	bl	8001b14 <MX_TIM1_Init>
  MX_TIM4_Init();
 8001832:	f000 fa95 	bl	8001d60 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001836:	f000 fae7 	bl	8001e08 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800183a:	f000 f9c3 	bl	8001bc4 <MX_TIM2_Init>
  MX_TIM3_Init();
 800183e:	f000 fa41 	bl	8001cc4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001842:	2100      	movs	r1, #0
 8001844:	487a      	ldr	r0, [pc, #488]	; (8001a30 <main+0x218>)
 8001846:	f002 f923 	bl	8003a90 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800184a:	2104      	movs	r1, #4
 800184c:	4878      	ldr	r0, [pc, #480]	; (8001a30 <main+0x218>)
 800184e:	f002 f91f 	bl	8003a90 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001852:	4878      	ldr	r0, [pc, #480]	; (8001a34 <main+0x21c>)
 8001854:	f002 f872 	bl	800393c <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_DMA(&huart2, commandFromMain, 1);
 8001858:	2201      	movs	r2, #1
 800185a:	4977      	ldr	r1, [pc, #476]	; (8001a38 <main+0x220>)
 800185c:	4877      	ldr	r0, [pc, #476]	; (8001a3c <main+0x224>)
 800185e:	f003 f8ec 	bl	8004a3a <HAL_UART_Receive_DMA>
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001862:	213c      	movs	r1, #60	; 0x3c
 8001864:	4876      	ldr	r0, [pc, #472]	; (8001a40 <main+0x228>)
 8001866:	f002 fa57 	bl	8003d18 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 800186a:	213c      	movs	r1, #60	; 0x3c
 800186c:	4875      	ldr	r0, [pc, #468]	; (8001a44 <main+0x22c>)
 800186e:	f002 fa53 	bl	8003d18 <HAL_TIM_Encoder_Start>
  hBridge(0, 0);
 8001872:	2100      	movs	r1, #0
 8001874:	2000      	movs	r0, #0
 8001876:	f000 fc01 	bl	800207c <hBridge>
  hBridge(0, 1);
 800187a:	2101      	movs	r1, #1
 800187c:	2000      	movs	r0, #0
 800187e:	f000 fbfd 	bl	800207c <hBridge>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001882:	2201      	movs	r2, #1
 8001884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001888:	486f      	ldr	r0, [pc, #444]	; (8001a48 <main+0x230>)
 800188a:	f001 fbb9 	bl	8003000 <HAL_GPIO_WritePin>
  PID(&speedPID1, &inputSpeed1, &outputPWM1, &setPoint1, 51, 20, 0.03, _PID_P_ON_E, _PID_CD_DIRECT);//70
 800188e:	2300      	movs	r3, #0
 8001890:	9307      	str	r3, [sp, #28]
 8001892:	2301      	movs	r3, #1
 8001894:	9306      	str	r3, [sp, #24]
 8001896:	a45c      	add	r4, pc, #368	; (adr r4, 8001a08 <main+0x1f0>)
 8001898:	e9d4 3400 	ldrd	r3, r4, [r4]
 800189c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	4c69      	ldr	r4, [pc, #420]	; (8001a4c <main+0x234>)
 80018a6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	4c68      	ldr	r4, [pc, #416]	; (8001a50 <main+0x238>)
 80018b0:	e9cd 3400 	strd	r3, r4, [sp]
 80018b4:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <main+0x23c>)
 80018b6:	4a68      	ldr	r2, [pc, #416]	; (8001a58 <main+0x240>)
 80018b8:	4968      	ldr	r1, [pc, #416]	; (8001a5c <main+0x244>)
 80018ba:	4869      	ldr	r0, [pc, #420]	; (8001a60 <main+0x248>)
 80018bc:	f7ff fc58 	bl	8001170 <PID>
  PID(&speedPID2, &inputSpeed2, &outputPWM2, &setPoint2, 51, 20, 0.03, _PID_P_ON_E, _PID_CD_REVERSE);//70
 80018c0:	2301      	movs	r3, #1
 80018c2:	9307      	str	r3, [sp, #28]
 80018c4:	2301      	movs	r3, #1
 80018c6:	9306      	str	r3, [sp, #24]
 80018c8:	a44f      	add	r4, pc, #316	; (adr r4, 8001a08 <main+0x1f0>)
 80018ca:	e9d4 3400 	ldrd	r3, r4, [r4]
 80018ce:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80018d2:	f04f 0300 	mov.w	r3, #0
 80018d6:	4c5d      	ldr	r4, [pc, #372]	; (8001a4c <main+0x234>)
 80018d8:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80018dc:	f04f 0300 	mov.w	r3, #0
 80018e0:	4c5b      	ldr	r4, [pc, #364]	; (8001a50 <main+0x238>)
 80018e2:	e9cd 3400 	strd	r3, r4, [sp]
 80018e6:	4b5f      	ldr	r3, [pc, #380]	; (8001a64 <main+0x24c>)
 80018e8:	4a5f      	ldr	r2, [pc, #380]	; (8001a68 <main+0x250>)
 80018ea:	4960      	ldr	r1, [pc, #384]	; (8001a6c <main+0x254>)
 80018ec:	4860      	ldr	r0, [pc, #384]	; (8001a70 <main+0x258>)
 80018ee:	f7ff fc3f 	bl	8001170 <PID>
  PID_SetMode(&speedPID1, _PID_MODE_AUTOMATIC, 0.01f, 15);
 80018f2:	4b60      	ldr	r3, [pc, #384]	; (8001a74 <main+0x25c>)
 80018f4:	4a60      	ldr	r2, [pc, #384]	; (8001a78 <main+0x260>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	4859      	ldr	r0, [pc, #356]	; (8001a60 <main+0x248>)
 80018fa:	f7ff fd8c 	bl	8001416 <PID_SetMode>
  PID_SetMode(&speedPID2, _PID_MODE_AUTOMATIC, 0.01f, 15);
 80018fe:	4b5d      	ldr	r3, [pc, #372]	; (8001a74 <main+0x25c>)
 8001900:	4a5d      	ldr	r2, [pc, #372]	; (8001a78 <main+0x260>)
 8001902:	2101      	movs	r1, #1
 8001904:	485a      	ldr	r0, [pc, #360]	; (8001a70 <main+0x258>)
 8001906:	f7ff fd86 	bl	8001416 <PID_SetMode>
  PID_SetSampleTime(&speedPID1, 10);
 800190a:	210a      	movs	r1, #10
 800190c:	4854      	ldr	r0, [pc, #336]	; (8001a60 <main+0x248>)
 800190e:	f7ff ff27 	bl	8001760 <PID_SetSampleTime>
  PID_SetSampleTime(&speedPID2, 10);
 8001912:	210a      	movs	r1, #10
 8001914:	4856      	ldr	r0, [pc, #344]	; (8001a70 <main+0x258>)
 8001916:	f7ff ff23 	bl	8001760 <PID_SetSampleTime>
  PID_SetOutputLimits(&speedPID1, -999, 999);
 800191a:	a43d      	add	r4, pc, #244	; (adr r4, 8001a10 <main+0x1f8>)
 800191c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001920:	e9cd 3400 	strd	r3, r4, [sp]
 8001924:	a33c      	add	r3, pc, #240	; (adr r3, 8001a18 <main+0x200>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	484d      	ldr	r0, [pc, #308]	; (8001a60 <main+0x248>)
 800192c:	f7ff fd95 	bl	800145a <PID_SetOutputLimits>
  PID_SetOutputLimits(&speedPID2, -999, 999);
 8001930:	a437      	add	r4, pc, #220	; (adr r4, 8001a10 <main+0x1f8>)
 8001932:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001936:	e9cd 3400 	strd	r3, r4, [sp]
 800193a:	a337      	add	r3, pc, #220	; (adr r3, 8001a18 <main+0x200>)
 800193c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001940:	484b      	ldr	r0, [pc, #300]	; (8001a70 <main+0x258>)
 8001942:	f7ff fd8a 	bl	800145a <PID_SetOutputLimits>
//  setPoint1 = 69;
//  setPoint2 = -69;
    setPoint1 = 0;
 8001946:	4a43      	ldr	r2, [pc, #268]	; (8001a54 <main+0x23c>)
 8001948:	f04f 0300 	mov.w	r3, #0
 800194c:	f04f 0400 	mov.w	r4, #0
 8001950:	e9c2 3400 	strd	r3, r4, [r2]
    setPoint2 = 0;
 8001954:	4a43      	ldr	r2, [pc, #268]	; (8001a64 <main+0x24c>)
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	f04f 0400 	mov.w	r4, #0
 800195e:	e9c2 3400 	strd	r3, r4, [r2]
  while (1)
  {

//	  setPoint1 = commandFromMain[0];
//	  setPoint2 = commandFromMain[0];
	  if(command == 0x69){
 8001962:	4b46      	ldr	r3, [pc, #280]	; (8001a7c <main+0x264>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b69      	cmp	r3, #105	; 0x69
 8001968:	d10c      	bne.n	8001984 <main+0x16c>
		   setPoint1 = 67;
 800196a:	4a3a      	ldr	r2, [pc, #232]	; (8001a54 <main+0x23c>)
 800196c:	a42c      	add	r4, pc, #176	; (adr r4, 8001a20 <main+0x208>)
 800196e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001972:	e9c2 3400 	strd	r3, r4, [r2]
		   setPoint2 = -67;
 8001976:	4a3b      	ldr	r2, [pc, #236]	; (8001a64 <main+0x24c>)
 8001978:	f04f 0300 	mov.w	r3, #0
 800197c:	4c40      	ldr	r4, [pc, #256]	; (8001a80 <main+0x268>)
 800197e:	e9c2 3400 	strd	r3, r4, [r2]
 8001982:	e022      	b.n	80019ca <main+0x1b2>
	  }else if(command == 0x01){
 8001984:	4b3d      	ldr	r3, [pc, #244]	; (8001a7c <main+0x264>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d10e      	bne.n	80019aa <main+0x192>
		  setPoint1 = 0;
 800198c:	4a31      	ldr	r2, [pc, #196]	; (8001a54 <main+0x23c>)
 800198e:	f04f 0300 	mov.w	r3, #0
 8001992:	f04f 0400 	mov.w	r4, #0
 8001996:	e9c2 3400 	strd	r3, r4, [r2]
		  setPoint2 = 0;
 800199a:	4a32      	ldr	r2, [pc, #200]	; (8001a64 <main+0x24c>)
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	f04f 0400 	mov.w	r4, #0
 80019a4:	e9c2 3400 	strd	r3, r4, [r2]
 80019a8:	e00f      	b.n	80019ca <main+0x1b2>
	  }else if(command == 0x77){
 80019aa:	4b34      	ldr	r3, [pc, #208]	; (8001a7c <main+0x264>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b77      	cmp	r3, #119	; 0x77
 80019b0:	d10b      	bne.n	80019ca <main+0x1b2>
		   setPoint1 = 75;
 80019b2:	4a28      	ldr	r2, [pc, #160]	; (8001a54 <main+0x23c>)
 80019b4:	a41c      	add	r4, pc, #112	; (adr r4, 8001a28 <main+0x210>)
 80019b6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80019ba:	e9c2 3400 	strd	r3, r4, [r2]
		   setPoint2 = -75;
 80019be:	4a29      	ldr	r2, [pc, #164]	; (8001a64 <main+0x24c>)
 80019c0:	f04f 0300 	mov.w	r3, #0
 80019c4:	4c2f      	ldr	r4, [pc, #188]	; (8001a84 <main+0x26c>)
 80019c6:	e9c2 3400 	strd	r3, r4, [r2]
	  }
	  PID_Compute(&speedPID1);
 80019ca:	4825      	ldr	r0, [pc, #148]	; (8001a60 <main+0x248>)
 80019cc:	f7ff fc18 	bl	8001200 <PID_Compute>
	  PID_Compute(&speedPID2);
 80019d0:	4827      	ldr	r0, [pc, #156]	; (8001a70 <main+0x258>)
 80019d2:	f7ff fc15 	bl	8001200 <PID_Compute>
	  hBridge(outputPWM1, 0);
 80019d6:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <main+0x240>)
 80019d8:	cb18      	ldmia	r3, {r3, r4}
 80019da:	4618      	mov	r0, r3
 80019dc:	4621      	mov	r1, r4
 80019de:	f7ff f80d 	bl	80009fc <__aeabi_d2iz>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2100      	movs	r1, #0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fb48 	bl	800207c <hBridge>
	  hBridge(outputPWM2, 1);
 80019ec:	4b1e      	ldr	r3, [pc, #120]	; (8001a68 <main+0x250>)
 80019ee:	cb18      	ldmia	r3, {r3, r4}
 80019f0:	4618      	mov	r0, r3
 80019f2:	4621      	mov	r1, r4
 80019f4:	f7ff f802 	bl	80009fc <__aeabi_d2iz>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2101      	movs	r1, #1
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 fb3d 	bl	800207c <hBridge>
	  if(command == 0x69){
 8001a02:	e7ae      	b.n	8001962 <main+0x14a>
 8001a04:	f3af 8000 	nop.w
 8001a08:	eb851eb8 	.word	0xeb851eb8
 8001a0c:	3f9eb851 	.word	0x3f9eb851
 8001a10:	00000000 	.word	0x00000000
 8001a14:	408f3800 	.word	0x408f3800
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	c08f3800 	.word	0xc08f3800
 8001a20:	00000000 	.word	0x00000000
 8001a24:	4050c000 	.word	0x4050c000
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	4052c000 	.word	0x4052c000
 8001a30:	200002e0 	.word	0x200002e0
 8001a34:	200001a0 	.word	0x200001a0
 8001a38:	200000f4 	.word	0x200000f4
 8001a3c:	20000328 	.word	0x20000328
 8001a40:	20000290 	.word	0x20000290
 8001a44:	200000ac 	.word	0x200000ac
 8001a48:	40011000 	.word	0x40011000
 8001a4c:	40340000 	.word	0x40340000
 8001a50:	40498000 	.word	0x40498000
 8001a54:	20000050 	.word	0x20000050
 8001a58:	20000048 	.word	0x20000048
 8001a5c:	200002d8 	.word	0x200002d8
 8001a60:	200001e8 	.word	0x200001e8
 8001a64:	20000060 	.word	0x20000060
 8001a68:	20000058 	.word	0x20000058
 8001a6c:	20000288 	.word	0x20000288
 8001a70:	20000100 	.word	0x20000100
 8001a74:	41700000 	.word	0x41700000
 8001a78:	3c23d70a 	.word	0x3c23d70a
 8001a7c:	20000030 	.word	0x20000030
 8001a80:	c050c000 	.word	0xc050c000
 8001a84:	c052c000 	.word	0xc052c000

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b090      	sub	sp, #64	; 0x40
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	2228      	movs	r2, #40	; 0x28
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f003 fcfe 	bl	8005498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abc:	2302      	movs	r3, #2
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ac6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 fac7 	bl	8003064 <HAL_RCC_OscConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001adc:	f000 fb2e 	bl	800213c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fd32 	bl	8003564 <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b06:	f000 fb19 	bl	800213c <Error_Handler>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3740      	adds	r7, #64	; 0x40
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08c      	sub	sp, #48	; 0x30
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b1a:	f107 030c 	add.w	r3, r7, #12
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	2100      	movs	r1, #0
 8001b22:	4618      	mov	r0, r3
 8001b24:	f003 fcb8 	bl	8005498 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <MX_TIM1_Init+0xa8>)
 8001b32:	4a23      	ldr	r2, [pc, #140]	; (8001bc0 <MX_TIM1_Init+0xac>)
 8001b34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b36:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <MX_TIM1_Init+0xa8>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3c:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <MX_TIM1_Init+0xa8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b42:	4b1e      	ldr	r3, [pc, #120]	; (8001bbc <MX_TIM1_Init+0xa8>)
 8001b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b48:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b4a:	4b1c      	ldr	r3, [pc, #112]	; (8001bbc <MX_TIM1_Init+0xa8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b50:	4b1a      	ldr	r3, [pc, #104]	; (8001bbc <MX_TIM1_Init+0xa8>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b56:	4b19      	ldr	r3, [pc, #100]	; (8001bbc <MX_TIM1_Init+0xa8>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b60:	2302      	movs	r3, #2
 8001b62:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b64:	2301      	movs	r3, #1
 8001b66:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001b6c:	230a      	movs	r3, #10
 8001b6e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b70:	2302      	movs	r3, #2
 8001b72:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b74:	2301      	movs	r3, #1
 8001b76:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001b7c:	230a      	movs	r3, #10
 8001b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b80:	f107 030c 	add.w	r3, r7, #12
 8001b84:	4619      	mov	r1, r3
 8001b86:	480d      	ldr	r0, [pc, #52]	; (8001bbc <MX_TIM1_Init+0xa8>)
 8001b88:	f002 f824 	bl	8003bd4 <HAL_TIM_Encoder_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b92:	f000 fad3 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b9e:	1d3b      	adds	r3, r7, #4
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <MX_TIM1_Init+0xa8>)
 8001ba4:	f002 fe8c 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001bae:	f000 fac5 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001bb2:	bf00      	nop
 8001bb4:	3730      	adds	r7, #48	; 0x30
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000290 	.word	0x20000290
 8001bc0:	40012c00 	.word	0x40012c00

08001bc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	; 0x38
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bd8:	f107 0320 	add.w	r3, r7, #32
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	60da      	str	r2, [r3, #12]
 8001bee:	611a      	str	r2, [r3, #16]
 8001bf0:	615a      	str	r2, [r3, #20]
 8001bf2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001bf6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bfa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 8001bfc:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001bfe:	2207      	movs	r2, #7
 8001c00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c02:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001c08:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001c0a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c10:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c16:	4b2a      	ldr	r3, [pc, #168]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c1c:	4828      	ldr	r0, [pc, #160]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001c1e:	f001 fe3d 	bl	800389c <HAL_TIM_Base_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001c28:	f000 fa88 	bl	800213c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001c32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c36:	4619      	mov	r1, r3
 8001c38:	4821      	ldr	r0, [pc, #132]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001c3a:	f002 fac1 	bl	80041c0 <HAL_TIM_ConfigClockSource>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001c44:	f000 fa7a 	bl	800213c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001c48:	481d      	ldr	r0, [pc, #116]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001c4a:	f001 fec9 	bl	80039e0 <HAL_TIM_PWM_Init>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001c54:	f000 fa72 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c60:	f107 0320 	add.w	r3, r7, #32
 8001c64:	4619      	mov	r1, r3
 8001c66:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001c68:	f002 fe2a 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001c72:	f000 fa63 	bl	800213c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c76:	2360      	movs	r3, #96	; 0x60
 8001c78:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c86:	1d3b      	adds	r3, r7, #4
 8001c88:	2200      	movs	r2, #0
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	480c      	ldr	r0, [pc, #48]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001c8e:	f002 f9d9 	bl	8004044 <HAL_TIM_PWM_ConfigChannel>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c98:	f000 fa50 	bl	800213c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4807      	ldr	r0, [pc, #28]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001ca4:	f002 f9ce 	bl	8004044 <HAL_TIM_PWM_ConfigChannel>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001cae:	f000 fa45 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001cb2:	4803      	ldr	r0, [pc, #12]	; (8001cc0 <MX_TIM2_Init+0xfc>)
 8001cb4:	f000 fb1e 	bl	80022f4 <HAL_TIM_MspPostInit>

}
 8001cb8:	bf00      	nop
 8001cba:	3738      	adds	r7, #56	; 0x38
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	200002e0 	.word	0x200002e0

08001cc4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cca:	f107 0308 	add.w	r3, r7, #8
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd8:	463b      	mov	r3, r7
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ce0:	4b1d      	ldr	r3, [pc, #116]	; (8001d58 <MX_TIM3_Init+0x94>)
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	; (8001d5c <MX_TIM3_Init+0x98>)
 8001ce4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <MX_TIM3_Init+0x94>)
 8001ce8:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001cec:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cee:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <MX_TIM3_Init+0x94>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001cf4:	4b18      	ldr	r3, [pc, #96]	; (8001d58 <MX_TIM3_Init+0x94>)
 8001cf6:	2263      	movs	r2, #99	; 0x63
 8001cf8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b17      	ldr	r3, [pc, #92]	; (8001d58 <MX_TIM3_Init+0x94>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d00:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <MX_TIM3_Init+0x94>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d06:	4814      	ldr	r0, [pc, #80]	; (8001d58 <MX_TIM3_Init+0x94>)
 8001d08:	f001 fdc8 	bl	800389c <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d12:	f000 fa13 	bl	800213c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d1c:	f107 0308 	add.w	r3, r7, #8
 8001d20:	4619      	mov	r1, r3
 8001d22:	480d      	ldr	r0, [pc, #52]	; (8001d58 <MX_TIM3_Init+0x94>)
 8001d24:	f002 fa4c 	bl	80041c0 <HAL_TIM_ConfigClockSource>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d2e:	f000 fa05 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4806      	ldr	r0, [pc, #24]	; (8001d58 <MX_TIM3_Init+0x94>)
 8001d40:	f002 fdbe 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d4a:	f000 f9f7 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d4e:	bf00      	nop
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200001a0 	.word	0x200001a0
 8001d5c:	40000400 	.word	0x40000400

08001d60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	; 0x30
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d66:	f107 030c 	add.w	r3, r7, #12
 8001d6a:	2224      	movs	r2, #36	; 0x24
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fb92 	bl	8005498 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d7c:	4b20      	ldr	r3, [pc, #128]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d7e:	4a21      	ldr	r2, [pc, #132]	; (8001e04 <MX_TIM4_Init+0xa4>)
 8001d80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001d82:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d88:	4b1d      	ldr	r3, [pc, #116]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d96:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d9c:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001d9e:	2280      	movs	r2, #128	; 0x80
 8001da0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001da2:	2303      	movs	r3, #3
 8001da4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001da6:	2302      	movs	r3, #2
 8001da8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001daa:	2301      	movs	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001db2:	230a      	movs	r3, #10
 8001db4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001db6:	2302      	movs	r3, #2
 8001db8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001dc2:	230a      	movs	r3, #10
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001dc6:	f107 030c 	add.w	r3, r7, #12
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001dce:	f001 ff01 	bl	8003bd4 <HAL_TIM_Encoder_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001dd8:	f000 f9b0 	bl	800213c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4619      	mov	r1, r3
 8001de8:	4805      	ldr	r0, [pc, #20]	; (8001e00 <MX_TIM4_Init+0xa0>)
 8001dea:	f002 fd69 	bl	80048c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001df4:	f000 f9a2 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	3730      	adds	r7, #48	; 0x30
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	200000ac 	.word	0x200000ac
 8001e04:	40000800 	.word	0x40000800

08001e08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e0c:	4b11      	ldr	r3, [pc, #68]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e0e:	4a12      	ldr	r2, [pc, #72]	; (8001e58 <MX_USART2_UART_Init+0x50>)
 8001e10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e12:	4b10      	ldr	r3, [pc, #64]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e20:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e26:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e2e:	220c      	movs	r2, #12
 8001e30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_USART2_UART_Init+0x4c>)
 8001e40:	f002 fdae 	bl	80049a0 <HAL_UART_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e4a:	f000 f977 	bl	800213c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000328 	.word	0x20000328
 8001e58:	40004400 	.word	0x40004400

08001e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e62:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <MX_DMA_Init+0x38>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	4a0b      	ldr	r2, [pc, #44]	; (8001e94 <MX_DMA_Init+0x38>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	6153      	str	r3, [r2, #20]
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <MX_DMA_Init+0x38>)
 8001e70:	695b      	ldr	r3, [r3, #20]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	2010      	movs	r0, #16
 8001e80:	f000 fc8f 	bl	80027a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001e84:	2010      	movs	r0, #16
 8001e86:	f000 fca8 	bl	80027da <HAL_NVIC_EnableIRQ>

}
 8001e8a:	bf00      	nop
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40021000 	.word	0x40021000

08001e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9e:	f107 0310 	add.w	r3, r7, #16
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	601a      	str	r2, [r3, #0]
 8001ea6:	605a      	str	r2, [r3, #4]
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eac:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	4a38      	ldr	r2, [pc, #224]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001eb2:	f043 0310 	orr.w	r3, r3, #16
 8001eb6:	6193      	str	r3, [r2, #24]
 8001eb8:	4b36      	ldr	r3, [pc, #216]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	f003 0310 	and.w	r3, r3, #16
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec4:	4b33      	ldr	r3, [pc, #204]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a32      	ldr	r2, [pc, #200]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001eca:	f043 0320 	orr.w	r3, r3, #32
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b30      	ldr	r3, [pc, #192]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0320 	and.w	r3, r3, #32
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001edc:	4b2d      	ldr	r3, [pc, #180]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	4a2c      	ldr	r2, [pc, #176]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	6193      	str	r3, [r2, #24]
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f003 0304 	and.w	r3, r3, #4
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a26      	ldr	r2, [pc, #152]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b24      	ldr	r3, [pc, #144]	; (8001f94 <MX_GPIO_Init+0xfc>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f12:	4821      	ldr	r0, [pc, #132]	; (8001f98 <MX_GPIO_Init+0x100>)
 8001f14:	f001 f874 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, in1_dc1_Pin|in2_dc1_Pin|in1_dc2_Pin|in2_dc2_Pin
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f44f 610f 	mov.w	r1, #2288	; 0x8f0
 8001f1e:	481f      	ldr	r0, [pc, #124]	; (8001f9c <MX_GPIO_Init+0x104>)
 8001f20:	f001 f86e 	bl	8003000 <HAL_GPIO_WritePin>
                          |led_en1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_en2_GPIO_Port, led_en2_Pin, GPIO_PIN_RESET);
 8001f24:	2200      	movs	r2, #0
 8001f26:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f2a:	481d      	ldr	r0, [pc, #116]	; (8001fa0 <MX_GPIO_Init+0x108>)
 8001f2c:	f001 f868 	bl	8003000 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f36:	2301      	movs	r3, #1
 8001f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f42:	f107 0310 	add.w	r3, r7, #16
 8001f46:	4619      	mov	r1, r3
 8001f48:	4813      	ldr	r0, [pc, #76]	; (8001f98 <MX_GPIO_Init+0x100>)
 8001f4a:	f000 feff 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : in1_dc1_Pin in2_dc1_Pin in1_dc2_Pin in2_dc2_Pin
                           led_en1_Pin */
  GPIO_InitStruct.Pin = in1_dc1_Pin|in2_dc1_Pin|in1_dc2_Pin|in2_dc2_Pin
 8001f4e:	f44f 630f 	mov.w	r3, #2288	; 0x8f0
 8001f52:	613b      	str	r3, [r7, #16]
                          |led_en1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f54:	2301      	movs	r3, #1
 8001f56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 0310 	add.w	r3, r7, #16
 8001f64:	4619      	mov	r1, r3
 8001f66:	480d      	ldr	r0, [pc, #52]	; (8001f9c <MX_GPIO_Init+0x104>)
 8001f68:	f000 fef0 	bl	8002d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : led_en2_Pin */
  GPIO_InitStruct.Pin = led_en2_Pin;
 8001f6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f70:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(led_en2_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 0310 	add.w	r3, r7, #16
 8001f82:	4619      	mov	r1, r3
 8001f84:	4806      	ldr	r0, [pc, #24]	; (8001fa0 <MX_GPIO_Init+0x108>)
 8001f86:	f000 fee1 	bl	8002d4c <HAL_GPIO_Init>

}
 8001f8a:	bf00      	nop
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40021000 	.word	0x40021000
 8001f98:	40011000 	.word	0x40011000
 8001f9c:	40010800 	.word	0x40010800
 8001fa0:	40010c00 	.word	0x40010c00

08001fa4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { // PID apply
 8001fa4:	b590      	push	{r4, r7, lr}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a27      	ldr	r2, [pc, #156]	; (8002050 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d147      	bne.n	8002046 <HAL_TIM_PeriodElapsedCallback+0xa2>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb6:	b672      	cpsid	i
	  	__disable_irq();
	  	counter2 = (int)__HAL_TIM_GET_COUNTER(&htim1);
 8001fb8:	4b26      	ldr	r3, [pc, #152]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001fc2:	801a      	strh	r2, [r3, #0]
	  	counter = (int)__HAL_TIM_GET_COUNTER(&htim4);
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	4b24      	ldr	r3, [pc, #144]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001fce:	801a      	strh	r2, [r3, #0]
	  	speed = counter;
 8001fd0:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7fe fe42 	bl	8000c60 <__aeabi_i2f>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001fe0:	601a      	str	r2, [r3, #0]
	  	speed2 = counter2;
 8001fe2:	4b1d      	ldr	r3, [pc, #116]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fe39 	bl	8000c60 <__aeabi_i2f>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001ff2:	601a      	str	r2, [r3, #0]
	  	oldCounter = counter;
 8001ff4:	4b1a      	ldr	r3, [pc, #104]	; (8002060 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	b21b      	sxth	r3, r3
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8001ffe:	601a      	str	r2, [r3, #0]
	  	oldCounter2 = counter2;
 8002000:	4b15      	ldr	r3, [pc, #84]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b21b      	sxth	r3, r3
 8002006:	461a      	mov	r2, r3
 8002008:	4b19      	ldr	r3, [pc, #100]	; (8002070 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800200a:	601a      	str	r2, [r3, #0]
	  	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	2200      	movs	r2, #0
 8002012:	625a      	str	r2, [r3, #36]	; 0x24
	  	__HAL_TIM_SET_COUNTER(&htim4, 0);
 8002014:	4b11      	ldr	r3, [pc, #68]	; (800205c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2200      	movs	r2, #0
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
	  	inputSpeed1 = speed;
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe f9f9 	bl	8000418 <__aeabi_f2d>
 8002026:	4603      	mov	r3, r0
 8002028:	460c      	mov	r4, r1
 800202a:	4a12      	ldr	r2, [pc, #72]	; (8002074 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800202c:	e9c2 3400 	strd	r3, r4, [r2]
	  	inputSpeed2 = speed2;
 8002030:	4b0d      	ldr	r3, [pc, #52]	; (8002068 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe f9ef 	bl	8000418 <__aeabi_f2d>
 800203a:	4603      	mov	r3, r0
 800203c:	460c      	mov	r4, r1
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002040:	e9c2 3400 	strd	r3, r4, [r2]
  __ASM volatile ("cpsie i" : : : "memory");
 8002044:	b662      	cpsie	i
//	  	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		__enable_irq();
  }
}
 8002046:	bf00      	nop
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	bd90      	pop	{r4, r7, pc}
 800204e:	bf00      	nop
 8002050:	40000400 	.word	0x40000400
 8002054:	20000290 	.word	0x20000290
 8002058:	20000038 	.word	0x20000038
 800205c:	200000ac 	.word	0x200000ac
 8002060:	20000032 	.word	0x20000032
 8002064:	2000003c 	.word	0x2000003c
 8002068:	20000040 	.word	0x20000040
 800206c:	2000002c 	.word	0x2000002c
 8002070:	20000034 	.word	0x20000034
 8002074:	200002d8 	.word	0x200002d8
 8002078:	20000288 	.word	0x20000288

0800207c <hBridge>:
void hBridge(int pwmVal, char index){
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	460b      	mov	r3, r1
 8002086:	70fb      	strb	r3, [r7, #3]
	if(index == 0){
 8002088:	78fb      	ldrb	r3, [r7, #3]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d125      	bne.n	80020da <hBridge+0x5e>
		if(pwmVal < -10){
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f113 0f0a 	cmn.w	r3, #10
 8002094:	da0f      	bge.n	80020b6 <hBridge+0x3a>
			HAL_GPIO_WritePin(GPIOA, in1_dc1_Pin, 0);
 8002096:	2200      	movs	r2, #0
 8002098:	2110      	movs	r1, #16
 800209a:	4826      	ldr	r0, [pc, #152]	; (8002134 <hBridge+0xb8>)
 800209c:	f000 ffb0 	bl	8003000 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, in2_dc1_Pin, 1);
 80020a0:	2201      	movs	r2, #1
 80020a2:	2120      	movs	r1, #32
 80020a4:	4823      	ldr	r0, [pc, #140]	; (8002134 <hBridge+0xb8>)
 80020a6:	f000 ffab 	bl	8003000 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -pwmVal);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	425a      	negs	r2, r3
 80020ae:	4b22      	ldr	r3, [pc, #136]	; (8002138 <hBridge+0xbc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_GPIO_WritePin(GPIOA, in1_dc2_Pin, 1);
			HAL_GPIO_WritePin(GPIOA, in2_dc2_Pin, 0);
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwmVal);
		}
	}
}
 80020b4:	e039      	b.n	800212a <hBridge+0xae>
		}else if(pwmVal > 10){
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0a      	cmp	r3, #10
 80020ba:	dd36      	ble.n	800212a <hBridge+0xae>
			HAL_GPIO_WritePin(GPIOA, in1_dc1_Pin, 1);
 80020bc:	2201      	movs	r2, #1
 80020be:	2110      	movs	r1, #16
 80020c0:	481c      	ldr	r0, [pc, #112]	; (8002134 <hBridge+0xb8>)
 80020c2:	f000 ff9d 	bl	8003000 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOA, in2_dc1_Pin, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2120      	movs	r1, #32
 80020ca:	481a      	ldr	r0, [pc, #104]	; (8002134 <hBridge+0xb8>)
 80020cc:	f000 ff98 	bl	8003000 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pwmVal);
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <hBridge+0xbc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	635a      	str	r2, [r3, #52]	; 0x34
}
 80020d8:	e027      	b.n	800212a <hBridge+0xae>
	}else if(index == 1){
 80020da:	78fb      	ldrb	r3, [r7, #3]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d124      	bne.n	800212a <hBridge+0xae>
		if(pwmVal < -10){
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f113 0f0a 	cmn.w	r3, #10
 80020e6:	da0f      	bge.n	8002108 <hBridge+0x8c>
			HAL_GPIO_WritePin(GPIOA, in1_dc2_Pin, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2140      	movs	r1, #64	; 0x40
 80020ec:	4811      	ldr	r0, [pc, #68]	; (8002134 <hBridge+0xb8>)
 80020ee:	f000 ff87 	bl	8003000 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, in2_dc2_Pin, 1);
 80020f2:	2201      	movs	r2, #1
 80020f4:	2180      	movs	r1, #128	; 0x80
 80020f6:	480f      	ldr	r0, [pc, #60]	; (8002134 <hBridge+0xb8>)
 80020f8:	f000 ff82 	bl	8003000 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, -pwmVal);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	425a      	negs	r2, r3
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <hBridge+0xbc>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002106:	e010      	b.n	800212a <hBridge+0xae>
		}else if(pwmVal > 10){
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b0a      	cmp	r3, #10
 800210c:	dd0d      	ble.n	800212a <hBridge+0xae>
			HAL_GPIO_WritePin(GPIOA, in1_dc2_Pin, 1);
 800210e:	2201      	movs	r2, #1
 8002110:	2140      	movs	r1, #64	; 0x40
 8002112:	4808      	ldr	r0, [pc, #32]	; (8002134 <hBridge+0xb8>)
 8002114:	f000 ff74 	bl	8003000 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, in2_dc2_Pin, 0);
 8002118:	2200      	movs	r2, #0
 800211a:	2180      	movs	r1, #128	; 0x80
 800211c:	4805      	ldr	r0, [pc, #20]	; (8002134 <hBridge+0xb8>)
 800211e:	f000 ff6f 	bl	8003000 <HAL_GPIO_WritePin>
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, pwmVal);
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <hBridge+0xbc>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40010800 	.word	0x40010800
 8002138:	200002e0 	.word	0x200002e0

0800213c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002140:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002142:	e7fe      	b.n	8002142 <Error_Handler+0x6>

08002144 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800214a:	4b15      	ldr	r3, [pc, #84]	; (80021a0 <HAL_MspInit+0x5c>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	4a14      	ldr	r2, [pc, #80]	; (80021a0 <HAL_MspInit+0x5c>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6193      	str	r3, [r2, #24]
 8002156:	4b12      	ldr	r3, [pc, #72]	; (80021a0 <HAL_MspInit+0x5c>)
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60bb      	str	r3, [r7, #8]
 8002160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002162:	4b0f      	ldr	r3, [pc, #60]	; (80021a0 <HAL_MspInit+0x5c>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	4a0e      	ldr	r2, [pc, #56]	; (80021a0 <HAL_MspInit+0x5c>)
 8002168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800216c:	61d3      	str	r3, [r2, #28]
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_MspInit+0x5c>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002176:	607b      	str	r3, [r7, #4]
 8002178:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800217a:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <HAL_MspInit+0x60>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_MspInit+0x60>)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002196:	bf00      	nop
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr
 80021a0:	40021000 	.word	0x40021000
 80021a4:	40010000 	.word	0x40010000

080021a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	f107 0318 	add.w	r3, r7, #24
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
 80021b8:	605a      	str	r2, [r3, #4]
 80021ba:	609a      	str	r2, [r3, #8]
 80021bc:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a2b      	ldr	r2, [pc, #172]	; (8002270 <HAL_TIM_Encoder_MspInit+0xc8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d125      	bne.n	8002214 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021c8:	4b2a      	ldr	r3, [pc, #168]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 80021ca:	699b      	ldr	r3, [r3, #24]
 80021cc:	4a29      	ldr	r2, [pc, #164]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 80021ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021d2:	6193      	str	r3, [r2, #24]
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e0:	4b24      	ldr	r3, [pc, #144]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	4a23      	ldr	r2, [pc, #140]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 80021e6:	f043 0304 	orr.w	r3, r3, #4
 80021ea:	6193      	str	r3, [r2, #24]
 80021ec:	4b21      	ldr	r3, [pc, #132]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 0304 	and.w	r3, r3, #4
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f107 0318 	add.w	r3, r7, #24
 800220a:	4619      	mov	r1, r3
 800220c:	481a      	ldr	r0, [pc, #104]	; (8002278 <HAL_TIM_Encoder_MspInit+0xd0>)
 800220e:	f000 fd9d 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002212:	e028      	b.n	8002266 <HAL_TIM_Encoder_MspInit+0xbe>
  else if(htim_encoder->Instance==TIM4)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a18      	ldr	r2, [pc, #96]	; (800227c <HAL_TIM_Encoder_MspInit+0xd4>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d123      	bne.n	8002266 <HAL_TIM_Encoder_MspInit+0xbe>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a14      	ldr	r2, [pc, #80]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002224:	f043 0304 	orr.w	r3, r3, #4
 8002228:	61d3      	str	r3, [r2, #28]
 800222a:	4b12      	ldr	r3, [pc, #72]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f003 0304 	and.w	r3, r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002236:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 800223c:	f043 0308 	orr.w	r3, r3, #8
 8002240:	6193      	str	r3, [r2, #24]
 8002242:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002244:	699b      	ldr	r3, [r3, #24]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800224e:	23c0      	movs	r3, #192	; 0xc0
 8002250:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002252:	2300      	movs	r3, #0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800225a:	f107 0318 	add.w	r3, r7, #24
 800225e:	4619      	mov	r1, r3
 8002260:	4807      	ldr	r0, [pc, #28]	; (8002280 <HAL_TIM_Encoder_MspInit+0xd8>)
 8002262:	f000 fd73 	bl	8002d4c <HAL_GPIO_Init>
}
 8002266:	bf00      	nop
 8002268:	3728      	adds	r7, #40	; 0x28
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40012c00 	.word	0x40012c00
 8002274:	40021000 	.word	0x40021000
 8002278:	40010800 	.word	0x40010800
 800227c:	40000800 	.word	0x40000800
 8002280:	40010c00 	.word	0x40010c00

08002284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002294:	d10c      	bne.n	80022b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002296:	4b15      	ldr	r3, [pc, #84]	; (80022ec <HAL_TIM_Base_MspInit+0x68>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a14      	ldr	r2, [pc, #80]	; (80022ec <HAL_TIM_Base_MspInit+0x68>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	61d3      	str	r3, [r2, #28]
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <HAL_TIM_Base_MspInit+0x68>)
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80022ae:	e018      	b.n	80022e2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0e      	ldr	r2, [pc, #56]	; (80022f0 <HAL_TIM_Base_MspInit+0x6c>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d113      	bne.n	80022e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_TIM_Base_MspInit+0x68>)
 80022bc:	69db      	ldr	r3, [r3, #28]
 80022be:	4a0b      	ldr	r2, [pc, #44]	; (80022ec <HAL_TIM_Base_MspInit+0x68>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	61d3      	str	r3, [r2, #28]
 80022c6:	4b09      	ldr	r3, [pc, #36]	; (80022ec <HAL_TIM_Base_MspInit+0x68>)
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	60bb      	str	r3, [r7, #8]
 80022d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	201d      	movs	r0, #29
 80022d8:	f000 fa63 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80022dc:	201d      	movs	r0, #29
 80022de:	f000 fa7c 	bl	80027da <HAL_NVIC_EnableIRQ>
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40000400 	.word	0x40000400

080022f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fc:	f107 0310 	add.w	r3, r7, #16
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	605a      	str	r2, [r3, #4]
 8002306:	609a      	str	r2, [r3, #8]
 8002308:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002312:	d117      	bne.n	8002344 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <HAL_TIM_MspPostInit+0x58>)
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <HAL_TIM_MspPostInit+0x58>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	6193      	str	r3, [r2, #24]
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <HAL_TIM_MspPostInit+0x58>)
 8002322:	699b      	ldr	r3, [r3, #24]
 8002324:	f003 0304 	and.w	r3, r3, #4
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = pwm1_Pin|pwm2_Pin;
 800232c:	2303      	movs	r3, #3
 800232e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002330:	2302      	movs	r3, #2
 8002332:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002334:	2302      	movs	r3, #2
 8002336:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002338:	f107 0310 	add.w	r3, r7, #16
 800233c:	4619      	mov	r1, r3
 800233e:	4804      	ldr	r0, [pc, #16]	; (8002350 <HAL_TIM_MspPostInit+0x5c>)
 8002340:	f000 fd04 	bl	8002d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002344:	bf00      	nop
 8002346:	3720      	adds	r7, #32
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000
 8002350:	40010800 	.word	0x40010800

08002354 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800235c:	f107 0310 	add.w	r3, r7, #16
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
 8002364:	605a      	str	r2, [r3, #4]
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a32      	ldr	r2, [pc, #200]	; (8002438 <HAL_UART_MspInit+0xe4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d15d      	bne.n	8002430 <HAL_UART_MspInit+0xdc>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002374:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_UART_MspInit+0xe8>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	4a30      	ldr	r2, [pc, #192]	; (800243c <HAL_UART_MspInit+0xe8>)
 800237a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237e:	61d3      	str	r3, [r2, #28]
 8002380:	4b2e      	ldr	r3, [pc, #184]	; (800243c <HAL_UART_MspInit+0xe8>)
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238c:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_UART_MspInit+0xe8>)
 800238e:	699b      	ldr	r3, [r3, #24]
 8002390:	4a2a      	ldr	r2, [pc, #168]	; (800243c <HAL_UART_MspInit+0xe8>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	6193      	str	r3, [r2, #24]
 8002398:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_UART_MspInit+0xe8>)
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	f003 0304 	and.w	r3, r3, #4
 80023a0:	60bb      	str	r3, [r7, #8]
 80023a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80023a4:	2304      	movs	r3, #4
 80023a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80023ac:	2303      	movs	r3, #3
 80023ae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023b0:	f107 0310 	add.w	r3, r7, #16
 80023b4:	4619      	mov	r1, r3
 80023b6:	4822      	ldr	r0, [pc, #136]	; (8002440 <HAL_UART_MspInit+0xec>)
 80023b8:	f000 fcc8 	bl	8002d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80023bc:	2308      	movs	r3, #8
 80023be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023c4:	2301      	movs	r3, #1
 80023c6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 0310 	add.w	r3, r7, #16
 80023cc:	4619      	mov	r1, r3
 80023ce:	481c      	ldr	r0, [pc, #112]	; (8002440 <HAL_UART_MspInit+0xec>)
 80023d0:	f000 fcbc 	bl	8002d4c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_UART_MspInit+0xf0>)
 80023d6:	4a1c      	ldr	r2, [pc, #112]	; (8002448 <HAL_UART_MspInit+0xf4>)
 80023d8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023da:	4b1a      	ldr	r3, [pc, #104]	; (8002444 <HAL_UART_MspInit+0xf0>)
 80023dc:	2200      	movs	r2, #0
 80023de:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023e0:	4b18      	ldr	r3, [pc, #96]	; (8002444 <HAL_UART_MspInit+0xf0>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023e6:	4b17      	ldr	r3, [pc, #92]	; (8002444 <HAL_UART_MspInit+0xf0>)
 80023e8:	2280      	movs	r2, #128	; 0x80
 80023ea:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023ec:	4b15      	ldr	r3, [pc, #84]	; (8002444 <HAL_UART_MspInit+0xf0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_UART_MspInit+0xf0>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_UART_MspInit+0xf0>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023fe:	4b11      	ldr	r3, [pc, #68]	; (8002444 <HAL_UART_MspInit+0xf0>)
 8002400:	2200      	movs	r2, #0
 8002402:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002404:	480f      	ldr	r0, [pc, #60]	; (8002444 <HAL_UART_MspInit+0xf0>)
 8002406:	f000 fa03 	bl	8002810 <HAL_DMA_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002410:	f7ff fe94 	bl	800213c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	4a0b      	ldr	r2, [pc, #44]	; (8002444 <HAL_UART_MspInit+0xf0>)
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_UART_MspInit+0xf0>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002420:	2200      	movs	r2, #0
 8002422:	2100      	movs	r1, #0
 8002424:	2026      	movs	r0, #38	; 0x26
 8002426:	f000 f9bc 	bl	80027a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800242a:	2026      	movs	r0, #38	; 0x26
 800242c:	f000 f9d5 	bl	80027da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002430:	bf00      	nop
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40004400 	.word	0x40004400
 800243c:	40021000 	.word	0x40021000
 8002440:	40010800 	.word	0x40010800
 8002444:	20000068 	.word	0x20000068
 8002448:	4002006c 	.word	0x4002006c

0800244c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002450:	e7fe      	b.n	8002450 <NMI_Handler+0x4>

08002452 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002452:	b480      	push	{r7}
 8002454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002456:	e7fe      	b.n	8002456 <HardFault_Handler+0x4>

08002458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800245c:	e7fe      	b.n	800245c <MemManage_Handler+0x4>

0800245e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <BusFault_Handler+0x4>

08002464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <UsageFault_Handler+0x4>

0800246a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr

08002476 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	bc80      	pop	{r7}
 8002480:	4770      	bx	lr

08002482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002482:	b480      	push	{r7}
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002492:	f000 f893 	bl	80025bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80024a0:	4802      	ldr	r0, [pc, #8]	; (80024ac <DMA1_Channel6_IRQHandler+0x10>)
 80024a2:	f000 fb1f 	bl	8002ae4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000068 	.word	0x20000068

080024b0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024b4:	4802      	ldr	r0, [pc, #8]	; (80024c0 <TIM3_IRQHandler+0x10>)
 80024b6:	f001 fcbc 	bl	8003e32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200001a0 	.word	0x200001a0

080024c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024c8:	4802      	ldr	r0, [pc, #8]	; (80024d4 <USART2_IRQHandler+0x10>)
 80024ca:	f002 fae7 	bl	8004a9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	20000328 	.word	0x20000328

080024d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024dc:	bf00      	nop
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024e4:	480c      	ldr	r0, [pc, #48]	; (8002518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024e6:	490d      	ldr	r1, [pc, #52]	; (800251c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024fc:	4c0a      	ldr	r4, [pc, #40]	; (8002528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800250a:	f7ff ffe5 	bl	80024d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800250e:	f002 ff9f 	bl	8005450 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002512:	f7ff f981 	bl	8001818 <main>
  bx lr
 8002516:	4770      	bx	lr
  ldr r0, =_sdata
 8002518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800251c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002520:	080054f4 	.word	0x080054f4
  ldr r2, =_sbss
 8002524:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002528:	20000370 	.word	0x20000370

0800252c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800252c:	e7fe      	b.n	800252c <ADC1_2_IRQHandler>
	...

08002530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002534:	4b08      	ldr	r3, [pc, #32]	; (8002558 <HAL_Init+0x28>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a07      	ldr	r2, [pc, #28]	; (8002558 <HAL_Init+0x28>)
 800253a:	f043 0310 	orr.w	r3, r3, #16
 800253e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002540:	2003      	movs	r0, #3
 8002542:	f000 f923 	bl	800278c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f808 	bl	800255c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800254c:	f7ff fdfa 	bl	8002144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40022000 	.word	0x40022000

0800255c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002564:	4b12      	ldr	r3, [pc, #72]	; (80025b0 <HAL_InitTick+0x54>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b12      	ldr	r3, [pc, #72]	; (80025b4 <HAL_InitTick+0x58>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	fbb3 f3f1 	udiv	r3, r3, r1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f000 f93b 	bl	80027f6 <HAL_SYSTICK_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e00e      	b.n	80025a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b0f      	cmp	r3, #15
 800258e:	d80a      	bhi.n	80025a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002590:	2200      	movs	r2, #0
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	f04f 30ff 	mov.w	r0, #4294967295
 8002598:	f000 f903 	bl	80027a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800259c:	4a06      	ldr	r2, [pc, #24]	; (80025b8 <HAL_InitTick+0x5c>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
 80025a4:	e000      	b.n	80025a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000008 	.word	0x20000008
 80025b8:	20000004 	.word	0x20000004

080025bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025c0:	4b05      	ldr	r3, [pc, #20]	; (80025d8 <HAL_IncTick+0x1c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_IncTick+0x20>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4413      	add	r3, r2
 80025cc:	4a03      	ldr	r2, [pc, #12]	; (80025dc <HAL_IncTick+0x20>)
 80025ce:	6013      	str	r3, [r2, #0]
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20000008 	.word	0x20000008
 80025dc:	2000036c 	.word	0x2000036c

080025e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  return uwTick;
 80025e4:	4b02      	ldr	r3, [pc, #8]	; (80025f0 <HAL_GetTick+0x10>)
 80025e6:	681b      	ldr	r3, [r3, #0]
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr
 80025f0:	2000036c 	.word	0x2000036c

080025f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b085      	sub	sp, #20
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002610:	4013      	ands	r3, r2
 8002612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800261c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002626:	4a04      	ldr	r2, [pc, #16]	; (8002638 <__NVIC_SetPriorityGrouping+0x44>)
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	60d3      	str	r3, [r2, #12]
}
 800262c:	bf00      	nop
 800262e:	3714      	adds	r7, #20
 8002630:	46bd      	mov	sp, r7
 8002632:	bc80      	pop	{r7}
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002640:	4b04      	ldr	r3, [pc, #16]	; (8002654 <__NVIC_GetPriorityGrouping+0x18>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	0a1b      	lsrs	r3, r3, #8
 8002646:	f003 0307 	and.w	r3, r3, #7
}
 800264a:	4618      	mov	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	bc80      	pop	{r7}
 8002650:	4770      	bx	lr
 8002652:	bf00      	nop
 8002654:	e000ed00 	.word	0xe000ed00

08002658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	4603      	mov	r3, r0
 8002660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db0b      	blt.n	8002682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	f003 021f 	and.w	r2, r3, #31
 8002670:	4906      	ldr	r1, [pc, #24]	; (800268c <__NVIC_EnableIRQ+0x34>)
 8002672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002676:	095b      	lsrs	r3, r3, #5
 8002678:	2001      	movs	r0, #1
 800267a:	fa00 f202 	lsl.w	r2, r0, r2
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	e000e100 	.word	0xe000e100

08002690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	6039      	str	r1, [r7, #0]
 800269a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800269c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	db0a      	blt.n	80026ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	490c      	ldr	r1, [pc, #48]	; (80026dc <__NVIC_SetPriority+0x4c>)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	440b      	add	r3, r1
 80026b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026b8:	e00a      	b.n	80026d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <__NVIC_SetPriority+0x50>)
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	3b04      	subs	r3, #4
 80026c8:	0112      	lsls	r2, r2, #4
 80026ca:	b2d2      	uxtb	r2, r2
 80026cc:	440b      	add	r3, r1
 80026ce:	761a      	strb	r2, [r3, #24]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	e000e100 	.word	0xe000e100
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b089      	sub	sp, #36	; 0x24
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f003 0307 	and.w	r3, r3, #7
 80026f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	f1c3 0307 	rsb	r3, r3, #7
 80026fe:	2b04      	cmp	r3, #4
 8002700:	bf28      	it	cs
 8002702:	2304      	movcs	r3, #4
 8002704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	3304      	adds	r3, #4
 800270a:	2b06      	cmp	r3, #6
 800270c:	d902      	bls.n	8002714 <NVIC_EncodePriority+0x30>
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3b03      	subs	r3, #3
 8002712:	e000      	b.n	8002716 <NVIC_EncodePriority+0x32>
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	69bb      	ldr	r3, [r7, #24]
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	43da      	mvns	r2, r3
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	401a      	ands	r2, r3
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800272c:	f04f 31ff 	mov.w	r1, #4294967295
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa01 f303 	lsl.w	r3, r1, r3
 8002736:	43d9      	mvns	r1, r3
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	4313      	orrs	r3, r2
         );
}
 800273e:	4618      	mov	r0, r3
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002758:	d301      	bcc.n	800275e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800275a:	2301      	movs	r3, #1
 800275c:	e00f      	b.n	800277e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800275e:	4a0a      	ldr	r2, [pc, #40]	; (8002788 <SysTick_Config+0x40>)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	3b01      	subs	r3, #1
 8002764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002766:	210f      	movs	r1, #15
 8002768:	f04f 30ff 	mov.w	r0, #4294967295
 800276c:	f7ff ff90 	bl	8002690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <SysTick_Config+0x40>)
 8002772:	2200      	movs	r2, #0
 8002774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002776:	4b04      	ldr	r3, [pc, #16]	; (8002788 <SysTick_Config+0x40>)
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	e000e010 	.word	0xe000e010

0800278c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ff2d 	bl	80025f4 <__NVIC_SetPriorityGrouping>
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	4603      	mov	r3, r0
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b0:	2300      	movs	r3, #0
 80027b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b4:	f7ff ff42 	bl	800263c <__NVIC_GetPriorityGrouping>
 80027b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	68b9      	ldr	r1, [r7, #8]
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f7ff ff90 	bl	80026e4 <NVIC_EncodePriority>
 80027c4:	4602      	mov	r2, r0
 80027c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ca:	4611      	mov	r1, r2
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff ff5f 	bl	8002690 <__NVIC_SetPriority>
}
 80027d2:	bf00      	nop
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	4603      	mov	r3, r0
 80027e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff ff35 	bl	8002658 <__NVIC_EnableIRQ>
}
 80027ee:	bf00      	nop
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	b082      	sub	sp, #8
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f7ff ffa2 	bl	8002748 <SysTick_Config>
 8002804:	4603      	mov	r3, r0
}
 8002806:	4618      	mov	r0, r3
 8002808:	3708      	adds	r7, #8
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002818:	2300      	movs	r3, #0
 800281a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e043      	b.n	80028ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	461a      	mov	r2, r3
 800282c:	4b22      	ldr	r3, [pc, #136]	; (80028b8 <HAL_DMA_Init+0xa8>)
 800282e:	4413      	add	r3, r2
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <HAL_DMA_Init+0xac>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	009a      	lsls	r2, r3, #2
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <HAL_DMA_Init+0xb0>)
 8002842:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800285a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800285e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002868:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002874:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002880:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002888:	68fa      	ldr	r2, [r7, #12]
 800288a:	4313      	orrs	r3, r2
 800288c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	bffdfff8 	.word	0xbffdfff8
 80028bc:	cccccccd 	.word	0xcccccccd
 80028c0:	40020000 	.word	0x40020000

080028c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b086      	sub	sp, #24
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
 80028d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d101      	bne.n	80028e4 <HAL_DMA_Start_IT+0x20>
 80028e0:	2302      	movs	r3, #2
 80028e2:	e04a      	b.n	800297a <HAL_DMA_Start_IT+0xb6>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d13a      	bne.n	800296c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 0201 	bic.w	r2, r2, #1
 8002912:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68b9      	ldr	r1, [r7, #8]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f000 f9e8 	bl	8002cf0 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 020e 	orr.w	r2, r2, #14
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	e00f      	b.n	800295a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0204 	bic.w	r2, r2, #4
 8002948:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f042 020a 	orr.w	r2, r2, #10
 8002958:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	e005      	b.n	8002978 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002974:	2302      	movs	r3, #2
 8002976:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002978:	7dfb      	ldrb	r3, [r7, #23]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002982:	b480      	push	{r7}
 8002984:	b085      	sub	sp, #20
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002994:	2b02      	cmp	r3, #2
 8002996:	d008      	beq.n	80029aa <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2204      	movs	r2, #4
 800299c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e020      	b.n	80029ec <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 020e 	bic.w	r2, r2, #14
 80029b8:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0201 	bic.w	r2, r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029d2:	2101      	movs	r1, #1
 80029d4:	fa01 f202 	lsl.w	r2, r1, r2
 80029d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a00:	2300      	movs	r3, #0
 8002a02:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d005      	beq.n	8002a1a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2204      	movs	r2, #4
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	e051      	b.n	8002abe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f022 020e 	bic.w	r2, r2, #14
 8002a28:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f022 0201 	bic.w	r2, r2, #1
 8002a38:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a22      	ldr	r2, [pc, #136]	; (8002ac8 <HAL_DMA_Abort_IT+0xd0>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d029      	beq.n	8002a98 <HAL_DMA_Abort_IT+0xa0>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a20      	ldr	r2, [pc, #128]	; (8002acc <HAL_DMA_Abort_IT+0xd4>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d022      	beq.n	8002a94 <HAL_DMA_Abort_IT+0x9c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <HAL_DMA_Abort_IT+0xd8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d01a      	beq.n	8002a8e <HAL_DMA_Abort_IT+0x96>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_DMA_Abort_IT+0xdc>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d012      	beq.n	8002a88 <HAL_DMA_Abort_IT+0x90>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1c      	ldr	r2, [pc, #112]	; (8002ad8 <HAL_DMA_Abort_IT+0xe0>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00a      	beq.n	8002a82 <HAL_DMA_Abort_IT+0x8a>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1a      	ldr	r2, [pc, #104]	; (8002adc <HAL_DMA_Abort_IT+0xe4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d102      	bne.n	8002a7c <HAL_DMA_Abort_IT+0x84>
 8002a76:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a7a:	e00e      	b.n	8002a9a <HAL_DMA_Abort_IT+0xa2>
 8002a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a80:	e00b      	b.n	8002a9a <HAL_DMA_Abort_IT+0xa2>
 8002a82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a86:	e008      	b.n	8002a9a <HAL_DMA_Abort_IT+0xa2>
 8002a88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a8c:	e005      	b.n	8002a9a <HAL_DMA_Abort_IT+0xa2>
 8002a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a92:	e002      	b.n	8002a9a <HAL_DMA_Abort_IT+0xa2>
 8002a94:	2310      	movs	r3, #16
 8002a96:	e000      	b.n	8002a9a <HAL_DMA_Abort_IT+0xa2>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	4a11      	ldr	r2, [pc, #68]	; (8002ae0 <HAL_DMA_Abort_IT+0xe8>)
 8002a9c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d003      	beq.n	8002abe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	4798      	blx	r3
    } 
  }
  return status;
 8002abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3710      	adds	r7, #16
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40020008 	.word	0x40020008
 8002acc:	4002001c 	.word	0x4002001c
 8002ad0:	40020030 	.word	0x40020030
 8002ad4:	40020044 	.word	0x40020044
 8002ad8:	40020058 	.word	0x40020058
 8002adc:	4002006c 	.word	0x4002006c
 8002ae0:	40020000 	.word	0x40020000

08002ae4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b00:	2204      	movs	r2, #4
 8002b02:	409a      	lsls	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d04f      	beq.n	8002bac <HAL_DMA_IRQHandler+0xc8>
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d04a      	beq.n	8002bac <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0320 	and.w	r3, r3, #32
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d107      	bne.n	8002b34 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f022 0204 	bic.w	r2, r2, #4
 8002b32:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a66      	ldr	r2, [pc, #408]	; (8002cd4 <HAL_DMA_IRQHandler+0x1f0>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d029      	beq.n	8002b92 <HAL_DMA_IRQHandler+0xae>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a65      	ldr	r2, [pc, #404]	; (8002cd8 <HAL_DMA_IRQHandler+0x1f4>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d022      	beq.n	8002b8e <HAL_DMA_IRQHandler+0xaa>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a63      	ldr	r2, [pc, #396]	; (8002cdc <HAL_DMA_IRQHandler+0x1f8>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01a      	beq.n	8002b88 <HAL_DMA_IRQHandler+0xa4>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a62      	ldr	r2, [pc, #392]	; (8002ce0 <HAL_DMA_IRQHandler+0x1fc>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d012      	beq.n	8002b82 <HAL_DMA_IRQHandler+0x9e>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a60      	ldr	r2, [pc, #384]	; (8002ce4 <HAL_DMA_IRQHandler+0x200>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d00a      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x98>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5f      	ldr	r2, [pc, #380]	; (8002ce8 <HAL_DMA_IRQHandler+0x204>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d102      	bne.n	8002b76 <HAL_DMA_IRQHandler+0x92>
 8002b70:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b74:	e00e      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b76:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002b7a:	e00b      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b7c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b80:	e008      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002b86:	e005      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8c:	e002      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b8e:	2340      	movs	r3, #64	; 0x40
 8002b90:	e000      	b.n	8002b94 <HAL_DMA_IRQHandler+0xb0>
 8002b92:	2304      	movs	r3, #4
 8002b94:	4a55      	ldr	r2, [pc, #340]	; (8002cec <HAL_DMA_IRQHandler+0x208>)
 8002b96:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	f000 8094 	beq.w	8002cca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002baa:	e08e      	b.n	8002cca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	409a      	lsls	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d056      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x186>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d051      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10b      	bne.n	8002bec <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f022 020a 	bic.w	r2, r2, #10
 8002be2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a38      	ldr	r2, [pc, #224]	; (8002cd4 <HAL_DMA_IRQHandler+0x1f0>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d029      	beq.n	8002c4a <HAL_DMA_IRQHandler+0x166>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a37      	ldr	r2, [pc, #220]	; (8002cd8 <HAL_DMA_IRQHandler+0x1f4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x162>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <HAL_DMA_IRQHandler+0x1f8>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01a      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x15c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <HAL_DMA_IRQHandler+0x1fc>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d012      	beq.n	8002c3a <HAL_DMA_IRQHandler+0x156>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a32      	ldr	r2, [pc, #200]	; (8002ce4 <HAL_DMA_IRQHandler+0x200>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00a      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x150>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a31      	ldr	r2, [pc, #196]	; (8002ce8 <HAL_DMA_IRQHandler+0x204>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d102      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x14a>
 8002c28:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002c2c:	e00e      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c32:	e00b      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c34:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002c38:	e008      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c3e:	e005      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c44:	e002      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c46:	2320      	movs	r3, #32
 8002c48:	e000      	b.n	8002c4c <HAL_DMA_IRQHandler+0x168>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	4a27      	ldr	r2, [pc, #156]	; (8002cec <HAL_DMA_IRQHandler+0x208>)
 8002c4e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d034      	beq.n	8002cca <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002c68:	e02f      	b.n	8002cca <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	2208      	movs	r2, #8
 8002c70:	409a      	lsls	r2, r3
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4013      	ands	r3, r2
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d028      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x1e8>
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d023      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 020e 	bic.w	r2, r2, #14
 8002c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d004      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	4798      	blx	r3
    }
  }
  return;
 8002cca:	bf00      	nop
 8002ccc:	bf00      	nop
}
 8002cce:	3710      	adds	r7, #16
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40020008 	.word	0x40020008
 8002cd8:	4002001c 	.word	0x4002001c
 8002cdc:	40020030 	.word	0x40020030
 8002ce0:	40020044 	.word	0x40020044
 8002ce4:	40020058 	.word	0x40020058
 8002ce8:	4002006c 	.word	0x4002006c
 8002cec:	40020000 	.word	0x40020000

08002cf0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b085      	sub	sp, #20
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d06:	2101      	movs	r1, #1
 8002d08:	fa01 f202 	lsl.w	r2, r1, r2
 8002d0c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	683a      	ldr	r2, [r7, #0]
 8002d14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	d108      	bne.n	8002d30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68ba      	ldr	r2, [r7, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002d2e:	e007      	b.n	8002d40 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68ba      	ldr	r2, [r7, #8]
 8002d36:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	60da      	str	r2, [r3, #12]
}
 8002d40:	bf00      	nop
 8002d42:	3714      	adds	r7, #20
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
	...

08002d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b08b      	sub	sp, #44	; 0x2c
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002d56:	2300      	movs	r3, #0
 8002d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d5e:	e127      	b.n	8002fb0 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002d60:	2201      	movs	r2, #1
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	fa02 f303 	lsl.w	r3, r2, r3
 8002d68:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	69fa      	ldr	r2, [r7, #28]
 8002d70:	4013      	ands	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	f040 8116 	bne.w	8002faa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b12      	cmp	r3, #18
 8002d84:	d034      	beq.n	8002df0 <HAL_GPIO_Init+0xa4>
 8002d86:	2b12      	cmp	r3, #18
 8002d88:	d80d      	bhi.n	8002da6 <HAL_GPIO_Init+0x5a>
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d02b      	beq.n	8002de6 <HAL_GPIO_Init+0x9a>
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d804      	bhi.n	8002d9c <HAL_GPIO_Init+0x50>
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d031      	beq.n	8002dfa <HAL_GPIO_Init+0xae>
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d01c      	beq.n	8002dd4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d9a:	e048      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	d043      	beq.n	8002e28 <HAL_GPIO_Init+0xdc>
 8002da0:	2b11      	cmp	r3, #17
 8002da2:	d01b      	beq.n	8002ddc <HAL_GPIO_Init+0x90>
          break;
 8002da4:	e043      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002da6:	4a89      	ldr	r2, [pc, #548]	; (8002fcc <HAL_GPIO_Init+0x280>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d026      	beq.n	8002dfa <HAL_GPIO_Init+0xae>
 8002dac:	4a87      	ldr	r2, [pc, #540]	; (8002fcc <HAL_GPIO_Init+0x280>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d806      	bhi.n	8002dc0 <HAL_GPIO_Init+0x74>
 8002db2:	4a87      	ldr	r2, [pc, #540]	; (8002fd0 <HAL_GPIO_Init+0x284>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d020      	beq.n	8002dfa <HAL_GPIO_Init+0xae>
 8002db8:	4a86      	ldr	r2, [pc, #536]	; (8002fd4 <HAL_GPIO_Init+0x288>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01d      	beq.n	8002dfa <HAL_GPIO_Init+0xae>
          break;
 8002dbe:	e036      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002dc0:	4a85      	ldr	r2, [pc, #532]	; (8002fd8 <HAL_GPIO_Init+0x28c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d019      	beq.n	8002dfa <HAL_GPIO_Init+0xae>
 8002dc6:	4a85      	ldr	r2, [pc, #532]	; (8002fdc <HAL_GPIO_Init+0x290>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d016      	beq.n	8002dfa <HAL_GPIO_Init+0xae>
 8002dcc:	4a84      	ldr	r2, [pc, #528]	; (8002fe0 <HAL_GPIO_Init+0x294>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d013      	beq.n	8002dfa <HAL_GPIO_Init+0xae>
          break;
 8002dd2:	e02c      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	623b      	str	r3, [r7, #32]
          break;
 8002dda:	e028      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	3304      	adds	r3, #4
 8002de2:	623b      	str	r3, [r7, #32]
          break;
 8002de4:	e023      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	3308      	adds	r3, #8
 8002dec:	623b      	str	r3, [r7, #32]
          break;
 8002dee:	e01e      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	330c      	adds	r3, #12
 8002df6:	623b      	str	r3, [r7, #32]
          break;
 8002df8:	e019      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d102      	bne.n	8002e08 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002e02:	2304      	movs	r3, #4
 8002e04:	623b      	str	r3, [r7, #32]
          break;
 8002e06:	e012      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d105      	bne.n	8002e1c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e10:	2308      	movs	r3, #8
 8002e12:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	611a      	str	r2, [r3, #16]
          break;
 8002e1a:	e008      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002e1c:	2308      	movs	r3, #8
 8002e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	615a      	str	r2, [r3, #20]
          break;
 8002e26:	e002      	b.n	8002e2e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	623b      	str	r3, [r7, #32]
          break;
 8002e2c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	2bff      	cmp	r3, #255	; 0xff
 8002e32:	d801      	bhi.n	8002e38 <HAL_GPIO_Init+0xec>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	e001      	b.n	8002e3c <HAL_GPIO_Init+0xf0>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3304      	adds	r3, #4
 8002e3c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	2bff      	cmp	r3, #255	; 0xff
 8002e42:	d802      	bhi.n	8002e4a <HAL_GPIO_Init+0xfe>
 8002e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	e002      	b.n	8002e50 <HAL_GPIO_Init+0x104>
 8002e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4c:	3b08      	subs	r3, #8
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	210f      	movs	r1, #15
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5e:	43db      	mvns	r3, r3
 8002e60:	401a      	ands	r2, r3
 8002e62:	6a39      	ldr	r1, [r7, #32]
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8096 	beq.w	8002faa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e7e:	4b59      	ldr	r3, [pc, #356]	; (8002fe4 <HAL_GPIO_Init+0x298>)
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	4a58      	ldr	r2, [pc, #352]	; (8002fe4 <HAL_GPIO_Init+0x298>)
 8002e84:	f043 0301 	orr.w	r3, r3, #1
 8002e88:	6193      	str	r3, [r2, #24]
 8002e8a:	4b56      	ldr	r3, [pc, #344]	; (8002fe4 <HAL_GPIO_Init+0x298>)
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e96:	4a54      	ldr	r2, [pc, #336]	; (8002fe8 <HAL_GPIO_Init+0x29c>)
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	220f      	movs	r2, #15
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a4b      	ldr	r2, [pc, #300]	; (8002fec <HAL_GPIO_Init+0x2a0>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_GPIO_Init+0x19e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a4a      	ldr	r2, [pc, #296]	; (8002ff0 <HAL_GPIO_Init+0x2a4>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_GPIO_Init+0x19a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a49      	ldr	r2, [pc, #292]	; (8002ff4 <HAL_GPIO_Init+0x2a8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_Init+0x196>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a48      	ldr	r2, [pc, #288]	; (8002ff8 <HAL_GPIO_Init+0x2ac>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_GPIO_Init+0x192>
 8002eda:	2303      	movs	r3, #3
 8002edc:	e006      	b.n	8002eec <HAL_GPIO_Init+0x1a0>
 8002ede:	2304      	movs	r3, #4
 8002ee0:	e004      	b.n	8002eec <HAL_GPIO_Init+0x1a0>
 8002ee2:	2302      	movs	r3, #2
 8002ee4:	e002      	b.n	8002eec <HAL_GPIO_Init+0x1a0>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <HAL_GPIO_Init+0x1a0>
 8002eea:	2300      	movs	r3, #0
 8002eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eee:	f002 0203 	and.w	r2, r2, #3
 8002ef2:	0092      	lsls	r2, r2, #2
 8002ef4:	4093      	lsls	r3, r2
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002efc:	493a      	ldr	r1, [pc, #232]	; (8002fe8 <HAL_GPIO_Init+0x29c>)
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	089b      	lsrs	r3, r3, #2
 8002f02:	3302      	adds	r3, #2
 8002f04:	68fa      	ldr	r2, [r7, #12]
 8002f06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d006      	beq.n	8002f24 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f16:	4b39      	ldr	r3, [pc, #228]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	4938      	ldr	r1, [pc, #224]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	600b      	str	r3, [r1, #0]
 8002f22:	e006      	b.n	8002f32 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f24:	4b35      	ldr	r3, [pc, #212]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	4933      	ldr	r1, [pc, #204]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f2e:	4013      	ands	r3, r2
 8002f30:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d006      	beq.n	8002f4c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f3e:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f40:	685a      	ldr	r2, [r3, #4]
 8002f42:	492e      	ldr	r1, [pc, #184]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	604b      	str	r3, [r1, #4]
 8002f4a:	e006      	b.n	8002f5a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f4c:	4b2b      	ldr	r3, [pc, #172]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f4e:	685a      	ldr	r2, [r3, #4]
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	43db      	mvns	r3, r3
 8002f54:	4929      	ldr	r1, [pc, #164]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f56:	4013      	ands	r3, r2
 8002f58:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d006      	beq.n	8002f74 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002f66:	4b25      	ldr	r3, [pc, #148]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	4924      	ldr	r1, [pc, #144]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	608b      	str	r3, [r1, #8]
 8002f72:	e006      	b.n	8002f82 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	43db      	mvns	r3, r3
 8002f7c:	491f      	ldr	r1, [pc, #124]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002f8e:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f90:	68da      	ldr	r2, [r3, #12]
 8002f92:	491a      	ldr	r1, [pc, #104]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	60cb      	str	r3, [r1, #12]
 8002f9a:	e006      	b.n	8002faa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002f9c:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002f9e:	68da      	ldr	r2, [r3, #12]
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	4915      	ldr	r1, [pc, #84]	; (8002ffc <HAL_GPIO_Init+0x2b0>)
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fac:	3301      	adds	r3, #1
 8002fae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f47f aed0 	bne.w	8002d60 <HAL_GPIO_Init+0x14>
  }
}
 8002fc0:	bf00      	nop
 8002fc2:	372c      	adds	r7, #44	; 0x2c
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bc80      	pop	{r7}
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	10210000 	.word	0x10210000
 8002fd0:	10110000 	.word	0x10110000
 8002fd4:	10120000 	.word	0x10120000
 8002fd8:	10310000 	.word	0x10310000
 8002fdc:	10320000 	.word	0x10320000
 8002fe0:	10220000 	.word	0x10220000
 8002fe4:	40021000 	.word	0x40021000
 8002fe8:	40010000 	.word	0x40010000
 8002fec:	40010800 	.word	0x40010800
 8002ff0:	40010c00 	.word	0x40010c00
 8002ff4:	40011000 	.word	0x40011000
 8002ff8:	40011400 	.word	0x40011400
 8002ffc:	40010400 	.word	0x40010400

08003000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]
 800300c:	4613      	mov	r3, r2
 800300e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003010:	787b      	ldrb	r3, [r7, #1]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003016:	887a      	ldrh	r2, [r7, #2]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800301c:	e003      	b.n	8003026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	041a      	lsls	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	611a      	str	r2, [r3, #16]
}
 8003026:	bf00      	nop
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	bc80      	pop	{r7}
 800302e:	4770      	bx	lr

08003030 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	460b      	mov	r3, r1
 800303a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	4013      	ands	r3, r2
 8003048:	041a      	lsls	r2, r3, #16
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	43d9      	mvns	r1, r3
 800304e:	887b      	ldrh	r3, [r7, #2]
 8003050:	400b      	ands	r3, r1
 8003052:	431a      	orrs	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	611a      	str	r2, [r3, #16]
}
 8003058:	bf00      	nop
 800305a:	3714      	adds	r7, #20
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
	...

08003064 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b086      	sub	sp, #24
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e26c      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 8087 	beq.w	8003192 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003084:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f003 030c 	and.w	r3, r3, #12
 800308c:	2b04      	cmp	r3, #4
 800308e:	d00c      	beq.n	80030aa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003090:	4b8f      	ldr	r3, [pc, #572]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 030c 	and.w	r3, r3, #12
 8003098:	2b08      	cmp	r3, #8
 800309a:	d112      	bne.n	80030c2 <HAL_RCC_OscConfig+0x5e>
 800309c:	4b8c      	ldr	r3, [pc, #560]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a8:	d10b      	bne.n	80030c2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030aa:	4b89      	ldr	r3, [pc, #548]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d06c      	beq.n	8003190 <HAL_RCC_OscConfig+0x12c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d168      	bne.n	8003190 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e246      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ca:	d106      	bne.n	80030da <HAL_RCC_OscConfig+0x76>
 80030cc:	4b80      	ldr	r3, [pc, #512]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a7f      	ldr	r2, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	e02e      	b.n	8003138 <HAL_RCC_OscConfig+0xd4>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0x98>
 80030e2:	4b7b      	ldr	r3, [pc, #492]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a7a      	ldr	r2, [pc, #488]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b78      	ldr	r3, [pc, #480]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a77      	ldr	r2, [pc, #476]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e01d      	b.n	8003138 <HAL_RCC_OscConfig+0xd4>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0xbc>
 8003106:	4b72      	ldr	r3, [pc, #456]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a71      	ldr	r2, [pc, #452]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800310c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4b6f      	ldr	r3, [pc, #444]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a6e      	ldr	r2, [pc, #440]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0xd4>
 8003120:	4b6b      	ldr	r3, [pc, #428]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a6a      	ldr	r2, [pc, #424]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	4b68      	ldr	r3, [pc, #416]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a67      	ldr	r2, [pc, #412]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003136:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d013      	beq.n	8003168 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7ff fa4e 	bl	80025e0 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003148:	f7ff fa4a 	bl	80025e0 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b64      	cmp	r3, #100	; 0x64
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e1fa      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800315a:	4b5d      	ldr	r3, [pc, #372]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d0f0      	beq.n	8003148 <HAL_RCC_OscConfig+0xe4>
 8003166:	e014      	b.n	8003192 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7ff fa3a 	bl	80025e0 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003170:	f7ff fa36 	bl	80025e0 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e1e6      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003182:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d1f0      	bne.n	8003170 <HAL_RCC_OscConfig+0x10c>
 800318e:	e000      	b.n	8003192 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d063      	beq.n	8003266 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800319e:	4b4c      	ldr	r3, [pc, #304]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00b      	beq.n	80031c2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80031aa:	4b49      	ldr	r3, [pc, #292]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 030c 	and.w	r3, r3, #12
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d11c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x18c>
 80031b6:	4b46      	ldr	r3, [pc, #280]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031c2:	4b43      	ldr	r3, [pc, #268]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d005      	beq.n	80031da <HAL_RCC_OscConfig+0x176>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691b      	ldr	r3, [r3, #16]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d001      	beq.n	80031da <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e1ba      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031da:	4b3d      	ldr	r3, [pc, #244]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4939      	ldr	r1, [pc, #228]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 80031ea:	4313      	orrs	r3, r2
 80031ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ee:	e03a      	b.n	8003266 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 80031fa:	2201      	movs	r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031fe:	f7ff f9ef 	bl	80025e0 <HAL_GetTick>
 8003202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003204:	e008      	b.n	8003218 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003206:	f7ff f9eb 	bl	80025e0 <HAL_GetTick>
 800320a:	4602      	mov	r2, r0
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	2b02      	cmp	r3, #2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e19b      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003218:	4b2d      	ldr	r3, [pc, #180]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f0      	beq.n	8003206 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003224:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4927      	ldr	r1, [pc, #156]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 8003234:	4313      	orrs	r3, r2
 8003236:	600b      	str	r3, [r1, #0]
 8003238:	e015      	b.n	8003266 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_RCC_OscConfig+0x270>)
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003240:	f7ff f9ce 	bl	80025e0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003248:	f7ff f9ca 	bl	80025e0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e17a      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0308 	and.w	r3, r3, #8
 800326e:	2b00      	cmp	r3, #0
 8003270:	d03a      	beq.n	80032e8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d019      	beq.n	80032ae <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800327a:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003280:	f7ff f9ae 	bl	80025e0 <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003288:	f7ff f9aa 	bl	80025e0 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e15a      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800329a:	4b0d      	ldr	r3, [pc, #52]	; (80032d0 <HAL_RCC_OscConfig+0x26c>)
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80032a6:	2001      	movs	r0, #1
 80032a8:	f000 fada 	bl	8003860 <RCC_Delay>
 80032ac:	e01c      	b.n	80032e8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ae:	4b0a      	ldr	r3, [pc, #40]	; (80032d8 <HAL_RCC_OscConfig+0x274>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032b4:	f7ff f994 	bl	80025e0 <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032ba:	e00f      	b.n	80032dc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032bc:	f7ff f990 	bl	80025e0 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d908      	bls.n	80032dc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e140      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000
 80032d4:	42420000 	.word	0x42420000
 80032d8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	4b9e      	ldr	r3, [pc, #632]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1e9      	bne.n	80032bc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80a6 	beq.w	8003442 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032f6:	2300      	movs	r3, #0
 80032f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032fa:	4b97      	ldr	r3, [pc, #604]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10d      	bne.n	8003322 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003306:	4b94      	ldr	r3, [pc, #592]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003308:	69db      	ldr	r3, [r3, #28]
 800330a:	4a93      	ldr	r2, [pc, #588]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800330c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003310:	61d3      	str	r3, [r2, #28]
 8003312:	4b91      	ldr	r3, [pc, #580]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800331e:	2301      	movs	r3, #1
 8003320:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003322:	4b8e      	ldr	r3, [pc, #568]	; (800355c <HAL_RCC_OscConfig+0x4f8>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332a:	2b00      	cmp	r3, #0
 800332c:	d118      	bne.n	8003360 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800332e:	4b8b      	ldr	r3, [pc, #556]	; (800355c <HAL_RCC_OscConfig+0x4f8>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a8a      	ldr	r2, [pc, #552]	; (800355c <HAL_RCC_OscConfig+0x4f8>)
 8003334:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003338:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800333a:	f7ff f951 	bl	80025e0 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003342:	f7ff f94d 	bl	80025e0 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b64      	cmp	r3, #100	; 0x64
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e0fd      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003354:	4b81      	ldr	r3, [pc, #516]	; (800355c <HAL_RCC_OscConfig+0x4f8>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x312>
 8003368:	4b7b      	ldr	r3, [pc, #492]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800336a:	6a1b      	ldr	r3, [r3, #32]
 800336c:	4a7a      	ldr	r2, [pc, #488]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800336e:	f043 0301 	orr.w	r3, r3, #1
 8003372:	6213      	str	r3, [r2, #32]
 8003374:	e02d      	b.n	80033d2 <HAL_RCC_OscConfig+0x36e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	68db      	ldr	r3, [r3, #12]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10c      	bne.n	8003398 <HAL_RCC_OscConfig+0x334>
 800337e:	4b76      	ldr	r3, [pc, #472]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4a75      	ldr	r2, [pc, #468]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003384:	f023 0301 	bic.w	r3, r3, #1
 8003388:	6213      	str	r3, [r2, #32]
 800338a:	4b73      	ldr	r3, [pc, #460]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800338c:	6a1b      	ldr	r3, [r3, #32]
 800338e:	4a72      	ldr	r2, [pc, #456]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003390:	f023 0304 	bic.w	r3, r3, #4
 8003394:	6213      	str	r3, [r2, #32]
 8003396:	e01c      	b.n	80033d2 <HAL_RCC_OscConfig+0x36e>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b05      	cmp	r3, #5
 800339e:	d10c      	bne.n	80033ba <HAL_RCC_OscConfig+0x356>
 80033a0:	4b6d      	ldr	r3, [pc, #436]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033a2:	6a1b      	ldr	r3, [r3, #32]
 80033a4:	4a6c      	ldr	r2, [pc, #432]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033a6:	f043 0304 	orr.w	r3, r3, #4
 80033aa:	6213      	str	r3, [r2, #32]
 80033ac:	4b6a      	ldr	r3, [pc, #424]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	4a69      	ldr	r2, [pc, #420]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033b2:	f043 0301 	orr.w	r3, r3, #1
 80033b6:	6213      	str	r3, [r2, #32]
 80033b8:	e00b      	b.n	80033d2 <HAL_RCC_OscConfig+0x36e>
 80033ba:	4b67      	ldr	r3, [pc, #412]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	4a66      	ldr	r2, [pc, #408]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033c0:	f023 0301 	bic.w	r3, r3, #1
 80033c4:	6213      	str	r3, [r2, #32]
 80033c6:	4b64      	ldr	r3, [pc, #400]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	4a63      	ldr	r2, [pc, #396]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033cc:	f023 0304 	bic.w	r3, r3, #4
 80033d0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d015      	beq.n	8003406 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7ff f901 	bl	80025e0 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e0:	e00a      	b.n	80033f8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033e2:	f7ff f8fd 	bl	80025e0 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e0ab      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f8:	4b57      	ldr	r3, [pc, #348]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80033fa:	6a1b      	ldr	r3, [r3, #32]
 80033fc:	f003 0302 	and.w	r3, r3, #2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d0ee      	beq.n	80033e2 <HAL_RCC_OscConfig+0x37e>
 8003404:	e014      	b.n	8003430 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003406:	f7ff f8eb 	bl	80025e0 <HAL_GetTick>
 800340a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340c:	e00a      	b.n	8003424 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800340e:	f7ff f8e7 	bl	80025e0 <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	f241 3288 	movw	r2, #5000	; 0x1388
 800341c:	4293      	cmp	r3, r2
 800341e:	d901      	bls.n	8003424 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003420:	2303      	movs	r3, #3
 8003422:	e095      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003424:	4b4c      	ldr	r3, [pc, #304]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1ee      	bne.n	800340e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003430:	7dfb      	ldrb	r3, [r7, #23]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d105      	bne.n	8003442 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003436:	4b48      	ldr	r3, [pc, #288]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	4a47      	ldr	r2, [pc, #284]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800343c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003440:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f000 8081 	beq.w	800354e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800344c:	4b42      	ldr	r3, [pc, #264]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b08      	cmp	r3, #8
 8003456:	d061      	beq.n	800351c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	69db      	ldr	r3, [r3, #28]
 800345c:	2b02      	cmp	r3, #2
 800345e:	d146      	bne.n	80034ee <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003460:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <HAL_RCC_OscConfig+0x4fc>)
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003466:	f7ff f8bb 	bl	80025e0 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346e:	f7ff f8b7 	bl	80025e0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e067      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003480:	4b35      	ldr	r3, [pc, #212]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d1f0      	bne.n	800346e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003494:	d108      	bne.n	80034a8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003496:	4b30      	ldr	r3, [pc, #192]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	492d      	ldr	r1, [pc, #180]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a8:	4b2b      	ldr	r3, [pc, #172]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a19      	ldr	r1, [r3, #32]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b8:	430b      	orrs	r3, r1
 80034ba:	4927      	ldr	r1, [pc, #156]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80034bc:	4313      	orrs	r3, r2
 80034be:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034c0:	4b27      	ldr	r3, [pc, #156]	; (8003560 <HAL_RCC_OscConfig+0x4fc>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c6:	f7ff f88b 	bl	80025e0 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ce:	f7ff f887 	bl	80025e0 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e037      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0f0      	beq.n	80034ce <HAL_RCC_OscConfig+0x46a>
 80034ec:	e02f      	b.n	800354e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ee:	4b1c      	ldr	r3, [pc, #112]	; (8003560 <HAL_RCC_OscConfig+0x4fc>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7ff f874 	bl	80025e0 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034fc:	f7ff f870 	bl	80025e0 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e020      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x498>
 800351a:	e018      	b.n	800354e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	2b01      	cmp	r3, #1
 8003522:	d101      	bne.n	8003528 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e013      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_OscConfig+0x4f4>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	429a      	cmp	r2, r3
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003546:	429a      	cmp	r2, r3
 8003548:	d001      	beq.n	800354e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
 800354c:	e000      	b.n	8003550 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800354e:	2300      	movs	r3, #0
}
 8003550:	4618      	mov	r0, r3
 8003552:	3718      	adds	r7, #24
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	40007000 	.word	0x40007000
 8003560:	42420060 	.word	0x42420060

08003564 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e0d0      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003578:	4b6a      	ldr	r3, [pc, #424]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d910      	bls.n	80035a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b67      	ldr	r3, [pc, #412]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f023 0207 	bic.w	r2, r3, #7
 800358e:	4965      	ldr	r1, [pc, #404]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003596:	4b63      	ldr	r3, [pc, #396]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0307 	and.w	r3, r3, #7
 800359e:	683a      	ldr	r2, [r7, #0]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d001      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e0b8      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d020      	beq.n	80035f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d005      	beq.n	80035cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035c0:	4b59      	ldr	r3, [pc, #356]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	4a58      	ldr	r2, [pc, #352]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d005      	beq.n	80035e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035d8:	4b53      	ldr	r3, [pc, #332]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	4a52      	ldr	r2, [pc, #328]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035de:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035e4:	4b50      	ldr	r3, [pc, #320]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	494d      	ldr	r1, [pc, #308]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d040      	beq.n	8003684 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	2b01      	cmp	r3, #1
 8003608:	d107      	bne.n	800361a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800360a:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d115      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e07f      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2b02      	cmp	r3, #2
 8003620:	d107      	bne.n	8003632 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d109      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e073      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003632:	4b3d      	ldr	r3, [pc, #244]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e06b      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003642:	4b39      	ldr	r3, [pc, #228]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f023 0203 	bic.w	r2, r3, #3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	4936      	ldr	r1, [pc, #216]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003654:	f7fe ffc4 	bl	80025e0 <HAL_GetTick>
 8003658:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365a:	e00a      	b.n	8003672 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800365c:	f7fe ffc0 	bl	80025e0 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e053      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003672:	4b2d      	ldr	r3, [pc, #180]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 020c 	and.w	r2, r3, #12
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	429a      	cmp	r2, r3
 8003682:	d1eb      	bne.n	800365c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003684:	4b27      	ldr	r3, [pc, #156]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0307 	and.w	r3, r3, #7
 800368c:	683a      	ldr	r2, [r7, #0]
 800368e:	429a      	cmp	r2, r3
 8003690:	d210      	bcs.n	80036b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f023 0207 	bic.w	r2, r3, #7
 800369a:	4922      	ldr	r1, [pc, #136]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	4313      	orrs	r3, r2
 80036a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036a2:	4b20      	ldr	r3, [pc, #128]	; (8003724 <HAL_RCC_ClockConfig+0x1c0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0307 	and.w	r3, r3, #7
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e032      	b.n	800371a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d008      	beq.n	80036d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036c0:	4b19      	ldr	r3, [pc, #100]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	4916      	ldr	r1, [pc, #88]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036de:	4b12      	ldr	r3, [pc, #72]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	490e      	ldr	r1, [pc, #56]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036f2:	f000 f821 	bl	8003738 <HAL_RCC_GetSysClockFreq>
 80036f6:	4601      	mov	r1, r0
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_ClockConfig+0x1c4>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	091b      	lsrs	r3, r3, #4
 80036fe:	f003 030f 	and.w	r3, r3, #15
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <HAL_RCC_ClockConfig+0x1c8>)
 8003704:	5cd3      	ldrb	r3, [r2, r3]
 8003706:	fa21 f303 	lsr.w	r3, r1, r3
 800370a:	4a09      	ldr	r2, [pc, #36]	; (8003730 <HAL_RCC_ClockConfig+0x1cc>)
 800370c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <HAL_RCC_ClockConfig+0x1d0>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe ff22 	bl	800255c <HAL_InitTick>

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40022000 	.word	0x40022000
 8003728:	40021000 	.word	0x40021000
 800372c:	080054d4 	.word	0x080054d4
 8003730:	20000000 	.word	0x20000000
 8003734:	20000004 	.word	0x20000004

08003738 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003738:	b490      	push	{r4, r7}
 800373a:	b08a      	sub	sp, #40	; 0x28
 800373c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800373e:	4b2a      	ldr	r3, [pc, #168]	; (80037e8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003740:	1d3c      	adds	r4, r7, #4
 8003742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003744:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003748:	4b28      	ldr	r3, [pc, #160]	; (80037ec <HAL_RCC_GetSysClockFreq+0xb4>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800374e:	2300      	movs	r3, #0
 8003750:	61fb      	str	r3, [r7, #28]
 8003752:	2300      	movs	r3, #0
 8003754:	61bb      	str	r3, [r7, #24]
 8003756:	2300      	movs	r3, #0
 8003758:	627b      	str	r3, [r7, #36]	; 0x24
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003762:	4b23      	ldr	r3, [pc, #140]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 030c 	and.w	r3, r3, #12
 800376e:	2b04      	cmp	r3, #4
 8003770:	d002      	beq.n	8003778 <HAL_RCC_GetSysClockFreq+0x40>
 8003772:	2b08      	cmp	r3, #8
 8003774:	d003      	beq.n	800377e <HAL_RCC_GetSysClockFreq+0x46>
 8003776:	e02d      	b.n	80037d4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003778:	4b1e      	ldr	r3, [pc, #120]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800377a:	623b      	str	r3, [r7, #32]
      break;
 800377c:	e02d      	b.n	80037da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800377e:	69fb      	ldr	r3, [r7, #28]
 8003780:	0c9b      	lsrs	r3, r3, #18
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800378a:	4413      	add	r3, r2
 800378c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003790:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800379c:	4b14      	ldr	r3, [pc, #80]	; (80037f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	0c5b      	lsrs	r3, r3, #17
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80037aa:	4413      	add	r3, r2
 80037ac:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037b0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	4a0f      	ldr	r2, [pc, #60]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037b6:	fb02 f203 	mul.w	r2, r2, r3
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c0:	627b      	str	r3, [r7, #36]	; 0x24
 80037c2:	e004      	b.n	80037ce <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	4a0c      	ldr	r2, [pc, #48]	; (80037f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 80037c8:	fb02 f303 	mul.w	r3, r2, r3
 80037cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d0:	623b      	str	r3, [r7, #32]
      break;
 80037d2:	e002      	b.n	80037da <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037d4:	4b07      	ldr	r3, [pc, #28]	; (80037f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037d6:	623b      	str	r3, [r7, #32]
      break;
 80037d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037da:	6a3b      	ldr	r3, [r7, #32]
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3728      	adds	r7, #40	; 0x28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bc90      	pop	{r4, r7}
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	080054c0 	.word	0x080054c0
 80037ec:	080054d0 	.word	0x080054d0
 80037f0:	40021000 	.word	0x40021000
 80037f4:	007a1200 	.word	0x007a1200
 80037f8:	003d0900 	.word	0x003d0900

080037fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037fc:	b480      	push	{r7}
 80037fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003800:	4b02      	ldr	r3, [pc, #8]	; (800380c <HAL_RCC_GetHCLKFreq+0x10>)
 8003802:	681b      	ldr	r3, [r3, #0]
}
 8003804:	4618      	mov	r0, r3
 8003806:	46bd      	mov	sp, r7
 8003808:	bc80      	pop	{r7}
 800380a:	4770      	bx	lr
 800380c:	20000000 	.word	0x20000000

08003810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003814:	f7ff fff2 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003818:	4601      	mov	r1, r0
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	0a1b      	lsrs	r3, r3, #8
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	4a03      	ldr	r2, [pc, #12]	; (8003834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003826:	5cd3      	ldrb	r3, [r2, r3]
 8003828:	fa21 f303 	lsr.w	r3, r1, r3
}
 800382c:	4618      	mov	r0, r3
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000
 8003834:	080054e4 	.word	0x080054e4

08003838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800383c:	f7ff ffde 	bl	80037fc <HAL_RCC_GetHCLKFreq>
 8003840:	4601      	mov	r1, r0
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	0adb      	lsrs	r3, r3, #11
 8003848:	f003 0307 	and.w	r3, r3, #7
 800384c:	4a03      	ldr	r2, [pc, #12]	; (800385c <HAL_RCC_GetPCLK2Freq+0x24>)
 800384e:	5cd3      	ldrb	r3, [r2, r3]
 8003850:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003854:	4618      	mov	r0, r3
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021000 	.word	0x40021000
 800385c:	080054e4 	.word	0x080054e4

08003860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003868:	4b0a      	ldr	r3, [pc, #40]	; (8003894 <RCC_Delay+0x34>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <RCC_Delay+0x38>)
 800386e:	fba2 2303 	umull	r2, r3, r2, r3
 8003872:	0a5b      	lsrs	r3, r3, #9
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800387c:	bf00      	nop
  }
  while (Delay --);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1e5a      	subs	r2, r3, #1
 8003882:	60fa      	str	r2, [r7, #12]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1f9      	bne.n	800387c <RCC_Delay+0x1c>
}
 8003888:	bf00      	nop
 800388a:	3714      	adds	r7, #20
 800388c:	46bd      	mov	sp, r7
 800388e:	bc80      	pop	{r7}
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	20000000 	.word	0x20000000
 8003898:	10624dd3 	.word	0x10624dd3

0800389c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e041      	b.n	8003932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7fe fcde 	bl	8002284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3304      	adds	r3, #4
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	f000 fd4c 	bl	8004378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b01      	cmp	r3, #1
 800394e:	d001      	beq.n	8003954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e03a      	b.n	80039ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68da      	ldr	r2, [r3, #12]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a18      	ldr	r2, [pc, #96]	; (80039d4 <HAL_TIM_Base_Start_IT+0x98>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00e      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x58>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800397e:	d009      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x58>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x58>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a13      	ldr	r2, [pc, #76]	; (80039dc <HAL_TIM_Base_Start_IT+0xa0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d111      	bne.n	80039b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d010      	beq.n	80039c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b6:	e007      	b.n	80039c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bc80      	pop	{r7}
 80039d2:	4770      	bx	lr
 80039d4:	40012c00 	.word	0x40012c00
 80039d8:	40000400 	.word	0x40000400
 80039dc:	40000800 	.word	0x40000800

080039e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e041      	b.n	8003a76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f839 	bl	8003a7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f000 fcaa 	bl	8004378 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}

08003a7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a7e:	b480      	push	{r7}
 8003a80:	b083      	sub	sp, #12
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d109      	bne.n	8003ab4 <HAL_TIM_PWM_Start+0x24>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b01      	cmp	r3, #1
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	e022      	b.n	8003afa <HAL_TIM_PWM_Start+0x6a>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d109      	bne.n	8003ace <HAL_TIM_PWM_Start+0x3e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	bf14      	ite	ne
 8003ac6:	2301      	movne	r3, #1
 8003ac8:	2300      	moveq	r3, #0
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	e015      	b.n	8003afa <HAL_TIM_PWM_Start+0x6a>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d109      	bne.n	8003ae8 <HAL_TIM_PWM_Start+0x58>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	bf14      	ite	ne
 8003ae0:	2301      	movne	r3, #1
 8003ae2:	2300      	moveq	r3, #0
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	e008      	b.n	8003afa <HAL_TIM_PWM_Start+0x6a>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	bf14      	ite	ne
 8003af4:	2301      	movne	r3, #1
 8003af6:	2300      	moveq	r3, #0
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e05e      	b.n	8003bc0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_TIM_PWM_Start+0x82>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b10:	e013      	b.n	8003b3a <HAL_TIM_PWM_Start+0xaa>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d104      	bne.n	8003b22 <HAL_TIM_PWM_Start+0x92>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2202      	movs	r2, #2
 8003b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b20:	e00b      	b.n	8003b3a <HAL_TIM_PWM_Start+0xaa>
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d104      	bne.n	8003b32 <HAL_TIM_PWM_Start+0xa2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b30:	e003      	b.n	8003b3a <HAL_TIM_PWM_Start+0xaa>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2202      	movs	r2, #2
 8003b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	6839      	ldr	r1, [r7, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 fe98 	bl	8004878 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a1e      	ldr	r2, [pc, #120]	; (8003bc8 <HAL_TIM_PWM_Start+0x138>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d107      	bne.n	8003b62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <HAL_TIM_PWM_Start+0x138>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00e      	beq.n	8003b8a <HAL_TIM_PWM_Start+0xfa>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b74:	d009      	beq.n	8003b8a <HAL_TIM_PWM_Start+0xfa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a14      	ldr	r2, [pc, #80]	; (8003bcc <HAL_TIM_PWM_Start+0x13c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d004      	beq.n	8003b8a <HAL_TIM_PWM_Start+0xfa>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a12      	ldr	r2, [pc, #72]	; (8003bd0 <HAL_TIM_PWM_Start+0x140>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d111      	bne.n	8003bae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b06      	cmp	r3, #6
 8003b9a:	d010      	beq.n	8003bbe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bac:	e007      	b.n	8003bbe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f042 0201 	orr.w	r2, r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3710      	adds	r7, #16
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800

08003bd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b086      	sub	sp, #24
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e093      	b.n	8003d10 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fe fad3 	bl	80021a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2202      	movs	r2, #2
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6812      	ldr	r2, [r2, #0]
 8003c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c18:	f023 0307 	bic.w	r3, r3, #7
 8003c1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	3304      	adds	r3, #4
 8003c26:	4619      	mov	r1, r3
 8003c28:	4610      	mov	r0, r2
 8003c2a:	f000 fba5 	bl	8004378 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689a      	ldr	r2, [r3, #8]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	021b      	lsls	r3, r3, #8
 8003c66:	4313      	orrs	r3, r2
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003c74:	f023 030c 	bic.w	r3, r3, #12
 8003c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	68da      	ldr	r2, [r3, #12]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	021b      	lsls	r3, r3, #8
 8003c90:	4313      	orrs	r3, r2
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	691b      	ldr	r3, [r3, #16]
 8003c9c:	011a      	lsls	r2, r3, #4
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	6a1b      	ldr	r3, [r3, #32]
 8003ca2:	031b      	lsls	r3, r3, #12
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	685a      	ldr	r2, [r3, #4]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	011b      	lsls	r3, r3, #4
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3718      	adds	r7, #24
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003d38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003d40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d110      	bne.n	8003d6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d48:	7bfb      	ldrb	r3, [r7, #15]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d102      	bne.n	8003d54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d4e:	7b7b      	ldrb	r3, [r7, #13]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d001      	beq.n	8003d58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e068      	b.n	8003e2a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2202      	movs	r2, #2
 8003d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d68:	e031      	b.n	8003dce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	2b04      	cmp	r3, #4
 8003d6e:	d110      	bne.n	8003d92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d70:	7bbb      	ldrb	r3, [r7, #14]
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	d102      	bne.n	8003d7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003d76:	7b3b      	ldrb	r3, [r7, #12]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d001      	beq.n	8003d80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e054      	b.n	8003e2a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2202      	movs	r2, #2
 8003d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d90:	e01d      	b.n	8003dce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d92:	7bfb      	ldrb	r3, [r7, #15]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d108      	bne.n	8003daa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d98:	7bbb      	ldrb	r3, [r7, #14]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d105      	bne.n	8003daa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003d9e:	7b7b      	ldrb	r3, [r7, #13]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d102      	bne.n	8003daa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003da4:	7b3b      	ldrb	r3, [r7, #12]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d001      	beq.n	8003dae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e03d      	b.n	8003e2a <HAL_TIM_Encoder_Start+0x112>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2202      	movs	r2, #2
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2202      	movs	r2, #2
 8003dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2202      	movs	r2, #2
 8003dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <HAL_TIM_Encoder_Start+0xc2>
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d008      	beq.n	8003dea <HAL_TIM_Encoder_Start+0xd2>
 8003dd8:	e00f      	b.n	8003dfa <HAL_TIM_Encoder_Start+0xe2>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2201      	movs	r2, #1
 8003de0:	2100      	movs	r1, #0
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fd48 	bl	8004878 <TIM_CCxChannelCmd>
      break;
 8003de8:	e016      	b.n	8003e18 <HAL_TIM_Encoder_Start+0x100>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	2104      	movs	r1, #4
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 fd40 	bl	8004878 <TIM_CCxChannelCmd>
      break;
 8003df8:	e00e      	b.n	8003e18 <HAL_TIM_Encoder_Start+0x100>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	2100      	movs	r1, #0
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fd38 	bl	8004878 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2201      	movs	r2, #1
 8003e0e:	2104      	movs	r1, #4
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 fd31 	bl	8004878 <TIM_CCxChannelCmd>
      break;
 8003e16:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f042 0201 	orr.w	r2, r2, #1
 8003e26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}

08003e32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b082      	sub	sp, #8
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d122      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d11b      	bne.n	8003e8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f06f 0202 	mvn.w	r2, #2
 8003e5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	f003 0303 	and.w	r3, r3, #3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fa63 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003e7a:	e005      	b.n	8003e88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fa56 	bl	800432e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 fa65 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d122      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d11b      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f06f 0204 	mvn.w	r2, #4
 8003eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fa39 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003ece:	e005      	b.n	8003edc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f000 fa2c 	bl	800432e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 fa3b 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d122      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b08      	cmp	r3, #8
 8003efc:	d11b      	bne.n	8003f36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f06f 0208 	mvn.w	r2, #8
 8003f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2204      	movs	r2, #4
 8003f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	f003 0303 	and.w	r3, r3, #3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d003      	beq.n	8003f24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fa0f 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003f22:	e005      	b.n	8003f30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fa02 	bl	800432e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 fa11 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2200      	movs	r2, #0
 8003f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d122      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	2b10      	cmp	r3, #16
 8003f50:	d11b      	bne.n	8003f8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f06f 0210 	mvn.w	r2, #16
 8003f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2208      	movs	r2, #8
 8003f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69db      	ldr	r3, [r3, #28]
 8003f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f9e5 	bl	8004340 <HAL_TIM_IC_CaptureCallback>
 8003f76:	e005      	b.n	8003f84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 f9d8 	bl	800432e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 f9e7 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d10e      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d107      	bne.n	8003fb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f06f 0201 	mvn.w	r2, #1
 8003fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7fd fff7 	bl	8001fa4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691b      	ldr	r3, [r3, #16]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d10e      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b80      	cmp	r3, #128	; 0x80
 8003fd0:	d107      	bne.n	8003fe2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fcd6 	bl	800498e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d10e      	bne.n	800400e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b40      	cmp	r3, #64	; 0x40
 8003ffc:	d107      	bne.n	800400e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f9ab 	bl	8004364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b20      	cmp	r3, #32
 800401a:	d10e      	bne.n	800403a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68db      	ldr	r3, [r3, #12]
 8004022:	f003 0320 	and.w	r3, r3, #32
 8004026:	2b20      	cmp	r3, #32
 8004028:	d107      	bne.n	800403a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f06f 0220 	mvn.w	r2, #32
 8004032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fca1 	bl	800497c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800403a:	bf00      	nop
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004056:	2b01      	cmp	r3, #1
 8004058:	d101      	bne.n	800405e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800405a:	2302      	movs	r3, #2
 800405c:	e0ac      	b.n	80041b8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b0c      	cmp	r3, #12
 800406a:	f200 809f 	bhi.w	80041ac <HAL_TIM_PWM_ConfigChannel+0x168>
 800406e:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004074:	080040a9 	.word	0x080040a9
 8004078:	080041ad 	.word	0x080041ad
 800407c:	080041ad 	.word	0x080041ad
 8004080:	080041ad 	.word	0x080041ad
 8004084:	080040e9 	.word	0x080040e9
 8004088:	080041ad 	.word	0x080041ad
 800408c:	080041ad 	.word	0x080041ad
 8004090:	080041ad 	.word	0x080041ad
 8004094:	0800412b 	.word	0x0800412b
 8004098:	080041ad 	.word	0x080041ad
 800409c:	080041ad 	.word	0x080041ad
 80040a0:	080041ad 	.word	0x080041ad
 80040a4:	0800416b 	.word	0x0800416b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68b9      	ldr	r1, [r7, #8]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 f9c4 	bl	800443c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699a      	ldr	r2, [r3, #24]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0208 	orr.w	r2, r2, #8
 80040c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699a      	ldr	r2, [r3, #24]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0204 	bic.w	r2, r2, #4
 80040d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6999      	ldr	r1, [r3, #24]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	691a      	ldr	r2, [r3, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	619a      	str	r2, [r3, #24]
      break;
 80040e6:	e062      	b.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68b9      	ldr	r1, [r7, #8]
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 fa0a 	bl	8004508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699a      	ldr	r2, [r3, #24]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004102:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	699a      	ldr	r2, [r3, #24]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004112:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6999      	ldr	r1, [r3, #24]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	021a      	lsls	r2, r3, #8
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	619a      	str	r2, [r3, #24]
      break;
 8004128:	e041      	b.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68b9      	ldr	r1, [r7, #8]
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fa53 	bl	80045dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f042 0208 	orr.w	r2, r2, #8
 8004144:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	69da      	ldr	r2, [r3, #28]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 0204 	bic.w	r2, r2, #4
 8004154:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69d9      	ldr	r1, [r3, #28]
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	61da      	str	r2, [r3, #28]
      break;
 8004168:	e021      	b.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68b9      	ldr	r1, [r7, #8]
 8004170:	4618      	mov	r0, r3
 8004172:	f000 fa9d 	bl	80046b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69da      	ldr	r2, [r3, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004184:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004194:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69d9      	ldr	r1, [r3, #28]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	691b      	ldr	r3, [r3, #16]
 80041a0:	021a      	lsls	r2, r3, #8
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	61da      	str	r2, [r3, #28]
      break;
 80041aa:	e000      	b.n	80041ae <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80041ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}

080041c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d101      	bne.n	80041d8 <HAL_TIM_ConfigClockSource+0x18>
 80041d4:	2302      	movs	r3, #2
 80041d6:	e0a6      	b.n	8004326 <HAL_TIM_ConfigClockSource+0x166>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80041f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041fe:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b40      	cmp	r3, #64	; 0x40
 800420e:	d067      	beq.n	80042e0 <HAL_TIM_ConfigClockSource+0x120>
 8004210:	2b40      	cmp	r3, #64	; 0x40
 8004212:	d80b      	bhi.n	800422c <HAL_TIM_ConfigClockSource+0x6c>
 8004214:	2b10      	cmp	r3, #16
 8004216:	d073      	beq.n	8004300 <HAL_TIM_ConfigClockSource+0x140>
 8004218:	2b10      	cmp	r3, #16
 800421a:	d802      	bhi.n	8004222 <HAL_TIM_ConfigClockSource+0x62>
 800421c:	2b00      	cmp	r3, #0
 800421e:	d06f      	beq.n	8004300 <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004220:	e078      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004222:	2b20      	cmp	r3, #32
 8004224:	d06c      	beq.n	8004300 <HAL_TIM_ConfigClockSource+0x140>
 8004226:	2b30      	cmp	r3, #48	; 0x30
 8004228:	d06a      	beq.n	8004300 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800422a:	e073      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800422c:	2b70      	cmp	r3, #112	; 0x70
 800422e:	d00d      	beq.n	800424c <HAL_TIM_ConfigClockSource+0x8c>
 8004230:	2b70      	cmp	r3, #112	; 0x70
 8004232:	d804      	bhi.n	800423e <HAL_TIM_ConfigClockSource+0x7e>
 8004234:	2b50      	cmp	r3, #80	; 0x50
 8004236:	d033      	beq.n	80042a0 <HAL_TIM_ConfigClockSource+0xe0>
 8004238:	2b60      	cmp	r3, #96	; 0x60
 800423a:	d041      	beq.n	80042c0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800423c:	e06a      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800423e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004242:	d066      	beq.n	8004312 <HAL_TIM_ConfigClockSource+0x152>
 8004244:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004248:	d017      	beq.n	800427a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800424a:	e063      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6818      	ldr	r0, [r3, #0]
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	6899      	ldr	r1, [r3, #8]
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f000 faed 	bl	800483a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800426e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	609a      	str	r2, [r3, #8]
      break;
 8004278:	e04c      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	6899      	ldr	r1, [r3, #8]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f000 fad6 	bl	800483a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689a      	ldr	r2, [r3, #8]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800429c:	609a      	str	r2, [r3, #8]
      break;
 800429e:	e039      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6818      	ldr	r0, [r3, #0]
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6859      	ldr	r1, [r3, #4]
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	461a      	mov	r2, r3
 80042ae:	f000 fa4d 	bl	800474c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2150      	movs	r1, #80	; 0x50
 80042b8:	4618      	mov	r0, r3
 80042ba:	f000 faa4 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 80042be:	e029      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6818      	ldr	r0, [r3, #0]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	6859      	ldr	r1, [r3, #4]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	461a      	mov	r2, r3
 80042ce:	f000 fa6b 	bl	80047a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2160      	movs	r1, #96	; 0x60
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fa94 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 80042de:	e019      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	6859      	ldr	r1, [r3, #4]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	461a      	mov	r2, r3
 80042ee:	f000 fa2d 	bl	800474c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2140      	movs	r1, #64	; 0x40
 80042f8:	4618      	mov	r0, r3
 80042fa:	f000 fa84 	bl	8004806 <TIM_ITRx_SetConfig>
      break;
 80042fe:	e009      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4619      	mov	r1, r3
 800430a:	4610      	mov	r0, r2
 800430c:	f000 fa7b 	bl	8004806 <TIM_ITRx_SetConfig>
        break;
 8004310:	e000      	b.n	8004314 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004312:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004324:	2300      	movs	r3, #0
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	bc80      	pop	{r7}
 8004362:	4770      	bx	lr

08004364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800436c:	bf00      	nop
 800436e:	370c      	adds	r7, #12
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr
	...

08004378 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a29      	ldr	r2, [pc, #164]	; (8004430 <TIM_Base_SetConfig+0xb8>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d00b      	beq.n	80043a8 <TIM_Base_SetConfig+0x30>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004396:	d007      	beq.n	80043a8 <TIM_Base_SetConfig+0x30>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a26      	ldr	r2, [pc, #152]	; (8004434 <TIM_Base_SetConfig+0xbc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d003      	beq.n	80043a8 <TIM_Base_SetConfig+0x30>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4a25      	ldr	r2, [pc, #148]	; (8004438 <TIM_Base_SetConfig+0xc0>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d108      	bne.n	80043ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a1c      	ldr	r2, [pc, #112]	; (8004430 <TIM_Base_SetConfig+0xb8>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00b      	beq.n	80043da <TIM_Base_SetConfig+0x62>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c8:	d007      	beq.n	80043da <TIM_Base_SetConfig+0x62>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a19      	ldr	r2, [pc, #100]	; (8004434 <TIM_Base_SetConfig+0xbc>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d003      	beq.n	80043da <TIM_Base_SetConfig+0x62>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a18      	ldr	r2, [pc, #96]	; (8004438 <TIM_Base_SetConfig+0xc0>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d108      	bne.n	80043ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	695b      	ldr	r3, [r3, #20]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689a      	ldr	r2, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a07      	ldr	r2, [pc, #28]	; (8004430 <TIM_Base_SetConfig+0xb8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d103      	bne.n	8004420 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691a      	ldr	r2, [r3, #16]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	615a      	str	r2, [r3, #20]
}
 8004426:	bf00      	nop
 8004428:	3714      	adds	r7, #20
 800442a:	46bd      	mov	sp, r7
 800442c:	bc80      	pop	{r7}
 800442e:	4770      	bx	lr
 8004430:	40012c00 	.word	0x40012c00
 8004434:	40000400 	.word	0x40000400
 8004438:	40000800 	.word	0x40000800

0800443c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800443c:	b480      	push	{r7}
 800443e:	b087      	sub	sp, #28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a1b      	ldr	r3, [r3, #32]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 0303 	bic.w	r3, r3, #3
 8004472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f023 0302 	bic.w	r3, r3, #2
 8004484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	4313      	orrs	r3, r2
 800448e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a1c      	ldr	r2, [pc, #112]	; (8004504 <TIM_OC1_SetConfig+0xc8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d10c      	bne.n	80044b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0308 	bic.w	r3, r3, #8
 800449e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a13      	ldr	r2, [pc, #76]	; (8004504 <TIM_OC1_SetConfig+0xc8>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d111      	bne.n	80044de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80044c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	693a      	ldr	r2, [r7, #16]
 80044da:	4313      	orrs	r3, r2
 80044dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68fa      	ldr	r2, [r7, #12]
 80044e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	621a      	str	r2, [r3, #32]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bc80      	pop	{r7}
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40012c00 	.word	0x40012c00

08004508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004508:	b480      	push	{r7}
 800450a:	b087      	sub	sp, #28
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0210 	bic.w	r2, r3, #16
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	699b      	ldr	r3, [r3, #24]
 800452e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800453e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	021b      	lsls	r3, r3, #8
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f023 0320 	bic.w	r3, r3, #32
 8004552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <TIM_OC2_SetConfig+0xd0>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10d      	bne.n	8004584 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800456e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	4a14      	ldr	r2, [pc, #80]	; (80045d8 <TIM_OC2_SetConfig+0xd0>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d113      	bne.n	80045b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004592:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	693a      	ldr	r2, [r7, #16]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68fa      	ldr	r2, [r7, #12]
 80045be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685a      	ldr	r2, [r3, #4]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	697a      	ldr	r2, [r7, #20]
 80045cc:	621a      	str	r2, [r3, #32]
}
 80045ce:	bf00      	nop
 80045d0:	371c      	adds	r7, #28
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bc80      	pop	{r7}
 80045d6:	4770      	bx	lr
 80045d8:	40012c00 	.word	0x40012c00

080045dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045dc:	b480      	push	{r7}
 80045de:	b087      	sub	sp, #28
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f023 0303 	bic.w	r3, r3, #3
 8004612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68fa      	ldr	r2, [r7, #12]
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	021b      	lsls	r3, r3, #8
 800462c:	697a      	ldr	r2, [r7, #20]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a1d      	ldr	r2, [pc, #116]	; (80046ac <TIM_OC3_SetConfig+0xd0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d10d      	bne.n	8004656 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	021b      	lsls	r3, r3, #8
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a14      	ldr	r2, [pc, #80]	; (80046ac <TIM_OC3_SetConfig+0xd0>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d113      	bne.n	8004686 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004664:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800466c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	011b      	lsls	r3, r3, #4
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	011b      	lsls	r3, r3, #4
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	4313      	orrs	r3, r2
 8004684:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	693a      	ldr	r2, [r7, #16]
 800468a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	621a      	str	r2, [r3, #32]
}
 80046a0:	bf00      	nop
 80046a2:	371c      	adds	r7, #28
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	40012c00 	.word	0x40012c00

080046b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b087      	sub	sp, #28
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a1b      	ldr	r3, [r3, #32]
 80046be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a1b      	ldr	r3, [r3, #32]
 80046ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	021b      	lsls	r3, r3, #8
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	031b      	lsls	r3, r3, #12
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a0f      	ldr	r2, [pc, #60]	; (8004748 <TIM_OC4_SetConfig+0x98>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d109      	bne.n	8004724 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004716:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	697a      	ldr	r2, [r7, #20]
 8004720:	4313      	orrs	r3, r2
 8004722:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68fa      	ldr	r2, [r7, #12]
 800472e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	bc80      	pop	{r7}
 8004746:	4770      	bx	lr
 8004748:	40012c00 	.word	0x40012c00

0800474c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800474c:	b480      	push	{r7}
 800474e:	b087      	sub	sp, #28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	6a1b      	ldr	r3, [r3, #32]
 800475c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	f023 0201 	bic.w	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	4313      	orrs	r3, r2
 8004780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	f023 030a 	bic.w	r3, r3, #10
 8004788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800478a:	697a      	ldr	r2, [r7, #20]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4313      	orrs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bc80      	pop	{r7}
 80047a6:	4770      	bx	lr

080047a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b087      	sub	sp, #28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	6a1b      	ldr	r3, [r3, #32]
 80047b8:	f023 0210 	bic.w	r2, r3, #16
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	031b      	lsls	r3, r3, #12
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80047e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	697a      	ldr	r2, [r7, #20]
 80047f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	621a      	str	r2, [r3, #32]
}
 80047fc:	bf00      	nop
 80047fe:	371c      	adds	r7, #28
 8004800:	46bd      	mov	sp, r7
 8004802:	bc80      	pop	{r7}
 8004804:	4770      	bx	lr

08004806 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004806:	b480      	push	{r7}
 8004808:	b085      	sub	sp, #20
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
 800480e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800481e:	683a      	ldr	r2, [r7, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	f043 0307 	orr.w	r3, r3, #7
 8004828:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	609a      	str	r2, [r3, #8]
}
 8004830:	bf00      	nop
 8004832:	3714      	adds	r7, #20
 8004834:	46bd      	mov	sp, r7
 8004836:	bc80      	pop	{r7}
 8004838:	4770      	bx	lr

0800483a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800483a:	b480      	push	{r7}
 800483c:	b087      	sub	sp, #28
 800483e:	af00      	add	r7, sp, #0
 8004840:	60f8      	str	r0, [r7, #12]
 8004842:	60b9      	str	r1, [r7, #8]
 8004844:	607a      	str	r2, [r7, #4]
 8004846:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004854:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	021a      	lsls	r2, r3, #8
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	431a      	orrs	r2, r3
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	4313      	orrs	r3, r2
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	4313      	orrs	r3, r2
 8004866:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	609a      	str	r2, [r3, #8]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 031f 	and.w	r3, r3, #31
 800488a:	2201      	movs	r2, #1
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a1a      	ldr	r2, [r3, #32]
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	43db      	mvns	r3, r3
 800489a:	401a      	ands	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a1a      	ldr	r2, [r3, #32]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	f003 031f 	and.w	r3, r3, #31
 80048aa:	6879      	ldr	r1, [r7, #4]
 80048ac:	fa01 f303 	lsl.w	r3, r1, r3
 80048b0:	431a      	orrs	r2, r3
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d101      	bne.n	80048d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048d4:	2302      	movs	r3, #2
 80048d6:	e046      	b.n	8004966 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68fa      	ldr	r2, [r7, #12]
 8004910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a16      	ldr	r2, [pc, #88]	; (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d00e      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004924:	d009      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a12      	ldr	r2, [pc, #72]	; (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a10      	ldr	r2, [pc, #64]	; (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d10c      	bne.n	8004954 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004940:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	68ba      	ldr	r2, [r7, #8]
 8004948:	4313      	orrs	r3, r2
 800494a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr
 8004970:	40012c00 	.word	0x40012c00
 8004974:	40000400 	.word	0x40000400
 8004978:	40000800 	.word	0x40000800

0800497c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	bc80      	pop	{r7}
 800498c:	4770      	bx	lr

0800498e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	bc80      	pop	{r7}
 800499e:	4770      	bx	lr

080049a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b082      	sub	sp, #8
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	e03f      	b.n	8004a32 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fd fcc4 	bl	8002354 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2224      	movs	r2, #36	; 0x24
 80049d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68da      	ldr	r2, [r3, #12]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 fca5 	bl	8005334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	691a      	ldr	r2, [r3, #16]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	695a      	ldr	r2, [r3, #20]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68da      	ldr	r2, [r3, #12]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3708      	adds	r7, #8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b084      	sub	sp, #16
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	60f8      	str	r0, [r7, #12]
 8004a42:	60b9      	str	r1, [r7, #8]
 8004a44:	4613      	mov	r3, r2
 8004a46:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	2b20      	cmp	r3, #32
 8004a52:	d11d      	bne.n	8004a90 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d002      	beq.n	8004a60 <HAL_UART_Receive_DMA+0x26>
 8004a5a:	88fb      	ldrh	r3, [r7, #6]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e016      	b.n	8004a92 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d101      	bne.n	8004a72 <HAL_UART_Receive_DMA+0x38>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e00f      	b.n	8004a92 <HAL_UART_Receive_DMA+0x58>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004a80:	88fb      	ldrh	r3, [r7, #6]
 8004a82:	461a      	mov	r2, r3
 8004a84:	68b9      	ldr	r1, [r7, #8]
 8004a86:	68f8      	ldr	r0, [r7, #12]
 8004a88:	f000 fa8a 	bl	8004fa0 <UART_Start_Receive_DMA>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	e000      	b.n	8004a92 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
	...

08004a9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	; 0x28
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d10d      	bne.n	8004aee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	f003 0320 	and.w	r3, r3, #32
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_UART_IRQHandler+0x52>
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d003      	beq.n	8004aee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fb7a 	bl	80051e0 <UART_Receive_IT>
      return;
 8004aec:	e17c      	b.n	8004de8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 80b1 	beq.w	8004c58 <HAL_UART_IRQHandler+0x1bc>
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d105      	bne.n	8004b0c <HAL_UART_IRQHandler+0x70>
 8004b00:	6a3b      	ldr	r3, [r7, #32]
 8004b02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	f000 80a6 	beq.w	8004c58 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00a      	beq.n	8004b2c <HAL_UART_IRQHandler+0x90>
 8004b16:	6a3b      	ldr	r3, [r7, #32]
 8004b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f043 0201 	orr.w	r2, r3, #1
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	f003 0304 	and.w	r3, r3, #4
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_UART_IRQHandler+0xb0>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d005      	beq.n	8004b4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b44:	f043 0202 	orr.w	r2, r3, #2
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	f003 0302 	and.w	r3, r3, #2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00a      	beq.n	8004b6c <HAL_UART_IRQHandler+0xd0>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d005      	beq.n	8004b6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f043 0204 	orr.w	r2, r3, #4
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	f003 0308 	and.w	r3, r3, #8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00f      	beq.n	8004b96 <HAL_UART_IRQHandler+0xfa>
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	f003 0320 	and.w	r3, r3, #32
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d104      	bne.n	8004b8a <HAL_UART_IRQHandler+0xee>
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d005      	beq.n	8004b96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f043 0208 	orr.w	r2, r3, #8
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 811f 	beq.w	8004dde <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <HAL_UART_IRQHandler+0x11e>
 8004baa:	6a3b      	ldr	r3, [r7, #32]
 8004bac:	f003 0320 	and.w	r3, r3, #32
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fb13 	bl	80051e0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	695b      	ldr	r3, [r3, #20]
 8004bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	bf14      	ite	ne
 8004bc8:	2301      	movne	r3, #1
 8004bca:	2300      	moveq	r3, #0
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d102      	bne.n	8004be2 <HAL_UART_IRQHandler+0x146>
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d031      	beq.n	8004c46 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa55 	bl	8005092 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	695b      	ldr	r3, [r3, #20]
 8004bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d023      	beq.n	8004c3e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	695a      	ldr	r2, [r3, #20]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c04:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d013      	beq.n	8004c36 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c12:	4a77      	ldr	r2, [pc, #476]	; (8004df0 <HAL_UART_IRQHandler+0x354>)
 8004c14:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fd feec 	bl	80029f8 <HAL_DMA_Abort_IT>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d016      	beq.n	8004c54 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c30:	4610      	mov	r0, r2
 8004c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	e00e      	b.n	8004c54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f8ee 	bl	8004e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c3c:	e00a      	b.n	8004c54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8ea 	bl	8004e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	e006      	b.n	8004c54 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f8e6 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004c52:	e0c4      	b.n	8004dde <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c54:	bf00      	nop
    return;
 8004c56:	e0c2      	b.n	8004dde <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	f040 80a1 	bne.w	8004da4 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 809b 	beq.w	8004da4 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	f003 0310 	and.w	r3, r3, #16
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8095 	beq.w	8004da4 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60fb      	str	r3, [r7, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60fb      	str	r3, [r7, #12]
 8004c8e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	695b      	ldr	r3, [r3, #20]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d04e      	beq.n	8004d3c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004ca8:	8a3b      	ldrh	r3, [r7, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8099 	beq.w	8004de2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cb4:	8a3a      	ldrh	r2, [r7, #16]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	f080 8093 	bcs.w	8004de2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	8a3a      	ldrh	r2, [r7, #16]
 8004cc0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	699b      	ldr	r3, [r3, #24]
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d02b      	beq.n	8004d24 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68da      	ldr	r2, [r3, #12]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004cda:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	695a      	ldr	r2, [r3, #20]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0201 	bic.w	r2, r2, #1
 8004cea:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	695a      	ldr	r2, [r3, #20]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cfa:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68da      	ldr	r2, [r3, #12]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0210 	bic.w	r2, r2, #16
 8004d18:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fd fe2f 	bl	8002982 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	b29b      	uxth	r3, r3
 8004d32:	4619      	mov	r1, r3
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f878 	bl	8004e2a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004d3a:	e052      	b.n	8004de2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	1ad3      	subs	r3, r2, r3
 8004d48:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d048      	beq.n	8004de6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004d54:	8a7b      	ldrh	r3, [r7, #18]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d045      	beq.n	8004de6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68da      	ldr	r2, [r3, #12]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004d68:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	695a      	ldr	r2, [r3, #20]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f022 0201 	bic.w	r2, r2, #1
 8004d78:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2220      	movs	r2, #32
 8004d7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2200      	movs	r2, #0
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 0210 	bic.w	r2, r2, #16
 8004d96:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d98:	8a7b      	ldrh	r3, [r7, #18]
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 f844 	bl	8004e2a <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004da2:	e020      	b.n	8004de6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d008      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x324>
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 f9aa 	bl	8005112 <UART_Transmit_IT>
    return;
 8004dbe:	e013      	b.n	8004de8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00e      	beq.n	8004de8 <HAL_UART_IRQHandler+0x34c>
 8004dca:	6a3b      	ldr	r3, [r7, #32]
 8004dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d009      	beq.n	8004de8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 f9eb 	bl	80051b0 <UART_EndTransmit_IT>
    return;
 8004dda:	bf00      	nop
 8004ddc:	e004      	b.n	8004de8 <HAL_UART_IRQHandler+0x34c>
    return;
 8004dde:	bf00      	nop
 8004de0:	e002      	b.n	8004de8 <HAL_UART_IRQHandler+0x34c>
      return;
 8004de2:	bf00      	nop
 8004de4:	e000      	b.n	8004de8 <HAL_UART_IRQHandler+0x34c>
      return;
 8004de6:	bf00      	nop
  }
}
 8004de8:	3728      	adds	r7, #40	; 0x28
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	080050eb 	.word	0x080050eb

08004df4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr

08004e06 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b083      	sub	sp, #12
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e0e:	bf00      	nop
 8004e10:	370c      	adds	r7, #12
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bc80      	pop	{r7}
 8004e16:	4770      	bx	lr

08004e18 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bc80      	pop	{r7}
 8004e28:	4770      	bx	lr

08004e2a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b083      	sub	sp, #12
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
 8004e32:	460b      	mov	r3, r1
 8004e34:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d12a      	bne.n	8004eb2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68da      	ldr	r2, [r3, #12]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e70:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	695a      	ldr	r2, [r3, #20]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e90:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2220      	movs	r2, #32
 8004e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d107      	bne.n	8004eb2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68da      	ldr	r2, [r3, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0210 	bic.w	r2, r2, #16
 8004eb0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d106      	bne.n	8004ec8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	68f8      	ldr	r0, [r7, #12]
 8004ec2:	f7ff ffb2 	bl	8004e2a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ec6:	e002      	b.n	8004ece <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7fc fc85 	bl	80017d8 <HAL_UART_RxCpltCallback>
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d108      	bne.n	8004efe <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ef0:	085b      	lsrs	r3, r3, #1
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f7ff ff97 	bl	8004e2a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004efc:	e002      	b.n	8004f04 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f7ff ff81 	bl	8004e06 <HAL_UART_RxHalfCpltCallback>
}
 8004f04:	bf00      	nop
 8004f06:	3710      	adds	r7, #16
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f14:	2300      	movs	r3, #0
 8004f16:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f1e:	68bb      	ldr	r3, [r7, #8]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	bf14      	ite	ne
 8004f2c:	2301      	movne	r3, #1
 8004f2e:	2300      	moveq	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b21      	cmp	r3, #33	; 0x21
 8004f3e:	d108      	bne.n	8004f52 <UART_DMAError+0x46>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d005      	beq.n	8004f52 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004f4c:	68b8      	ldr	r0, [r7, #8]
 8004f4e:	f000 f88b 	bl	8005068 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	bf14      	ite	ne
 8004f60:	2301      	movne	r3, #1
 8004f62:	2300      	moveq	r3, #0
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b22      	cmp	r3, #34	; 0x22
 8004f72:	d108      	bne.n	8004f86 <UART_DMAError+0x7a>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d005      	beq.n	8004f86 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004f80:	68b8      	ldr	r0, [r7, #8]
 8004f82:	f000 f886 	bl	8005092 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	f043 0210 	orr.w	r2, r3, #16
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f92:	68b8      	ldr	r0, [r7, #8]
 8004f94:	f7ff ff40 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f98:	bf00      	nop
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b086      	sub	sp, #24
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	4613      	mov	r3, r2
 8004fac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	88fa      	ldrh	r2, [r7, #6]
 8004fb8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2222      	movs	r2, #34	; 0x22
 8004fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	4a23      	ldr	r2, [pc, #140]	; (800505c <UART_Start_Receive_DMA+0xbc>)
 8004fce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd4:	4a22      	ldr	r2, [pc, #136]	; (8005060 <UART_Start_Receive_DMA+0xc0>)
 8004fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fdc:	4a21      	ldr	r2, [pc, #132]	; (8005064 <UART_Start_Receive_DMA+0xc4>)
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004fe8:	f107 0308 	add.w	r3, r7, #8
 8004fec:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	88fb      	ldrh	r3, [r7, #6]
 8005000:	f7fd fc60 	bl	80028c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005004:	2300      	movs	r3, #0
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	613b      	str	r3, [r7, #16]
 8005018:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005030:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0201 	orr.w	r2, r2, #1
 8005040:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	695a      	ldr	r2, [r3, #20]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005050:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	4618      	mov	r0, r3
 8005056:	3718      	adds	r7, #24
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}
 800505c:	08004e41 	.word	0x08004e41
 8005060:	08004ed7 	.word	0x08004ed7
 8005064:	08004f0d 	.word	0x08004f0d

08005068 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68da      	ldr	r2, [r3, #12]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800507e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	bc80      	pop	{r7}
 8005090:	4770      	bx	lr

08005092 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005092:	b480      	push	{r7}
 8005094:	b083      	sub	sp, #12
 8005096:	af00      	add	r7, sp, #0
 8005098:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68da      	ldr	r2, [r3, #12]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80050a8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	695a      	ldr	r2, [r3, #20]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f022 0201 	bic.w	r2, r2, #1
 80050b8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d107      	bne.n	80050d2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	68da      	ldr	r2, [r3, #12]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0210 	bic.w	r2, r2, #16
 80050d0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	; 0x30
}
 80050e0:	bf00      	nop
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr

080050ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b084      	sub	sp, #16
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f7ff fe87 	bl	8004e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800510a:	bf00      	nop
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b21      	cmp	r3, #33	; 0x21
 8005124:	d13e      	bne.n	80051a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512e:	d114      	bne.n	800515a <UART_Transmit_IT+0x48>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d110      	bne.n	800515a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800514c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	621a      	str	r2, [r3, #32]
 8005158:	e008      	b.n	800516c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	1c59      	adds	r1, r3, #1
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6211      	str	r1, [r2, #32]
 8005164:	781a      	ldrb	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005170:	b29b      	uxth	r3, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	b29b      	uxth	r3, r3
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	4619      	mov	r1, r3
 800517a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10f      	bne.n	80051a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800518e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68da      	ldr	r2, [r3, #12]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800519e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e000      	b.n	80051a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3714      	adds	r7, #20
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bc80      	pop	{r7}
 80051ae:	4770      	bx	lr

080051b0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051c6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff fe0f 	bl	8004df4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b086      	sub	sp, #24
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b22      	cmp	r3, #34	; 0x22
 80051f2:	f040 8099 	bne.w	8005328 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051fe:	d117      	bne.n	8005230 <UART_Receive_IT+0x50>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d113      	bne.n	8005230 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005208:	2300      	movs	r3, #0
 800520a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	b29b      	uxth	r3, r3
 800521a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800521e:	b29a      	uxth	r2, r3
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	1c9a      	adds	r2, r3, #2
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
 800522e:	e026      	b.n	800527e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005234:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	d007      	beq.n	8005254 <UART_Receive_IT+0x74>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d10a      	bne.n	8005262 <UART_Receive_IT+0x82>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	691b      	ldr	r3, [r3, #16]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d106      	bne.n	8005262 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	701a      	strb	r2, [r3, #0]
 8005260:	e008      	b.n	8005274 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	b2db      	uxtb	r3, r3
 800526a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526e:	b2da      	uxtb	r2, r3
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005282:	b29b      	uxth	r3, r3
 8005284:	3b01      	subs	r3, #1
 8005286:	b29b      	uxth	r3, r3
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	4619      	mov	r1, r3
 800528c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800528e:	2b00      	cmp	r3, #0
 8005290:	d148      	bne.n	8005324 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68da      	ldr	r2, [r3, #12]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0220 	bic.w	r2, r2, #32
 80052a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	695a      	ldr	r2, [r3, #20]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f022 0201 	bic.w	r2, r2, #1
 80052c0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2220      	movs	r2, #32
 80052c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d123      	bne.n	800531a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0210 	bic.w	r2, r2, #16
 80052e6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f003 0310 	and.w	r3, r3, #16
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d10a      	bne.n	800530c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005310:	4619      	mov	r1, r3
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7ff fd89 	bl	8004e2a <HAL_UARTEx_RxEventCallback>
 8005318:	e002      	b.n	8005320 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f7fc fa5c 	bl	80017d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	e002      	b.n	800532a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689a      	ldr	r2, [r3, #8]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	695b      	ldr	r3, [r3, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800536e:	f023 030c 	bic.w	r3, r3, #12
 8005372:	687a      	ldr	r2, [r7, #4]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	430b      	orrs	r3, r1
 800537a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a2c      	ldr	r2, [pc, #176]	; (8005448 <UART_SetConfig+0x114>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d103      	bne.n	80053a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800539c:	f7fe fa4c 	bl	8003838 <HAL_RCC_GetPCLK2Freq>
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	e002      	b.n	80053aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80053a4:	f7fe fa34 	bl	8003810 <HAL_RCC_GetPCLK1Freq>
 80053a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009a      	lsls	r2, r3, #2
 80053b4:	441a      	add	r2, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	009b      	lsls	r3, r3, #2
 80053bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c0:	4a22      	ldr	r2, [pc, #136]	; (800544c <UART_SetConfig+0x118>)
 80053c2:	fba2 2303 	umull	r2, r3, r2, r3
 80053c6:	095b      	lsrs	r3, r3, #5
 80053c8:	0119      	lsls	r1, r3, #4
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4613      	mov	r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4413      	add	r3, r2
 80053d2:	009a      	lsls	r2, r3, #2
 80053d4:	441a      	add	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80053e0:	4b1a      	ldr	r3, [pc, #104]	; (800544c <UART_SetConfig+0x118>)
 80053e2:	fba3 0302 	umull	r0, r3, r3, r2
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	2064      	movs	r0, #100	; 0x64
 80053ea:	fb00 f303 	mul.w	r3, r0, r3
 80053ee:	1ad3      	subs	r3, r2, r3
 80053f0:	011b      	lsls	r3, r3, #4
 80053f2:	3332      	adds	r3, #50	; 0x32
 80053f4:	4a15      	ldr	r2, [pc, #84]	; (800544c <UART_SetConfig+0x118>)
 80053f6:	fba2 2303 	umull	r2, r3, r2, r3
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005400:	4419      	add	r1, r3
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	441a      	add	r2, r3
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	fbb2 f2f3 	udiv	r2, r2, r3
 8005418:	4b0c      	ldr	r3, [pc, #48]	; (800544c <UART_SetConfig+0x118>)
 800541a:	fba3 0302 	umull	r0, r3, r3, r2
 800541e:	095b      	lsrs	r3, r3, #5
 8005420:	2064      	movs	r0, #100	; 0x64
 8005422:	fb00 f303 	mul.w	r3, r0, r3
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	3332      	adds	r3, #50	; 0x32
 800542c:	4a07      	ldr	r2, [pc, #28]	; (800544c <UART_SetConfig+0x118>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	f003 020f 	and.w	r2, r3, #15
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	440a      	add	r2, r1
 800543e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	40013800 	.word	0x40013800
 800544c:	51eb851f 	.word	0x51eb851f

08005450 <__libc_init_array>:
 8005450:	b570      	push	{r4, r5, r6, lr}
 8005452:	2500      	movs	r5, #0
 8005454:	4e0c      	ldr	r6, [pc, #48]	; (8005488 <__libc_init_array+0x38>)
 8005456:	4c0d      	ldr	r4, [pc, #52]	; (800548c <__libc_init_array+0x3c>)
 8005458:	1ba4      	subs	r4, r4, r6
 800545a:	10a4      	asrs	r4, r4, #2
 800545c:	42a5      	cmp	r5, r4
 800545e:	d109      	bne.n	8005474 <__libc_init_array+0x24>
 8005460:	f000 f822 	bl	80054a8 <_init>
 8005464:	2500      	movs	r5, #0
 8005466:	4e0a      	ldr	r6, [pc, #40]	; (8005490 <__libc_init_array+0x40>)
 8005468:	4c0a      	ldr	r4, [pc, #40]	; (8005494 <__libc_init_array+0x44>)
 800546a:	1ba4      	subs	r4, r4, r6
 800546c:	10a4      	asrs	r4, r4, #2
 800546e:	42a5      	cmp	r5, r4
 8005470:	d105      	bne.n	800547e <__libc_init_array+0x2e>
 8005472:	bd70      	pop	{r4, r5, r6, pc}
 8005474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005478:	4798      	blx	r3
 800547a:	3501      	adds	r5, #1
 800547c:	e7ee      	b.n	800545c <__libc_init_array+0xc>
 800547e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005482:	4798      	blx	r3
 8005484:	3501      	adds	r5, #1
 8005486:	e7f2      	b.n	800546e <__libc_init_array+0x1e>
 8005488:	080054ec 	.word	0x080054ec
 800548c:	080054ec 	.word	0x080054ec
 8005490:	080054ec 	.word	0x080054ec
 8005494:	080054f0 	.word	0x080054f0

08005498 <memset>:
 8005498:	4603      	mov	r3, r0
 800549a:	4402      	add	r2, r0
 800549c:	4293      	cmp	r3, r2
 800549e:	d100      	bne.n	80054a2 <memset+0xa>
 80054a0:	4770      	bx	lr
 80054a2:	f803 1b01 	strb.w	r1, [r3], #1
 80054a6:	e7f9      	b.n	800549c <memset+0x4>

080054a8 <_init>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	bf00      	nop
 80054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ae:	bc08      	pop	{r3}
 80054b0:	469e      	mov	lr, r3
 80054b2:	4770      	bx	lr

080054b4 <_fini>:
 80054b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b6:	bf00      	nop
 80054b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ba:	bc08      	pop	{r3}
 80054bc:	469e      	mov	lr, r3
 80054be:	4770      	bx	lr
