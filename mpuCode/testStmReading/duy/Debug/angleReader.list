
angleReader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c54  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003d64  08003d64  00013d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e14  08003e14  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08003e14  08003e14  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003e14  08003e14  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003e14  08003e14  00013e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003e18  08003e18  00013e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001188  20000010  08003e2c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001198  08003e2c  00021198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013685  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b78  00000000  00000000  000336be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012a0  00000000  00000000  00036238  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001170  00000000  00000000  000374d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001917d  00000000  00000000  00038648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f006  00000000  00000000  000517c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00096b37  00000000  00000000  000607cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f7302  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da8  00000000  00000000  000f7380  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08003d4c 	.word	0x08003d4c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08003d4c 	.word	0x08003d4c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b096      	sub	sp, #88	; 0x58
 8000184:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000186:	f000 fc95 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800018a:	f000 f853 	bl	8000234 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800018e:	f000 f9e3 	bl	8000558 <MX_GPIO_Init>
  MX_DMA_Init();
 8000192:	f000 f9c3 	bl	800051c <MX_DMA_Init>
  MX_ADC1_Init();
 8000196:	f000 f8a9 	bl	80002ec <MX_ADC1_Init>
  MX_I2C1_Init();
 800019a:	f000 f8e5 	bl	8000368 <MX_I2C1_Init>
  MX_TIM1_Init();
 800019e:	f000 f911 	bl	80003c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80001a2:	f000 f967 	bl	8000474 <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ADCTask */
  osThreadDef(ADCTask, StartADCTask, osPriorityNormal, 0, 128);
 80001a6:	4b1d      	ldr	r3, [pc, #116]	; (800021c <main+0x9c>)
 80001a8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80001ac:	461d      	mov	r5, r3
 80001ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ADCTaskHandle = osThreadCreate(osThread(ADCTask), NULL);
 80001ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80001be:	2100      	movs	r1, #0
 80001c0:	4618      	mov	r0, r3
 80001c2:	f002 fbfb 	bl	80029bc <osThreadCreate>
 80001c6:	4602      	mov	r2, r0
 80001c8:	4b15      	ldr	r3, [pc, #84]	; (8000220 <main+0xa0>)
 80001ca:	601a      	str	r2, [r3, #0]

  /* definition and creation of MpuTask */
  osThreadDef(MpuTask, StartMpuTask, osPriorityIdle, 0, 128);
 80001cc:	4b15      	ldr	r3, [pc, #84]	; (8000224 <main+0xa4>)
 80001ce:	f107 0420 	add.w	r4, r7, #32
 80001d2:	461d      	mov	r5, r3
 80001d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MpuTaskHandle = osThreadCreate(osThread(MpuTask), NULL);
 80001e0:	f107 0320 	add.w	r3, r7, #32
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f002 fbe8 	bl	80029bc <osThreadCreate>
 80001ec:	4602      	mov	r2, r0
 80001ee:	4b0e      	ldr	r3, [pc, #56]	; (8000228 <main+0xa8>)
 80001f0:	601a      	str	r2, [r3, #0]

  /* definition and creation of PidSpeedTask */
  osThreadDef(PidSpeedTask, StartPidSTsk, osPriorityIdle, 0, 128);
 80001f2:	4b0e      	ldr	r3, [pc, #56]	; (800022c <main+0xac>)
 80001f4:	1d3c      	adds	r4, r7, #4
 80001f6:	461d      	mov	r5, r3
 80001f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000200:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  PidSpeedTaskHandle = osThreadCreate(osThread(PidSpeedTask), NULL);
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2100      	movs	r1, #0
 8000208:	4618      	mov	r0, r3
 800020a:	f002 fbd7 	bl	80029bc <osThreadCreate>
 800020e:	4602      	mov	r2, r0
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <main+0xb0>)
 8000212:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000214:	f002 fbcb 	bl	80029ae <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000218:	e7fe      	b.n	8000218 <main+0x98>
 800021a:	bf00      	nop
 800021c:	08003d6c 	.word	0x08003d6c
 8000220:	20001058 	.word	0x20001058
 8000224:	08003d90 	.word	0x08003d90
 8000228:	2000106c 	.word	0x2000106c
 800022c:	08003dbc 	.word	0x08003dbc
 8000230:	20001024 	.word	0x20001024

08000234 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b094      	sub	sp, #80	; 0x50
 8000238:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800023e:	2228      	movs	r2, #40	; 0x28
 8000240:	2100      	movs	r1, #0
 8000242:	4618      	mov	r0, r3
 8000244:	f003 fd7a 	bl	8003d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000248:	f107 0314 	add.w	r3, r7, #20
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000258:	1d3b      	adds	r3, r7, #4
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 800025e:	605a      	str	r2, [r3, #4]
 8000260:	609a      	str	r2, [r3, #8]
 8000262:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000264:	2301      	movs	r3, #1
 8000266:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000272:	2301      	movs	r3, #1
 8000274:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000276:	2302      	movs	r3, #2
 8000278:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800027a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000280:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000284:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800028a:	4618      	mov	r0, r3
 800028c:	f001 fb40 	bl	8001910 <HAL_RCC_OscConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000296:	f000 f9e7 	bl	8000668 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800029a:	230f      	movs	r3, #15
 800029c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029e:	2302      	movs	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a2:	2300      	movs	r3, #0
 80002a4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002aa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002b0:	f107 0314 	add.w	r3, r7, #20
 80002b4:	2102      	movs	r1, #2
 80002b6:	4618      	mov	r0, r3
 80002b8:	f001 fdaa 	bl	8001e10 <HAL_RCC_ClockConfig>
 80002bc:	4603      	mov	r3, r0
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d001      	beq.n	80002c6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80002c2:	f000 f9d1 	bl	8000668 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80002c6:	2302      	movs	r3, #2
 80002c8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80002ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002ce:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002d0:	1d3b      	adds	r3, r7, #4
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 ff54 	bl	8002180 <HAL_RCCEx_PeriphCLKConfig>
 80002d8:	4603      	mov	r3, r0
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d001      	beq.n	80002e2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80002de:	f000 f9c3 	bl	8000668 <Error_Handler>
  }
}
 80002e2:	bf00      	nop
 80002e4:	3750      	adds	r7, #80	; 0x50
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bd80      	pop	{r7, pc}
	...

080002ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b084      	sub	sp, #16
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2200      	movs	r2, #0
 80002f6:	601a      	str	r2, [r3, #0]
 80002f8:	605a      	str	r2, [r3, #4]
 80002fa:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002fc:	4b18      	ldr	r3, [pc, #96]	; (8000360 <MX_ADC1_Init+0x74>)
 80002fe:	4a19      	ldr	r2, [pc, #100]	; (8000364 <MX_ADC1_Init+0x78>)
 8000300:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000302:	4b17      	ldr	r3, [pc, #92]	; (8000360 <MX_ADC1_Init+0x74>)
 8000304:	2200      	movs	r2, #0
 8000306:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000308:	4b15      	ldr	r3, [pc, #84]	; (8000360 <MX_ADC1_Init+0x74>)
 800030a:	2200      	movs	r2, #0
 800030c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800030e:	4b14      	ldr	r3, [pc, #80]	; (8000360 <MX_ADC1_Init+0x74>)
 8000310:	2200      	movs	r2, #0
 8000312:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000314:	4b12      	ldr	r3, [pc, #72]	; (8000360 <MX_ADC1_Init+0x74>)
 8000316:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800031a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <MX_ADC1_Init+0x74>)
 800031e:	2200      	movs	r2, #0
 8000320:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000322:	4b0f      	ldr	r3, [pc, #60]	; (8000360 <MX_ADC1_Init+0x74>)
 8000324:	2201      	movs	r2, #1
 8000326:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000328:	480d      	ldr	r0, [pc, #52]	; (8000360 <MX_ADC1_Init+0x74>)
 800032a:	f000 fbf5 	bl	8000b18 <HAL_ADC_Init>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d001      	beq.n	8000338 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000334:	f000 f998 	bl	8000668 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000338:	2300      	movs	r3, #0
 800033a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800033c:	2301      	movs	r3, #1
 800033e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000340:	2300      	movs	r3, #0
 8000342:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000344:	1d3b      	adds	r3, r7, #4
 8000346:	4619      	mov	r1, r3
 8000348:	4805      	ldr	r0, [pc, #20]	; (8000360 <MX_ADC1_Init+0x74>)
 800034a:	f000 fcbd 	bl	8000cc8 <HAL_ADC_ConfigChannel>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000354:	f000 f988 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000358:	bf00      	nop
 800035a:	3710      	adds	r7, #16
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	20001028 	.word	0x20001028
 8000364:	40012400 	.word	0x40012400

08000368 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800036c:	4b12      	ldr	r3, [pc, #72]	; (80003b8 <MX_I2C1_Init+0x50>)
 800036e:	4a13      	ldr	r2, [pc, #76]	; (80003bc <MX_I2C1_Init+0x54>)
 8000370:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000372:	4b11      	ldr	r3, [pc, #68]	; (80003b8 <MX_I2C1_Init+0x50>)
 8000374:	4a12      	ldr	r2, [pc, #72]	; (80003c0 <MX_I2C1_Init+0x58>)
 8000376:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000378:	4b0f      	ldr	r3, [pc, #60]	; (80003b8 <MX_I2C1_Init+0x50>)
 800037a:	2200      	movs	r2, #0
 800037c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 208;
 800037e:	4b0e      	ldr	r3, [pc, #56]	; (80003b8 <MX_I2C1_Init+0x50>)
 8000380:	22d0      	movs	r2, #208	; 0xd0
 8000382:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000384:	4b0c      	ldr	r3, [pc, #48]	; (80003b8 <MX_I2C1_Init+0x50>)
 8000386:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800038a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <MX_I2C1_Init+0x50>)
 800038e:	2200      	movs	r2, #0
 8000390:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <MX_I2C1_Init+0x50>)
 8000394:	2200      	movs	r2, #0
 8000396:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <MX_I2C1_Init+0x50>)
 800039a:	2200      	movs	r2, #0
 800039c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <MX_I2C1_Init+0x50>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80003a4:	4804      	ldr	r0, [pc, #16]	; (80003b8 <MX_I2C1_Init+0x50>)
 80003a6:	f001 f97b 	bl	80016a0 <HAL_I2C_Init>
 80003aa:	4603      	mov	r3, r0
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d001      	beq.n	80003b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80003b0:	f000 f95a 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	20000fcc 	.word	0x20000fcc
 80003bc:	40005400 	.word	0x40005400
 80003c0:	000186a0 	.word	0x000186a0

080003c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08c      	sub	sp, #48	; 0x30
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80003ca:	f107 030c 	add.w	r3, r7, #12
 80003ce:	2224      	movs	r2, #36	; 0x24
 80003d0:	2100      	movs	r1, #0
 80003d2:	4618      	mov	r0, r3
 80003d4:	f003 fcb2 	bl	8003d3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	1d3b      	adds	r3, r7, #4
 80003da:	2200      	movs	r2, #0
 80003dc:	601a      	str	r2, [r3, #0]
 80003de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80003e0:	4b22      	ldr	r3, [pc, #136]	; (800046c <MX_TIM1_Init+0xa8>)
 80003e2:	4a23      	ldr	r2, [pc, #140]	; (8000470 <MX_TIM1_Init+0xac>)
 80003e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80003e6:	4b21      	ldr	r3, [pc, #132]	; (800046c <MX_TIM1_Init+0xa8>)
 80003e8:	2200      	movs	r2, #0
 80003ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ec:	4b1f      	ldr	r3, [pc, #124]	; (800046c <MX_TIM1_Init+0xa8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80003f2:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_TIM1_Init+0xa8>)
 80003f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003fa:	4b1c      	ldr	r3, [pc, #112]	; (800046c <MX_TIM1_Init+0xa8>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000400:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_TIM1_Init+0xa8>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000406:	4b19      	ldr	r3, [pc, #100]	; (800046c <MX_TIM1_Init+0xa8>)
 8000408:	2280      	movs	r2, #128	; 0x80
 800040a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800040c:	2301      	movs	r3, #1
 800040e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000410:	2302      	movs	r3, #2
 8000412:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000414:	2301      	movs	r3, #1
 8000416:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000418:	2300      	movs	r3, #0
 800041a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 2;
 800041c:	2302      	movs	r3, #2
 800041e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000420:	2300      	movs	r3, #0
 8000422:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000424:	2301      	movs	r3, #1
 8000426:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000428:	2300      	movs	r3, #0
 800042a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800042c:	2300      	movs	r3, #0
 800042e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000430:	f107 030c 	add.w	r3, r7, #12
 8000434:	4619      	mov	r1, r3
 8000436:	480d      	ldr	r0, [pc, #52]	; (800046c <MX_TIM1_Init+0xa8>)
 8000438:	f002 f802 	bl	8002440 <HAL_TIM_Encoder_Init>
 800043c:	4603      	mov	r3, r0
 800043e:	2b00      	cmp	r3, #0
 8000440:	d001      	beq.n	8000446 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000442:	f000 f911 	bl	8000668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000446:	2300      	movs	r3, #0
 8000448:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800044a:	2300      	movs	r3, #0
 800044c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800044e:	1d3b      	adds	r3, r7, #4
 8000450:	4619      	mov	r1, r3
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <MX_TIM1_Init+0xa8>)
 8000454:	f002 fa24 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800045e:	f000 f903 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	3730      	adds	r7, #48	; 0x30
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	20001070 	.word	0x20001070
 8000470:	40012c00 	.word	0x40012c00

08000474 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b08c      	sub	sp, #48	; 0x30
 8000478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800047a:	f107 030c 	add.w	r3, r7, #12
 800047e:	2224      	movs	r2, #36	; 0x24
 8000480:	2100      	movs	r1, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f003 fc5a 	bl	8003d3c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	2200      	movs	r2, #0
 800048c:	601a      	str	r2, [r3, #0]
 800048e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000490:	4b21      	ldr	r3, [pc, #132]	; (8000518 <MX_TIM2_Init+0xa4>)
 8000492:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000496:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000498:	4b1f      	ldr	r3, [pc, #124]	; (8000518 <MX_TIM2_Init+0xa4>)
 800049a:	2200      	movs	r2, #0
 800049c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800049e:	4b1e      	ldr	r3, [pc, #120]	; (8000518 <MX_TIM2_Init+0xa4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80004a4:	4b1c      	ldr	r3, [pc, #112]	; (8000518 <MX_TIM2_Init+0xa4>)
 80004a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ac:	4b1a      	ldr	r3, [pc, #104]	; (8000518 <MX_TIM2_Init+0xa4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004b2:	4b19      	ldr	r3, [pc, #100]	; (8000518 <MX_TIM2_Init+0xa4>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80004b8:	2301      	movs	r3, #1
 80004ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80004bc:	2300      	movs	r3, #0
 80004be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80004c0:	2301      	movs	r3, #1
 80004c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80004c8:	2300      	movs	r3, #0
 80004ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80004cc:	2300      	movs	r3, #0
 80004ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80004d0:	2301      	movs	r3, #1
 80004d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80004d4:	2300      	movs	r3, #0
 80004d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80004dc:	f107 030c 	add.w	r3, r7, #12
 80004e0:	4619      	mov	r1, r3
 80004e2:	480d      	ldr	r0, [pc, #52]	; (8000518 <MX_TIM2_Init+0xa4>)
 80004e4:	f001 ffac 	bl	8002440 <HAL_TIM_Encoder_Init>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80004ee:	f000 f8bb 	bl	8000668 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004f2:	2300      	movs	r3, #0
 80004f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4619      	mov	r1, r3
 80004fe:	4806      	ldr	r0, [pc, #24]	; (8000518 <MX_TIM2_Init+0xa4>)
 8000500:	f002 f9ce 	bl	80028a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800050a:	f000 f8ad 	bl	8000668 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	3730      	adds	r7, #48	; 0x30
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20001100 	.word	0x20001100

0800051c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <MX_DMA_Init+0x38>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	4a0b      	ldr	r2, [pc, #44]	; (8000554 <MX_DMA_Init+0x38>)
 8000528:	f043 0301 	orr.w	r3, r3, #1
 800052c:	6153      	str	r3, [r2, #20]
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <MX_DMA_Init+0x38>)
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f003 0301 	and.w	r3, r3, #1
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 800053a:	2200      	movs	r2, #0
 800053c:	2105      	movs	r1, #5
 800053e:	2011      	movs	r0, #17
 8000540:	f000 fdb1 	bl	80010a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000544:	2011      	movs	r0, #17
 8000546:	f000 fdca 	bl	80010de <HAL_NVIC_EnableIRQ>

}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40021000 	.word	0x40021000

08000558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b088      	sub	sp, #32
 800055c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	2200      	movs	r2, #0
 8000564:	601a      	str	r2, [r3, #0]
 8000566:	605a      	str	r2, [r3, #4]
 8000568:	609a      	str	r2, [r3, #8]
 800056a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056c:	4b24      	ldr	r3, [pc, #144]	; (8000600 <MX_GPIO_Init+0xa8>)
 800056e:	699b      	ldr	r3, [r3, #24]
 8000570:	4a23      	ldr	r2, [pc, #140]	; (8000600 <MX_GPIO_Init+0xa8>)
 8000572:	f043 0310 	orr.w	r3, r3, #16
 8000576:	6193      	str	r3, [r2, #24]
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <MX_GPIO_Init+0xa8>)
 800057a:	699b      	ldr	r3, [r3, #24]
 800057c:	f003 0310 	and.w	r3, r3, #16
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <MX_GPIO_Init+0xa8>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a1d      	ldr	r2, [pc, #116]	; (8000600 <MX_GPIO_Init+0xa8>)
 800058a:	f043 0320 	orr.w	r3, r3, #32
 800058e:	6193      	str	r3, [r2, #24]
 8000590:	4b1b      	ldr	r3, [pc, #108]	; (8000600 <MX_GPIO_Init+0xa8>)
 8000592:	699b      	ldr	r3, [r3, #24]
 8000594:	f003 0320 	and.w	r3, r3, #32
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059c:	4b18      	ldr	r3, [pc, #96]	; (8000600 <MX_GPIO_Init+0xa8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a17      	ldr	r2, [pc, #92]	; (8000600 <MX_GPIO_Init+0xa8>)
 80005a2:	f043 0304 	orr.w	r3, r3, #4
 80005a6:	6193      	str	r3, [r2, #24]
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <MX_GPIO_Init+0xa8>)
 80005aa:	699b      	ldr	r3, [r3, #24]
 80005ac:	f003 0304 	and.w	r3, r3, #4
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b4:	4b12      	ldr	r3, [pc, #72]	; (8000600 <MX_GPIO_Init+0xa8>)
 80005b6:	699b      	ldr	r3, [r3, #24]
 80005b8:	4a11      	ldr	r2, [pc, #68]	; (8000600 <MX_GPIO_Init+0xa8>)
 80005ba:	f043 0308 	orr.w	r3, r3, #8
 80005be:	6193      	str	r3, [r2, #24]
 80005c0:	4b0f      	ldr	r3, [pc, #60]	; (8000600 <MX_GPIO_Init+0xa8>)
 80005c2:	699b      	ldr	r3, [r3, #24]
 80005c4:	f003 0308 	and.w	r3, r3, #8
 80005c8:	603b      	str	r3, [r7, #0]
 80005ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d2:	480c      	ldr	r0, [pc, #48]	; (8000604 <MX_GPIO_Init+0xac>)
 80005d4:	f001 f84c 	bl	8001670 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80005d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005de:	2301      	movs	r3, #1
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	4804      	ldr	r0, [pc, #16]	; (8000604 <MX_GPIO_Init+0xac>)
 80005f2:	f000 fee3 	bl	80013bc <HAL_GPIO_Init>

}
 80005f6:	bf00      	nop
 80005f8:	3720      	adds	r7, #32
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40021000 	.word	0x40021000
 8000604:	40011000 	.word	0x40011000

08000608 <StartADCTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartADCTask */
void StartADCTask(void const * argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000616:	4803      	ldr	r0, [pc, #12]	; (8000624 <StartADCTask+0x1c>)
 8000618:	f001 f82a 	bl	8001670 <HAL_GPIO_WritePin>
  for(;;)
  {
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
	osDelay(30);
 800061c:	201e      	movs	r0, #30
 800061e:	f002 fa19 	bl	8002a54 <osDelay>
 8000622:	e7fb      	b.n	800061c <StartADCTask+0x14>
 8000624:	40011000 	.word	0x40011000

08000628 <StartMpuTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMpuTask */
void StartMpuTask(void const * argument)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMpuTask */
	//configMpuRegister();
	//HAL_I2C_Master_Receive_DMA(&hi2c1, (uint16_t)(MPU_ADDRESS << 1), buffer, sizeof(buffer));

  /* Infinite loop */
  for(;;)
 8000630:	e7fe      	b.n	8000630 <StartMpuTask+0x8>

08000632 <StartPidSTsk>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPidSTsk */
void StartPidSTsk(void const * argument)
{
 8000632:	b580      	push	{r7, lr}
 8000634:	b082      	sub	sp, #8
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPidSTsk */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800063a:	2001      	movs	r0, #1
 800063c:	f002 fa0a 	bl	8002a54 <osDelay>
 8000640:	e7fb      	b.n	800063a <StartPidSTsk+0x8>
	...

08000644 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a04      	ldr	r2, [pc, #16]	; (8000664 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d101      	bne.n	800065a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000656:	f000 fa43 	bl	8000ae0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800065a:	bf00      	nop
 800065c:	3708      	adds	r7, #8
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40000400 	.word	0x40000400

08000668 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800066c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800066e:	e7fe      	b.n	800066e <Error_Handler+0x6>

08000670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <HAL_MspInit+0x68>)
 8000678:	699b      	ldr	r3, [r3, #24]
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <HAL_MspInit+0x68>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6193      	str	r3, [r2, #24]
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <HAL_MspInit+0x68>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
 800068c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_MspInit+0x68>)
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <HAL_MspInit+0x68>)
 8000694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000698:	61d3      	str	r3, [r2, #28]
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x68>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006a6:	2200      	movs	r2, #0
 80006a8:	210f      	movs	r1, #15
 80006aa:	f06f 0001 	mvn.w	r0, #1
 80006ae:	f000 fcfa 	bl	80010a6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <HAL_MspInit+0x6c>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	4a04      	ldr	r2, [pc, #16]	; (80006dc <HAL_MspInit+0x6c>)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010000 	.word	0x40010000

080006e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b088      	sub	sp, #32
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0310 	add.w	r3, r7, #16
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a14      	ldr	r2, [pc, #80]	; (800074c <HAL_ADC_MspInit+0x6c>)
 80006fc:	4293      	cmp	r3, r2
 80006fe:	d121      	bne.n	8000744 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000700:	4b13      	ldr	r3, [pc, #76]	; (8000750 <HAL_ADC_MspInit+0x70>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	4a12      	ldr	r2, [pc, #72]	; (8000750 <HAL_ADC_MspInit+0x70>)
 8000706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800070a:	6193      	str	r3, [r2, #24]
 800070c:	4b10      	ldr	r3, [pc, #64]	; (8000750 <HAL_ADC_MspInit+0x70>)
 800070e:	699b      	ldr	r3, [r3, #24]
 8000710:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000718:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <HAL_ADC_MspInit+0x70>)
 800071a:	699b      	ldr	r3, [r3, #24]
 800071c:	4a0c      	ldr	r2, [pc, #48]	; (8000750 <HAL_ADC_MspInit+0x70>)
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6193      	str	r3, [r2, #24]
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_ADC_MspInit+0x70>)
 8000726:	699b      	ldr	r3, [r3, #24]
 8000728:	f003 0304 	and.w	r3, r3, #4
 800072c:	60bb      	str	r3, [r7, #8]
 800072e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000730:	23ff      	movs	r3, #255	; 0xff
 8000732:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000734:	2303      	movs	r3, #3
 8000736:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000738:	f107 0310 	add.w	r3, r7, #16
 800073c:	4619      	mov	r1, r3
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <HAL_ADC_MspInit+0x74>)
 8000740:	f000 fe3c 	bl	80013bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000744:	bf00      	nop
 8000746:	3720      	adds	r7, #32
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40012400 	.word	0x40012400
 8000750:	40021000 	.word	0x40021000
 8000754:	40010800 	.word	0x40010800

08000758 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0310 	add.w	r3, r7, #16
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a28      	ldr	r2, [pc, #160]	; (8000814 <HAL_I2C_MspInit+0xbc>)
 8000774:	4293      	cmp	r3, r2
 8000776:	d149      	bne.n	800080c <HAL_I2C_MspInit+0xb4>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000778:	4b27      	ldr	r3, [pc, #156]	; (8000818 <HAL_I2C_MspInit+0xc0>)
 800077a:	699b      	ldr	r3, [r3, #24]
 800077c:	4a26      	ldr	r2, [pc, #152]	; (8000818 <HAL_I2C_MspInit+0xc0>)
 800077e:	f043 0308 	orr.w	r3, r3, #8
 8000782:	6193      	str	r3, [r2, #24]
 8000784:	4b24      	ldr	r3, [pc, #144]	; (8000818 <HAL_I2C_MspInit+0xc0>)
 8000786:	699b      	ldr	r3, [r3, #24]
 8000788:	f003 0308 	and.w	r3, r3, #8
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000790:	23c0      	movs	r3, #192	; 0xc0
 8000792:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000794:	2312      	movs	r3, #18
 8000796:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	4619      	mov	r1, r3
 80007a2:	481e      	ldr	r0, [pc, #120]	; (800081c <HAL_I2C_MspInit+0xc4>)
 80007a4:	f000 fe0a 	bl	80013bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007a8:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <HAL_I2C_MspInit+0xc0>)
 80007aa:	69db      	ldr	r3, [r3, #28]
 80007ac:	4a1a      	ldr	r2, [pc, #104]	; (8000818 <HAL_I2C_MspInit+0xc0>)
 80007ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007b2:	61d3      	str	r3, [r2, #28]
 80007b4:	4b18      	ldr	r3, [pc, #96]	; (8000818 <HAL_I2C_MspInit+0xc0>)
 80007b6:	69db      	ldr	r3, [r3, #28]
 80007b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80007c0:	4b17      	ldr	r3, [pc, #92]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <HAL_I2C_MspInit+0xcc>)
 80007c4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007c6:	4b16      	ldr	r3, [pc, #88]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80007cc:	4b14      	ldr	r3, [pc, #80]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80007d8:	4b11      	ldr	r3, [pc, #68]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 80007e6:	2220      	movs	r2, #32
 80007e8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 80007f2:	f000 fc83 	bl	80010fc <HAL_DMA_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80007fc:	f7ff ff34 	bl	8000668 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 8000804:	639a      	str	r2, [r3, #56]	; 0x38
 8000806:	4a06      	ldr	r2, [pc, #24]	; (8000820 <HAL_I2C_MspInit+0xc8>)
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800080c:	bf00      	nop
 800080e:	3720      	adds	r7, #32
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40005400 	.word	0x40005400
 8000818:	40021000 	.word	0x40021000
 800081c:	40010c00 	.word	0x40010c00
 8000820:	200010b8 	.word	0x200010b8
 8000824:	40020080 	.word	0x40020080

08000828 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	4a40      	ldr	r2, [pc, #256]	; (8000944 <HAL_TIM_Encoder_MspInit+0x11c>)
 8000844:	4293      	cmp	r3, r2
 8000846:	d125      	bne.n	8000894 <HAL_TIM_Encoder_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000848:	4b3f      	ldr	r3, [pc, #252]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a3e      	ldr	r2, [pc, #248]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 800084e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b3c      	ldr	r3, [pc, #240]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800085c:	61bb      	str	r3, [r7, #24]
 800085e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b39      	ldr	r3, [pc, #228]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	4a38      	ldr	r2, [pc, #224]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 8000866:	f043 0304 	orr.w	r3, r3, #4
 800086a:	6193      	str	r3, [r2, #24]
 800086c:	4b36      	ldr	r3, [pc, #216]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	f003 0304 	and.w	r3, r3, #4
 8000874:	617b      	str	r3, [r7, #20]
 8000876:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000878:	f44f 7340 	mov.w	r3, #768	; 0x300
 800087c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	482f      	ldr	r0, [pc, #188]	; (800094c <HAL_TIM_Encoder_MspInit+0x124>)
 800088e:	f000 fd95 	bl	80013bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000892:	e053      	b.n	800093c <HAL_TIM_Encoder_MspInit+0x114>
  else if(htim_encoder->Instance==TIM2)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800089c:	d14e      	bne.n	800093c <HAL_TIM_Encoder_MspInit+0x114>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800089e:	4b2a      	ldr	r3, [pc, #168]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a29      	ldr	r2, [pc, #164]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b27      	ldr	r3, [pc, #156]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	613b      	str	r3, [r7, #16]
 80008b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	4b24      	ldr	r3, [pc, #144]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	4a23      	ldr	r2, [pc, #140]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6193      	str	r3, [r2, #24]
 80008c2:	4b21      	ldr	r3, [pc, #132]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 80008c4:	699b      	ldr	r3, [r3, #24]
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	4b1e      	ldr	r3, [pc, #120]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 80008d0:	699b      	ldr	r3, [r3, #24]
 80008d2:	4a1d      	ldr	r2, [pc, #116]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 80008d4:	f043 0308 	orr.w	r3, r3, #8
 80008d8:	6193      	str	r3, [r2, #24]
 80008da:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <HAL_TIM_Encoder_MspInit+0x120>)
 80008dc:	699b      	ldr	r3, [r3, #24]
 80008de:	f003 0308 	and.w	r3, r3, #8
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4814      	ldr	r0, [pc, #80]	; (800094c <HAL_TIM_Encoder_MspInit+0x124>)
 80008fc:	f000 fd5e 	bl	80013bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000900:	2308      	movs	r3, #8
 8000902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000904:	2300      	movs	r3, #0
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	480f      	ldr	r0, [pc, #60]	; (8000950 <HAL_TIM_Encoder_MspInit+0x128>)
 8000914:	f000 fd52 	bl	80013bc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000918:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <HAL_TIM_Encoder_MspInit+0x12c>)
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800091e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000924:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000928:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 800092c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800092e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000934:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <HAL_TIM_Encoder_MspInit+0x12c>)
 8000938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093a:	6053      	str	r3, [r2, #4]
}
 800093c:	bf00      	nop
 800093e:	3730      	adds	r7, #48	; 0x30
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40012c00 	.word	0x40012c00
 8000948:	40021000 	.word	0x40021000
 800094c:	40010800 	.word	0x40010800
 8000950:	40010c00 	.word	0x40010c00
 8000954:	40010000 	.word	0x40010000

08000958 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08c      	sub	sp, #48	; 0x30
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000964:	2300      	movs	r3, #0
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000968:	2200      	movs	r2, #0
 800096a:	6879      	ldr	r1, [r7, #4]
 800096c:	201d      	movs	r0, #29
 800096e:	f000 fb9a 	bl	80010a6 <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000972:	201d      	movs	r0, #29
 8000974:	f000 fbb3 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000978:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_InitTick+0xa0>)
 800097a:	69db      	ldr	r3, [r3, #28]
 800097c:	4a1e      	ldr	r2, [pc, #120]	; (80009f8 <HAL_InitTick+0xa0>)
 800097e:	f043 0302 	orr.w	r3, r3, #2
 8000982:	61d3      	str	r3, [r2, #28]
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <HAL_InitTick+0xa0>)
 8000986:	69db      	ldr	r3, [r3, #28]
 8000988:	f003 0302 	and.w	r3, r3, #2
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000990:	f107 0210 	add.w	r2, r7, #16
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4611      	mov	r1, r2
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fba2 	bl	80020e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009a0:	f001 fb8c 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 80009a4:	4603      	mov	r3, r0
 80009a6:	005b      	lsls	r3, r3, #1
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009ac:	4a13      	ldr	r2, [pc, #76]	; (80009fc <HAL_InitTick+0xa4>)
 80009ae:	fba2 2303 	umull	r2, r3, r2, r3
 80009b2:	0c9b      	lsrs	r3, r3, #18
 80009b4:	3b01      	subs	r3, #1
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <HAL_InitTick+0xa8>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <HAL_InitTick+0xac>)
 80009bc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <HAL_InitTick+0xa8>)
 80009c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009c4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80009c6:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <HAL_InitTick+0xa8>)
 80009c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009ca:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_InitTick+0xa8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <HAL_InitTick+0xa8>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 80009d8:	4809      	ldr	r0, [pc, #36]	; (8000a00 <HAL_InitTick+0xa8>)
 80009da:	f001 fc87 	bl	80022ec <HAL_TIM_Base_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d104      	bne.n	80009ee <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 80009e4:	4806      	ldr	r0, [pc, #24]	; (8000a00 <HAL_InitTick+0xa8>)
 80009e6:	f001 fcd9 	bl	800239c <HAL_TIM_Base_Start_IT>
 80009ea:	4603      	mov	r3, r0
 80009ec:	e000      	b.n	80009f0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	3730      	adds	r7, #48	; 0x30
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40021000 	.word	0x40021000
 80009fc:	431bde83 	.word	0x431bde83
 8000a00:	2000114c 	.word	0x2000114c
 8000a04:	40000400 	.word	0x40000400

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
	...

08000a34 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <DMA1_Channel7_IRQHandler+0x10>)
 8000a3a:	f000 fbb9 	bl	80011b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	200010b8 	.word	0x200010b8

08000a48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a4c:	4802      	ldr	r0, [pc, #8]	; (8000a58 <TIM3_IRQHandler+0x10>)
 8000a4e:	f001 fd99 	bl	8002584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	2000114c 	.word	0x2000114c

08000a5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	; (8000a9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	; (8000aa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	; (8000aa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	; (8000aa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	; (8000aac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a8e:	f7ff ffe5 	bl	8000a5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f003 f92f 	bl	8003cf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fb73 	bl	8000180 <main>
  bx lr
 8000a9a:	4770      	bx	lr
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000aa4:	08003e1c 	.word	0x08003e1c
  ldr r2, =_sbss
 8000aa8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000aac:	20001198 	.word	0x20001198

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab8:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_Init+0x28>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a07      	ldr	r2, [pc, #28]	; (8000adc <HAL_Init+0x28>)
 8000abe:	f043 0310 	orr.w	r3, r3, #16
 8000ac2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac4:	2003      	movs	r0, #3
 8000ac6:	f000 fae3 	bl	8001090 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aca:	2000      	movs	r0, #0
 8000acc:	f7ff ff44 	bl	8000958 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad0:	f7ff fdce 	bl	8000670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad4:	2300      	movs	r3, #0
}
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40022000 	.word	0x40022000

08000ae0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae4:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x1c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_IncTick+0x20>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4413      	add	r3, r2
 8000af0:	4a03      	ldr	r2, [pc, #12]	; (8000b00 <HAL_IncTick+0x20>)
 8000af2:	6013      	str	r3, [r2, #0]
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bc80      	pop	{r7}
 8000afa:	4770      	bx	lr
 8000afc:	20000008 	.word	0x20000008
 8000b00:	20001194 	.word	0x20001194

08000b04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  return uwTick;
 8000b08:	4b02      	ldr	r3, [pc, #8]	; (8000b14 <HAL_GetTick+0x10>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	20001194 	.word	0x20001194

08000b18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b20:	2300      	movs	r3, #0
 8000b22:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
 8000b38:	e0be      	b.n	8000cb8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	689b      	ldr	r3, [r3, #8]
 8000b3e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d109      	bne.n	8000b5c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff fdc2 	bl	80006e0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f000 f9ab 	bl	8000eb8 <ADC_ConversionStop_Disable>
 8000b62:	4603      	mov	r3, r0
 8000b64:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f040 8099 	bne.w	8000ca6 <HAL_ADC_Init+0x18e>
 8000b74:	7dfb      	ldrb	r3, [r7, #23]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8095 	bne.w	8000ca6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b80:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000b84:	f023 0302 	bic.w	r3, r3, #2
 8000b88:	f043 0202 	orr.w	r2, r3, #2
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000b98:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7b1b      	ldrb	r3, [r3, #12]
 8000b9e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ba0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	4313      	orrs	r3, r2
 8000ba6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	689b      	ldr	r3, [r3, #8]
 8000bac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bb0:	d003      	beq.n	8000bba <HAL_ADC_Init+0xa2>
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d102      	bne.n	8000bc0 <HAL_ADC_Init+0xa8>
 8000bba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bbe:	e000      	b.n	8000bc2 <HAL_ADC_Init+0xaa>
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	4313      	orrs	r3, r2
 8000bc6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	7d1b      	ldrb	r3, [r3, #20]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d119      	bne.n	8000c04 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	7b1b      	ldrb	r3, [r3, #12]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d109      	bne.n	8000bec <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	035a      	lsls	r2, r3, #13
 8000be0:	693b      	ldr	r3, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	e00b      	b.n	8000c04 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000bf0:	f043 0220 	orr.w	r2, r3, #32
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bfc:	f043 0201 	orr.w	r2, r3, #1
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	430a      	orrs	r2, r1
 8000c16:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689a      	ldr	r2, [r3, #8]
 8000c1e:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <HAL_ADC_Init+0x1a8>)
 8000c20:	4013      	ands	r3, r2
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	6812      	ldr	r2, [r2, #0]
 8000c26:	68b9      	ldr	r1, [r7, #8]
 8000c28:	430b      	orrs	r3, r1
 8000c2a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c34:	d003      	beq.n	8000c3e <HAL_ADC_Init+0x126>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d104      	bne.n	8000c48 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	691b      	ldr	r3, [r3, #16]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	051b      	lsls	r3, r3, #20
 8000c46:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c4e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	68fa      	ldr	r2, [r7, #12]
 8000c58:	430a      	orrs	r2, r1
 8000c5a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <HAL_ADC_Init+0x1ac>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	429a      	cmp	r2, r3
 8000c6a:	d10b      	bne.n	8000c84 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c76:	f023 0303 	bic.w	r3, r3, #3
 8000c7a:	f043 0201 	orr.w	r2, r3, #1
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000c82:	e018      	b.n	8000cb6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c88:	f023 0312 	bic.w	r3, r3, #18
 8000c8c:	f043 0210 	orr.w	r2, r3, #16
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	f043 0201 	orr.w	r2, r3, #1
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000ca4:	e007      	b.n	8000cb6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000caa:	f043 0210 	orr.w	r2, r3, #16
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	ffe1f7fd 	.word	0xffe1f7fd
 8000cc4:	ff1f0efe 	.word	0xff1f0efe

08000cc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000cc8:	b480      	push	{r7}
 8000cca:	b085      	sub	sp, #20
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d101      	bne.n	8000ce8 <HAL_ADC_ConfigChannel+0x20>
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	e0dc      	b.n	8000ea2 <HAL_ADC_ConfigChannel+0x1da>
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2201      	movs	r2, #1
 8000cec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b06      	cmp	r3, #6
 8000cf6:	d81c      	bhi.n	8000d32 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685a      	ldr	r2, [r3, #4]
 8000d02:	4613      	mov	r3, r2
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	4413      	add	r3, r2
 8000d08:	3b05      	subs	r3, #5
 8000d0a:	221f      	movs	r2, #31
 8000d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d10:	43db      	mvns	r3, r3
 8000d12:	4019      	ands	r1, r3
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	6818      	ldr	r0, [r3, #0]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	3b05      	subs	r3, #5
 8000d24:	fa00 f203 	lsl.w	r2, r0, r3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d30:	e03c      	b.n	8000dac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685b      	ldr	r3, [r3, #4]
 8000d36:	2b0c      	cmp	r3, #12
 8000d38:	d81c      	bhi.n	8000d74 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685a      	ldr	r2, [r3, #4]
 8000d44:	4613      	mov	r3, r2
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	4413      	add	r3, r2
 8000d4a:	3b23      	subs	r3, #35	; 0x23
 8000d4c:	221f      	movs	r2, #31
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43db      	mvns	r3, r3
 8000d54:	4019      	ands	r1, r3
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	6818      	ldr	r0, [r3, #0]
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	3b23      	subs	r3, #35	; 0x23
 8000d66:	fa00 f203 	lsl.w	r2, r0, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	430a      	orrs	r2, r1
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
 8000d72:	e01b      	b.n	8000dac <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	4613      	mov	r3, r2
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	4413      	add	r3, r2
 8000d84:	3b41      	subs	r3, #65	; 0x41
 8000d86:	221f      	movs	r2, #31
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	4019      	ands	r1, r3
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	6818      	ldr	r0, [r3, #0]
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	4613      	mov	r3, r2
 8000d9a:	009b      	lsls	r3, r3, #2
 8000d9c:	4413      	add	r3, r2
 8000d9e:	3b41      	subs	r3, #65	; 0x41
 8000da0:	fa00 f203 	lsl.w	r2, r0, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	2b09      	cmp	r3, #9
 8000db2:	d91c      	bls.n	8000dee <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	68d9      	ldr	r1, [r3, #12]
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	4613      	mov	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	4413      	add	r3, r2
 8000dc4:	3b1e      	subs	r3, #30
 8000dc6:	2207      	movs	r2, #7
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	4019      	ands	r1, r3
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	6898      	ldr	r0, [r3, #8]
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	4413      	add	r3, r2
 8000dde:	3b1e      	subs	r3, #30
 8000de0:	fa00 f203 	lsl.w	r2, r0, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	430a      	orrs	r2, r1
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	e019      	b.n	8000e22 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	6919      	ldr	r1, [r3, #16]
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	2207      	movs	r2, #7
 8000e00:	fa02 f303 	lsl.w	r3, r2, r3
 8000e04:	43db      	mvns	r3, r3
 8000e06:	4019      	ands	r1, r3
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	6898      	ldr	r0, [r3, #8]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	fa00 f203 	lsl.w	r2, r0, r3
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	430a      	orrs	r2, r1
 8000e20:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2b10      	cmp	r3, #16
 8000e28:	d003      	beq.n	8000e32 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000e2e:	2b11      	cmp	r3, #17
 8000e30:	d132      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a1d      	ldr	r2, [pc, #116]	; (8000eac <HAL_ADC_ConfigChannel+0x1e4>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d125      	bne.n	8000e88 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	689b      	ldr	r3, [r3, #8]
 8000e42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d126      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e58:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2b10      	cmp	r3, #16
 8000e60:	d11a      	bne.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a13      	ldr	r2, [pc, #76]	; (8000eb4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	0c9a      	lsrs	r2, r3, #18
 8000e6e:	4613      	mov	r3, r2
 8000e70:	009b      	lsls	r3, r3, #2
 8000e72:	4413      	add	r3, r2
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e78:	e002      	b.n	8000e80 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d1f9      	bne.n	8000e7a <HAL_ADC_ConfigChannel+0x1b2>
 8000e86:	e007      	b.n	8000e98 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e8c:	f043 0220 	orr.w	r2, r3, #32
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr
 8000eac:	40012400 	.word	0x40012400
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	431bde83 	.word	0x431bde83

08000eb8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689b      	ldr	r3, [r3, #8]
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d12e      	bne.n	8000f30 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f022 0201 	bic.w	r2, r2, #1
 8000ee0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ee2:	f7ff fe0f 	bl	8000b04 <HAL_GetTick>
 8000ee6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000ee8:	e01b      	b.n	8000f22 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000eea:	f7ff fe0b 	bl	8000b04 <HAL_GetTick>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	1ad3      	subs	r3, r2, r3
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d914      	bls.n	8000f22 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d10d      	bne.n	8000f22 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	f043 0210 	orr.w	r2, r3, #16
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	f043 0201 	orr.w	r2, r3, #1
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e007      	b.n	8000f32 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d0dc      	beq.n	8000eea <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bc80      	pop	{r7}
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bc80      	pop	{r7}
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4906      	ldr	r1, [pc, #24]	; (8000fd4 <__NVIC_EnableIRQ+0x34>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	; (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	; (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	bc80      	pop	{r7}
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	; 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	; 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	bc80      	pop	{r7}
 800108e:	4770      	bx	lr

08001090 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff4f 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	4603      	mov	r3, r0
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
 80010b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff64 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ffb2 	bl	800102c <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff81 	bl	8000fd8 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff57 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e043      	b.n	800119a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <HAL_DMA_Init+0xa8>)
 800111a:	4413      	add	r3, r2
 800111c:	4a22      	ldr	r2, [pc, #136]	; (80011a8 <HAL_DMA_Init+0xac>)
 800111e:	fba2 2303 	umull	r2, r3, r2, r3
 8001122:	091b      	lsrs	r3, r3, #4
 8001124:	009a      	lsls	r2, r3, #2
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a1f      	ldr	r2, [pc, #124]	; (80011ac <HAL_DMA_Init+0xb0>)
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2202      	movs	r2, #2
 8001134:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001146:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800114a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001154:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001160:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	695b      	ldr	r3, [r3, #20]
 8001166:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800116c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	4313      	orrs	r3, r2
 8001178:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2200      	movs	r2, #0
 8001186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2201      	movs	r2, #1
 800118c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2200      	movs	r2, #0
 8001194:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	bffdfff8 	.word	0xbffdfff8
 80011a8:	cccccccd 	.word	0xcccccccd
 80011ac:	40020000 	.word	0x40020000

080011b0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	2204      	movs	r2, #4
 80011ce:	409a      	lsls	r2, r3
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d04f      	beq.n	8001278 <HAL_DMA_IRQHandler+0xc8>
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	f003 0304 	and.w	r3, r3, #4
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d04a      	beq.n	8001278 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 0320 	and.w	r3, r3, #32
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d107      	bne.n	8001200 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0204 	bic.w	r2, r2, #4
 80011fe:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a66      	ldr	r2, [pc, #408]	; (80013a0 <HAL_DMA_IRQHandler+0x1f0>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d029      	beq.n	800125e <HAL_DMA_IRQHandler+0xae>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a65      	ldr	r2, [pc, #404]	; (80013a4 <HAL_DMA_IRQHandler+0x1f4>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d022      	beq.n	800125a <HAL_DMA_IRQHandler+0xaa>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a63      	ldr	r2, [pc, #396]	; (80013a8 <HAL_DMA_IRQHandler+0x1f8>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d01a      	beq.n	8001254 <HAL_DMA_IRQHandler+0xa4>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a62      	ldr	r2, [pc, #392]	; (80013ac <HAL_DMA_IRQHandler+0x1fc>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d012      	beq.n	800124e <HAL_DMA_IRQHandler+0x9e>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a60      	ldr	r2, [pc, #384]	; (80013b0 <HAL_DMA_IRQHandler+0x200>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00a      	beq.n	8001248 <HAL_DMA_IRQHandler+0x98>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a5f      	ldr	r2, [pc, #380]	; (80013b4 <HAL_DMA_IRQHandler+0x204>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d102      	bne.n	8001242 <HAL_DMA_IRQHandler+0x92>
 800123c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001240:	e00e      	b.n	8001260 <HAL_DMA_IRQHandler+0xb0>
 8001242:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001246:	e00b      	b.n	8001260 <HAL_DMA_IRQHandler+0xb0>
 8001248:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800124c:	e008      	b.n	8001260 <HAL_DMA_IRQHandler+0xb0>
 800124e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001252:	e005      	b.n	8001260 <HAL_DMA_IRQHandler+0xb0>
 8001254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001258:	e002      	b.n	8001260 <HAL_DMA_IRQHandler+0xb0>
 800125a:	2340      	movs	r3, #64	; 0x40
 800125c:	e000      	b.n	8001260 <HAL_DMA_IRQHandler+0xb0>
 800125e:	2304      	movs	r3, #4
 8001260:	4a55      	ldr	r2, [pc, #340]	; (80013b8 <HAL_DMA_IRQHandler+0x208>)
 8001262:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 8094 	beq.w	8001396 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001276:	e08e      	b.n	8001396 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	2202      	movs	r2, #2
 800127e:	409a      	lsls	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d056      	beq.n	8001336 <HAL_DMA_IRQHandler+0x186>
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	2b00      	cmp	r3, #0
 8001290:	d051      	beq.n	8001336 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0320 	and.w	r3, r3, #32
 800129c:	2b00      	cmp	r3, #0
 800129e:	d10b      	bne.n	80012b8 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f022 020a 	bic.w	r2, r2, #10
 80012ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	2201      	movs	r2, #1
 80012b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a38      	ldr	r2, [pc, #224]	; (80013a0 <HAL_DMA_IRQHandler+0x1f0>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d029      	beq.n	8001316 <HAL_DMA_IRQHandler+0x166>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a37      	ldr	r2, [pc, #220]	; (80013a4 <HAL_DMA_IRQHandler+0x1f4>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d022      	beq.n	8001312 <HAL_DMA_IRQHandler+0x162>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a35      	ldr	r2, [pc, #212]	; (80013a8 <HAL_DMA_IRQHandler+0x1f8>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d01a      	beq.n	800130c <HAL_DMA_IRQHandler+0x15c>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a34      	ldr	r2, [pc, #208]	; (80013ac <HAL_DMA_IRQHandler+0x1fc>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d012      	beq.n	8001306 <HAL_DMA_IRQHandler+0x156>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a32      	ldr	r2, [pc, #200]	; (80013b0 <HAL_DMA_IRQHandler+0x200>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d00a      	beq.n	8001300 <HAL_DMA_IRQHandler+0x150>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a31      	ldr	r2, [pc, #196]	; (80013b4 <HAL_DMA_IRQHandler+0x204>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d102      	bne.n	80012fa <HAL_DMA_IRQHandler+0x14a>
 80012f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012f8:	e00e      	b.n	8001318 <HAL_DMA_IRQHandler+0x168>
 80012fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012fe:	e00b      	b.n	8001318 <HAL_DMA_IRQHandler+0x168>
 8001300:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001304:	e008      	b.n	8001318 <HAL_DMA_IRQHandler+0x168>
 8001306:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130a:	e005      	b.n	8001318 <HAL_DMA_IRQHandler+0x168>
 800130c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001310:	e002      	b.n	8001318 <HAL_DMA_IRQHandler+0x168>
 8001312:	2320      	movs	r3, #32
 8001314:	e000      	b.n	8001318 <HAL_DMA_IRQHandler+0x168>
 8001316:	2302      	movs	r3, #2
 8001318:	4a27      	ldr	r2, [pc, #156]	; (80013b8 <HAL_DMA_IRQHandler+0x208>)
 800131a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001328:	2b00      	cmp	r3, #0
 800132a:	d034      	beq.n	8001396 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001334:	e02f      	b.n	8001396 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	2208      	movs	r2, #8
 800133c:	409a      	lsls	r2, r3
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d028      	beq.n	8001398 <HAL_DMA_IRQHandler+0x1e8>
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b00      	cmp	r3, #0
 800134e:	d023      	beq.n	8001398 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f022 020e 	bic.w	r2, r2, #14
 800135e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001368:	2101      	movs	r1, #1
 800136a:	fa01 f202 	lsl.w	r2, r1, r2
 800136e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2201      	movs	r2, #1
 8001374:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2201      	movs	r2, #1
 800137a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2200      	movs	r2, #0
 8001382:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	2b00      	cmp	r3, #0
 800138c:	d004      	beq.n	8001398 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
    }
  }
  return;
 8001396:	bf00      	nop
 8001398:	bf00      	nop
}
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40020008 	.word	0x40020008
 80013a4:	4002001c 	.word	0x4002001c
 80013a8:	40020030 	.word	0x40020030
 80013ac:	40020044 	.word	0x40020044
 80013b0:	40020058 	.word	0x40020058
 80013b4:	4002006c 	.word	0x4002006c
 80013b8:	40020000 	.word	0x40020000

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	b480      	push	{r7}
 80013be:	b08b      	sub	sp, #44	; 0x2c
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ce:	e127      	b.n	8001620 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013d0:	2201      	movs	r2, #1
 80013d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	69fa      	ldr	r2, [r7, #28]
 80013e0:	4013      	ands	r3, r2
 80013e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e4:	69ba      	ldr	r2, [r7, #24]
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8116 	bne.w	800161a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d034      	beq.n	8001460 <HAL_GPIO_Init+0xa4>
 80013f6:	2b12      	cmp	r3, #18
 80013f8:	d80d      	bhi.n	8001416 <HAL_GPIO_Init+0x5a>
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d02b      	beq.n	8001456 <HAL_GPIO_Init+0x9a>
 80013fe:	2b02      	cmp	r3, #2
 8001400:	d804      	bhi.n	800140c <HAL_GPIO_Init+0x50>
 8001402:	2b00      	cmp	r3, #0
 8001404:	d031      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001406:	2b01      	cmp	r3, #1
 8001408:	d01c      	beq.n	8001444 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800140a:	e048      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800140c:	2b03      	cmp	r3, #3
 800140e:	d043      	beq.n	8001498 <HAL_GPIO_Init+0xdc>
 8001410:	2b11      	cmp	r3, #17
 8001412:	d01b      	beq.n	800144c <HAL_GPIO_Init+0x90>
          break;
 8001414:	e043      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001416:	4a89      	ldr	r2, [pc, #548]	; (800163c <HAL_GPIO_Init+0x280>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d026      	beq.n	800146a <HAL_GPIO_Init+0xae>
 800141c:	4a87      	ldr	r2, [pc, #540]	; (800163c <HAL_GPIO_Init+0x280>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d806      	bhi.n	8001430 <HAL_GPIO_Init+0x74>
 8001422:	4a87      	ldr	r2, [pc, #540]	; (8001640 <HAL_GPIO_Init+0x284>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d020      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001428:	4a86      	ldr	r2, [pc, #536]	; (8001644 <HAL_GPIO_Init+0x288>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d01d      	beq.n	800146a <HAL_GPIO_Init+0xae>
          break;
 800142e:	e036      	b.n	800149e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001430:	4a85      	ldr	r2, [pc, #532]	; (8001648 <HAL_GPIO_Init+0x28c>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d019      	beq.n	800146a <HAL_GPIO_Init+0xae>
 8001436:	4a85      	ldr	r2, [pc, #532]	; (800164c <HAL_GPIO_Init+0x290>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d016      	beq.n	800146a <HAL_GPIO_Init+0xae>
 800143c:	4a84      	ldr	r2, [pc, #528]	; (8001650 <HAL_GPIO_Init+0x294>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0xae>
          break;
 8001442:	e02c      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	623b      	str	r3, [r7, #32]
          break;
 800144a:	e028      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	3304      	adds	r3, #4
 8001452:	623b      	str	r3, [r7, #32]
          break;
 8001454:	e023      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	3308      	adds	r3, #8
 800145c:	623b      	str	r3, [r7, #32]
          break;
 800145e:	e01e      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	330c      	adds	r3, #12
 8001466:	623b      	str	r3, [r7, #32]
          break;
 8001468:	e019      	b.n	800149e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	2b00      	cmp	r3, #0
 8001470:	d102      	bne.n	8001478 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001472:	2304      	movs	r3, #4
 8001474:	623b      	str	r3, [r7, #32]
          break;
 8001476:	e012      	b.n	800149e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001480:	2308      	movs	r3, #8
 8001482:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	611a      	str	r2, [r3, #16]
          break;
 800148a:	e008      	b.n	800149e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800148c:	2308      	movs	r3, #8
 800148e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69fa      	ldr	r2, [r7, #28]
 8001494:	615a      	str	r2, [r3, #20]
          break;
 8001496:	e002      	b.n	800149e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001498:	2300      	movs	r3, #0
 800149a:	623b      	str	r3, [r7, #32]
          break;
 800149c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2bff      	cmp	r3, #255	; 0xff
 80014a2:	d801      	bhi.n	80014a8 <HAL_GPIO_Init+0xec>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	e001      	b.n	80014ac <HAL_GPIO_Init+0xf0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3304      	adds	r3, #4
 80014ac:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	2bff      	cmp	r3, #255	; 0xff
 80014b2:	d802      	bhi.n	80014ba <HAL_GPIO_Init+0xfe>
 80014b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	e002      	b.n	80014c0 <HAL_GPIO_Init+0x104>
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3b08      	subs	r3, #8
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	210f      	movs	r1, #15
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	401a      	ands	r2, r3
 80014d2:	6a39      	ldr	r1, [r7, #32]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	fa01 f303 	lsl.w	r3, r1, r3
 80014da:	431a      	orrs	r2, r3
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8096 	beq.w	800161a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ee:	4b59      	ldr	r3, [pc, #356]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	4a58      	ldr	r2, [pc, #352]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6193      	str	r3, [r2, #24]
 80014fa:	4b56      	ldr	r3, [pc, #344]	; (8001654 <HAL_GPIO_Init+0x298>)
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60bb      	str	r3, [r7, #8]
 8001504:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001506:	4a54      	ldr	r2, [pc, #336]	; (8001658 <HAL_GPIO_Init+0x29c>)
 8001508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	3302      	adds	r3, #2
 800150e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001512:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	220f      	movs	r2, #15
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	68fa      	ldr	r2, [r7, #12]
 8001526:	4013      	ands	r3, r2
 8001528:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4b      	ldr	r2, [pc, #300]	; (800165c <HAL_GPIO_Init+0x2a0>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d013      	beq.n	800155a <HAL_GPIO_Init+0x19e>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a4a      	ldr	r2, [pc, #296]	; (8001660 <HAL_GPIO_Init+0x2a4>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d00d      	beq.n	8001556 <HAL_GPIO_Init+0x19a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a49      	ldr	r2, [pc, #292]	; (8001664 <HAL_GPIO_Init+0x2a8>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d007      	beq.n	8001552 <HAL_GPIO_Init+0x196>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a48      	ldr	r2, [pc, #288]	; (8001668 <HAL_GPIO_Init+0x2ac>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d101      	bne.n	800154e <HAL_GPIO_Init+0x192>
 800154a:	2303      	movs	r3, #3
 800154c:	e006      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 800154e:	2304      	movs	r3, #4
 8001550:	e004      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 8001552:	2302      	movs	r3, #2
 8001554:	e002      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 8001556:	2301      	movs	r3, #1
 8001558:	e000      	b.n	800155c <HAL_GPIO_Init+0x1a0>
 800155a:	2300      	movs	r3, #0
 800155c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155e:	f002 0203 	and.w	r2, r2, #3
 8001562:	0092      	lsls	r2, r2, #2
 8001564:	4093      	lsls	r3, r2
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	4313      	orrs	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800156c:	493a      	ldr	r1, [pc, #232]	; (8001658 <HAL_GPIO_Init+0x29c>)
 800156e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	68fa      	ldr	r2, [r7, #12]
 8001576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d006      	beq.n	8001594 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001588:	681a      	ldr	r2, [r3, #0]
 800158a:	4938      	ldr	r1, [pc, #224]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]
 8001592:	e006      	b.n	80015a2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	43db      	mvns	r3, r3
 800159c:	4933      	ldr	r1, [pc, #204]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800159e:	4013      	ands	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d006      	beq.n	80015bc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015ae:	4b2f      	ldr	r3, [pc, #188]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	492e      	ldr	r1, [pc, #184]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	604b      	str	r3, [r1, #4]
 80015ba:	e006      	b.n	80015ca <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	4929      	ldr	r1, [pc, #164]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015c6:	4013      	ands	r3, r2
 80015c8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d006      	beq.n	80015e4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015d8:	689a      	ldr	r2, [r3, #8]
 80015da:	4924      	ldr	r1, [pc, #144]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015dc:	69bb      	ldr	r3, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	608b      	str	r3, [r1, #8]
 80015e2:	e006      	b.n	80015f2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	43db      	mvns	r3, r3
 80015ec:	491f      	ldr	r1, [pc, #124]	; (800166c <HAL_GPIO_Init+0x2b0>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d006      	beq.n	800160c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015fe:	4b1b      	ldr	r3, [pc, #108]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001600:	68da      	ldr	r2, [r3, #12]
 8001602:	491a      	ldr	r1, [pc, #104]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	4313      	orrs	r3, r2
 8001608:	60cb      	str	r3, [r1, #12]
 800160a:	e006      	b.n	800161a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_GPIO_Init+0x2b0>)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	43db      	mvns	r3, r3
 8001614:	4915      	ldr	r1, [pc, #84]	; (800166c <HAL_GPIO_Init+0x2b0>)
 8001616:	4013      	ands	r3, r2
 8001618:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	3301      	adds	r3, #1
 800161e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001626:	fa22 f303 	lsr.w	r3, r2, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	f47f aed0 	bne.w	80013d0 <HAL_GPIO_Init+0x14>
  }
}
 8001630:	bf00      	nop
 8001632:	372c      	adds	r7, #44	; 0x2c
 8001634:	46bd      	mov	sp, r7
 8001636:	bc80      	pop	{r7}
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	10210000 	.word	0x10210000
 8001640:	10110000 	.word	0x10110000
 8001644:	10120000 	.word	0x10120000
 8001648:	10310000 	.word	0x10310000
 800164c:	10320000 	.word	0x10320000
 8001650:	10220000 	.word	0x10220000
 8001654:	40021000 	.word	0x40021000
 8001658:	40010000 	.word	0x40010000
 800165c:	40010800 	.word	0x40010800
 8001660:	40010c00 	.word	0x40010c00
 8001664:	40011000 	.word	0x40011000
 8001668:	40011400 	.word	0x40011400
 800166c:	40010400 	.word	0x40010400

08001670 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
 800167c:	4613      	mov	r3, r2
 800167e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001680:	787b      	ldrb	r3, [r7, #1]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001686:	887a      	ldrh	r2, [r7, #2]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800168c:	e003      	b.n	8001696 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800168e:	887b      	ldrh	r3, [r7, #2]
 8001690:	041a      	lsls	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	611a      	str	r2, [r3, #16]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr

080016a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e11f      	b.n	80018f2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d106      	bne.n	80016cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff f846 	bl	8000758 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2224      	movs	r2, #36	; 0x24
 80016d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0201 	bic.w	r2, r2, #1
 80016e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001704:	f000 fcda 	bl	80020bc <HAL_RCC_GetPCLK1Freq>
 8001708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4a7b      	ldr	r2, [pc, #492]	; (80018fc <HAL_I2C_Init+0x25c>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d807      	bhi.n	8001724 <HAL_I2C_Init+0x84>
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4a7a      	ldr	r2, [pc, #488]	; (8001900 <HAL_I2C_Init+0x260>)
 8001718:	4293      	cmp	r3, r2
 800171a:	bf94      	ite	ls
 800171c:	2301      	movls	r3, #1
 800171e:	2300      	movhi	r3, #0
 8001720:	b2db      	uxtb	r3, r3
 8001722:	e006      	b.n	8001732 <HAL_I2C_Init+0x92>
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4a77      	ldr	r2, [pc, #476]	; (8001904 <HAL_I2C_Init+0x264>)
 8001728:	4293      	cmp	r3, r2
 800172a:	bf94      	ite	ls
 800172c:	2301      	movls	r3, #1
 800172e:	2300      	movhi	r3, #0
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e0db      	b.n	80018f2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4a72      	ldr	r2, [pc, #456]	; (8001908 <HAL_I2C_Init+0x268>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	0c9b      	lsrs	r3, r3, #18
 8001744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	430a      	orrs	r2, r1
 8001758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a64      	ldr	r2, [pc, #400]	; (80018fc <HAL_I2C_Init+0x25c>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d802      	bhi.n	8001774 <HAL_I2C_Init+0xd4>
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	3301      	adds	r3, #1
 8001772:	e009      	b.n	8001788 <HAL_I2C_Init+0xe8>
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	4a63      	ldr	r2, [pc, #396]	; (800190c <HAL_I2C_Init+0x26c>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	099b      	lsrs	r3, r3, #6
 8001786:	3301      	adds	r3, #1
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6812      	ldr	r2, [r2, #0]
 800178c:	430b      	orrs	r3, r1
 800178e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	69db      	ldr	r3, [r3, #28]
 8001796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800179a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4956      	ldr	r1, [pc, #344]	; (80018fc <HAL_I2C_Init+0x25c>)
 80017a4:	428b      	cmp	r3, r1
 80017a6:	d80d      	bhi.n	80017c4 <HAL_I2C_Init+0x124>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	1e59      	subs	r1, r3, #1
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017bc:	2b04      	cmp	r3, #4
 80017be:	bf38      	it	cc
 80017c0:	2304      	movcc	r3, #4
 80017c2:	e04f      	b.n	8001864 <HAL_I2C_Init+0x1c4>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d111      	bne.n	80017f0 <HAL_I2C_Init+0x150>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1e58      	subs	r0, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	440b      	add	r3, r1
 80017da:	fbb0 f3f3 	udiv	r3, r0, r3
 80017de:	3301      	adds	r3, #1
 80017e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf0c      	ite	eq
 80017e8:	2301      	moveq	r3, #1
 80017ea:	2300      	movne	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	e012      	b.n	8001816 <HAL_I2C_Init+0x176>
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	1e58      	subs	r0, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6859      	ldr	r1, [r3, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	440b      	add	r3, r1
 80017fe:	0099      	lsls	r1, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	fbb0 f3f3 	udiv	r3, r0, r3
 8001806:	3301      	adds	r3, #1
 8001808:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800180c:	2b00      	cmp	r3, #0
 800180e:	bf0c      	ite	eq
 8001810:	2301      	moveq	r3, #1
 8001812:	2300      	movne	r3, #0
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_I2C_Init+0x17e>
 800181a:	2301      	movs	r3, #1
 800181c:	e022      	b.n	8001864 <HAL_I2C_Init+0x1c4>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10e      	bne.n	8001844 <HAL_I2C_Init+0x1a4>
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	1e58      	subs	r0, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6859      	ldr	r1, [r3, #4]
 800182e:	460b      	mov	r3, r1
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	440b      	add	r3, r1
 8001834:	fbb0 f3f3 	udiv	r3, r0, r3
 8001838:	3301      	adds	r3, #1
 800183a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001842:	e00f      	b.n	8001864 <HAL_I2C_Init+0x1c4>
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	1e58      	subs	r0, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	0099      	lsls	r1, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	fbb0 f3f3 	udiv	r3, r0, r3
 800185a:	3301      	adds	r3, #1
 800185c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001860:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001864:	6879      	ldr	r1, [r7, #4]
 8001866:	6809      	ldr	r1, [r1, #0]
 8001868:	4313      	orrs	r3, r2
 800186a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	69da      	ldr	r2, [r3, #28]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a1b      	ldr	r3, [r3, #32]
 800187e:	431a      	orrs	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001892:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6911      	ldr	r1, [r2, #16]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68d2      	ldr	r2, [r2, #12]
 800189e:	4311      	orrs	r1, r2
 80018a0:	687a      	ldr	r2, [r7, #4]
 80018a2:	6812      	ldr	r2, [r2, #0]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695a      	ldr	r2, [r3, #20]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	431a      	orrs	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f042 0201 	orr.w	r2, r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2200      	movs	r2, #0
 80018d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2220      	movs	r2, #32
 80018de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	000186a0 	.word	0x000186a0
 8001900:	001e847f 	.word	0x001e847f
 8001904:	003d08ff 	.word	0x003d08ff
 8001908:	431bde83 	.word	0x431bde83
 800190c:	10624dd3 	.word	0x10624dd3

08001910 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e26c      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	f000 8087 	beq.w	8001a3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001930:	4b92      	ldr	r3, [pc, #584]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 030c 	and.w	r3, r3, #12
 8001938:	2b04      	cmp	r3, #4
 800193a:	d00c      	beq.n	8001956 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800193c:	4b8f      	ldr	r3, [pc, #572]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 030c 	and.w	r3, r3, #12
 8001944:	2b08      	cmp	r3, #8
 8001946:	d112      	bne.n	800196e <HAL_RCC_OscConfig+0x5e>
 8001948:	4b8c      	ldr	r3, [pc, #560]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001954:	d10b      	bne.n	800196e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001956:	4b89      	ldr	r3, [pc, #548]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d06c      	beq.n	8001a3c <HAL_RCC_OscConfig+0x12c>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d168      	bne.n	8001a3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e246      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x76>
 8001978:	4b80      	ldr	r3, [pc, #512]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a7f      	ldr	r2, [pc, #508]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 800197e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001982:	6013      	str	r3, [r2, #0]
 8001984:	e02e      	b.n	80019e4 <HAL_RCC_OscConfig+0xd4>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x98>
 800198e:	4b7b      	ldr	r3, [pc, #492]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a7a      	ldr	r2, [pc, #488]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001994:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b78      	ldr	r3, [pc, #480]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a77      	ldr	r2, [pc, #476]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e01d      	b.n	80019e4 <HAL_RCC_OscConfig+0xd4>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019b0:	d10c      	bne.n	80019cc <HAL_RCC_OscConfig+0xbc>
 80019b2:	4b72      	ldr	r3, [pc, #456]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a71      	ldr	r2, [pc, #452]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	4b6f      	ldr	r3, [pc, #444]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a6e      	ldr	r2, [pc, #440]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c8:	6013      	str	r3, [r2, #0]
 80019ca:	e00b      	b.n	80019e4 <HAL_RCC_OscConfig+0xd4>
 80019cc:	4b6b      	ldr	r3, [pc, #428]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a6a      	ldr	r2, [pc, #424]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b68      	ldr	r3, [pc, #416]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a67      	ldr	r2, [pc, #412]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 80019de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d013      	beq.n	8001a14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff f88a 	bl	8000b04 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f4:	f7ff f886 	bl	8000b04 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b64      	cmp	r3, #100	; 0x64
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e1fa      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a06:	4b5d      	ldr	r3, [pc, #372]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0xe4>
 8001a12:	e014      	b.n	8001a3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a14:	f7ff f876 	bl	8000b04 <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a1a:	e008      	b.n	8001a2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a1c:	f7ff f872 	bl	8000b04 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	2b64      	cmp	r3, #100	; 0x64
 8001a28:	d901      	bls.n	8001a2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	e1e6      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a2e:	4b53      	ldr	r3, [pc, #332]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f0      	bne.n	8001a1c <HAL_RCC_OscConfig+0x10c>
 8001a3a:	e000      	b.n	8001a3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d063      	beq.n	8001b12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a4a:	4b4c      	ldr	r3, [pc, #304]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d00b      	beq.n	8001a6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001a56:	4b49      	ldr	r3, [pc, #292]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 030c 	and.w	r3, r3, #12
 8001a5e:	2b08      	cmp	r3, #8
 8001a60:	d11c      	bne.n	8001a9c <HAL_RCC_OscConfig+0x18c>
 8001a62:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d116      	bne.n	8001a9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a6e:	4b43      	ldr	r3, [pc, #268]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x176>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d001      	beq.n	8001a86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e1ba      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a86:	4b3d      	ldr	r3, [pc, #244]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4939      	ldr	r1, [pc, #228]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a9a:	e03a      	b.n	8001b12 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d020      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001aa4:	4b36      	ldr	r3, [pc, #216]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f82b 	bl	8000b04 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f827 	bl	8000b04 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e19b      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac4:	4b2d      	ldr	r3, [pc, #180]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	00db      	lsls	r3, r3, #3
 8001ade:	4927      	ldr	r1, [pc, #156]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	600b      	str	r3, [r1, #0]
 8001ae4:	e015      	b.n	8001b12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae6:	4b26      	ldr	r3, [pc, #152]	; (8001b80 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aec:	f7ff f80a 	bl	8000b04 <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af4:	f7ff f806 	bl	8000b04 <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e17a      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b06:	4b1d      	ldr	r3, [pc, #116]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d1f0      	bne.n	8001af4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 0308 	and.w	r3, r3, #8
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d03a      	beq.n	8001b94 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d019      	beq.n	8001b5a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b26:	4b17      	ldr	r3, [pc, #92]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b2c:	f7fe ffea 	bl	8000b04 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b34:	f7fe ffe6 	bl	8000b04 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e15a      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_RCC_OscConfig+0x26c>)
 8001b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001b52:	2001      	movs	r0, #1
 8001b54:	f000 faf6 	bl	8002144 <RCC_Delay>
 8001b58:	e01c      	b.n	8001b94 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	; (8001b84 <HAL_RCC_OscConfig+0x274>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b60:	f7fe ffd0 	bl	8000b04 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b66:	e00f      	b.n	8001b88 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b68:	f7fe ffcc 	bl	8000b04 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d908      	bls.n	8001b88 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e140      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	42420000 	.word	0x42420000
 8001b84:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b88:	4b9e      	ldr	r3, [pc, #632]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d1e9      	bne.n	8001b68 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 80a6 	beq.w	8001cee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ba6:	4b97      	ldr	r3, [pc, #604]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001ba8:	69db      	ldr	r3, [r3, #28]
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10d      	bne.n	8001bce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb2:	4b94      	ldr	r3, [pc, #592]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001bb4:	69db      	ldr	r3, [r3, #28]
 8001bb6:	4a93      	ldr	r2, [pc, #588]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	61d3      	str	r3, [r2, #28]
 8001bbe:	4b91      	ldr	r3, [pc, #580]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc6:	60bb      	str	r3, [r7, #8]
 8001bc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bce:	4b8e      	ldr	r3, [pc, #568]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d118      	bne.n	8001c0c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bda:	4b8b      	ldr	r3, [pc, #556]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a8a      	ldr	r2, [pc, #552]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be6:	f7fe ff8d 	bl	8000b04 <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bee:	f7fe ff89 	bl	8000b04 <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b64      	cmp	r3, #100	; 0x64
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0fd      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c00:	4b81      	ldr	r3, [pc, #516]	; (8001e08 <HAL_RCC_OscConfig+0x4f8>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d106      	bne.n	8001c22 <HAL_RCC_OscConfig+0x312>
 8001c14:	4b7b      	ldr	r3, [pc, #492]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	4a7a      	ldr	r2, [pc, #488]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6213      	str	r3, [r2, #32]
 8001c20:	e02d      	b.n	8001c7e <HAL_RCC_OscConfig+0x36e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10c      	bne.n	8001c44 <HAL_RCC_OscConfig+0x334>
 8001c2a:	4b76      	ldr	r3, [pc, #472]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c2c:	6a1b      	ldr	r3, [r3, #32]
 8001c2e:	4a75      	ldr	r2, [pc, #468]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	6213      	str	r3, [r2, #32]
 8001c36:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c38:	6a1b      	ldr	r3, [r3, #32]
 8001c3a:	4a72      	ldr	r2, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c3c:	f023 0304 	bic.w	r3, r3, #4
 8001c40:	6213      	str	r3, [r2, #32]
 8001c42:	e01c      	b.n	8001c7e <HAL_RCC_OscConfig+0x36e>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	2b05      	cmp	r3, #5
 8001c4a:	d10c      	bne.n	8001c66 <HAL_RCC_OscConfig+0x356>
 8001c4c:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4a6c      	ldr	r2, [pc, #432]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c52:	f043 0304 	orr.w	r3, r3, #4
 8001c56:	6213      	str	r3, [r2, #32]
 8001c58:	4b6a      	ldr	r3, [pc, #424]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	4a69      	ldr	r2, [pc, #420]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6213      	str	r3, [r2, #32]
 8001c64:	e00b      	b.n	8001c7e <HAL_RCC_OscConfig+0x36e>
 8001c66:	4b67      	ldr	r3, [pc, #412]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	4a66      	ldr	r2, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	6213      	str	r3, [r2, #32]
 8001c72:	4b64      	ldr	r3, [pc, #400]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	4a63      	ldr	r2, [pc, #396]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001c78:	f023 0304 	bic.w	r3, r3, #4
 8001c7c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d015      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c86:	f7fe ff3d 	bl	8000b04 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8c:	e00a      	b.n	8001ca4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8e:	f7fe ff39 	bl	8000b04 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d901      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ca0:	2303      	movs	r3, #3
 8001ca2:	e0ab      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca4:	4b57      	ldr	r3, [pc, #348]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0ee      	beq.n	8001c8e <HAL_RCC_OscConfig+0x37e>
 8001cb0:	e014      	b.n	8001cdc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cb2:	f7fe ff27 	bl	8000b04 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7fe ff23 	bl	8000b04 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e095      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cd0:	4b4c      	ldr	r3, [pc, #304]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001cd2:	6a1b      	ldr	r3, [r3, #32]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1ee      	bne.n	8001cba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001cdc:	7dfb      	ldrb	r3, [r7, #23]
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d105      	bne.n	8001cee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce2:	4b48      	ldr	r3, [pc, #288]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001ce4:	69db      	ldr	r3, [r3, #28]
 8001ce6:	4a47      	ldr	r2, [pc, #284]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001ce8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8081 	beq.w	8001dfa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf8:	4b42      	ldr	r3, [pc, #264]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f003 030c 	and.w	r3, r3, #12
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d061      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d146      	bne.n	8001d9a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0c:	4b3f      	ldr	r3, [pc, #252]	; (8001e0c <HAL_RCC_OscConfig+0x4fc>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7fe fef7 	bl	8000b04 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe fef3 	bl	8000b04 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e067      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2c:	4b35      	ldr	r3, [pc, #212]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1f0      	bne.n	8001d1a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d40:	d108      	bne.n	8001d54 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001d42:	4b30      	ldr	r3, [pc, #192]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	492d      	ldr	r1, [pc, #180]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d54:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6a19      	ldr	r1, [r3, #32]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d64:	430b      	orrs	r3, r1
 8001d66:	4927      	ldr	r1, [pc, #156]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d6c:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <HAL_RCC_OscConfig+0x4fc>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d72:	f7fe fec7 	bl	8000b04 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7a:	f7fe fec3 	bl	8000b04 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e037      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d8c:	4b1d      	ldr	r3, [pc, #116]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x46a>
 8001d98:	e02f      	b.n	8001dfa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_RCC_OscConfig+0x4fc>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe feb0 	bl	8000b04 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001da8:	f7fe feac 	bl	8000b04 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e020      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1f0      	bne.n	8001da8 <HAL_RCC_OscConfig+0x498>
 8001dc6:	e018      	b.n	8001dfa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69db      	ldr	r3, [r3, #28]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e013      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dd4:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x4f4>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d106      	bne.n	8001df6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d001      	beq.n	8001dfa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40007000 	.word	0x40007000
 8001e0c:	42420060 	.word	0x42420060

08001e10 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0d0      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b6a      	ldr	r3, [pc, #424]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d910      	bls.n	8001e54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b67      	ldr	r3, [pc, #412]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0207 	bic.w	r2, r3, #7
 8001e3a:	4965      	ldr	r1, [pc, #404]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e42:	4b63      	ldr	r3, [pc, #396]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d001      	beq.n	8001e54 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e0b8      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0304 	and.w	r3, r3, #4
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e6c:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	4a58      	ldr	r2, [pc, #352]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001e76:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0308 	and.w	r3, r3, #8
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e84:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a52      	ldr	r2, [pc, #328]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e8a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001e8e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e90:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	494d      	ldr	r1, [pc, #308]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d040      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d107      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d115      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e07f      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	4b41      	ldr	r3, [pc, #260]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e073      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	4b3d      	ldr	r3, [pc, #244]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e06b      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4936      	ldr	r1, [pc, #216]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f00:	f7fe fe00 	bl	8000b04 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7fe fdfc 	bl	8000b04 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e053      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b2d      	ldr	r3, [pc, #180]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 020c 	and.w	r2, r3, #12
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1eb      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f30:	4b27      	ldr	r3, [pc, #156]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d210      	bcs.n	8001f60 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f023 0207 	bic.w	r2, r3, #7
 8001f46:	4922      	ldr	r1, [pc, #136]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f4e:	4b20      	ldr	r3, [pc, #128]	; (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e032      	b.n	8001fc6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d008      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f6c:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4916      	ldr	r1, [pc, #88]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d009      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f8a:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	00db      	lsls	r3, r3, #3
 8001f98:	490e      	ldr	r1, [pc, #56]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f9e:	f000 f821 	bl	8001fe4 <HAL_RCC_GetSysClockFreq>
 8001fa2:	4601      	mov	r1, r0
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb0:	5cd3      	ldrb	r3, [r2, r3]
 8001fb2:	fa21 f303 	lsr.w	r3, r1, r3
 8001fb6:	4a09      	ldr	r2, [pc, #36]	; (8001fdc <HAL_RCC_ClockConfig+0x1cc>)
 8001fb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001fba:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <HAL_RCC_ClockConfig+0x1d0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7fe fcca 	bl	8000958 <HAL_InitTick>

  return HAL_OK;
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40022000 	.word	0x40022000
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	08003dfc 	.word	0x08003dfc
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	20000004 	.word	0x20000004

08001fe4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fe4:	b490      	push	{r4, r7}
 8001fe6:	b08a      	sub	sp, #40	; 0x28
 8001fe8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001fea:	4b2a      	ldr	r3, [pc, #168]	; (8002094 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001fec:	1d3c      	adds	r4, r7, #4
 8001fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001ff0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ff6:	881b      	ldrh	r3, [r3, #0]
 8001ff8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61fb      	str	r3, [r7, #28]
 8001ffe:	2300      	movs	r3, #0
 8002000:	61bb      	str	r3, [r7, #24]
 8002002:	2300      	movs	r3, #0
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800200a:	2300      	movs	r3, #0
 800200c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800200e:	4b23      	ldr	r3, [pc, #140]	; (800209c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 030c 	and.w	r3, r3, #12
 800201a:	2b04      	cmp	r3, #4
 800201c:	d002      	beq.n	8002024 <HAL_RCC_GetSysClockFreq+0x40>
 800201e:	2b08      	cmp	r3, #8
 8002020:	d003      	beq.n	800202a <HAL_RCC_GetSysClockFreq+0x46>
 8002022:	e02d      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002024:	4b1e      	ldr	r3, [pc, #120]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002026:	623b      	str	r3, [r7, #32]
      break;
 8002028:	e02d      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	0c9b      	lsrs	r3, r3, #18
 800202e:	f003 030f 	and.w	r3, r3, #15
 8002032:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002036:	4413      	add	r3, r2
 8002038:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800203c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d013      	beq.n	8002070 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_RCC_GetSysClockFreq+0xb8>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	0c5b      	lsrs	r3, r3, #17
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002056:	4413      	add	r3, r2
 8002058:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800205c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002062:	fb02 f203 	mul.w	r2, r2, r3
 8002066:	69bb      	ldr	r3, [r7, #24]
 8002068:	fbb2 f3f3 	udiv	r3, r2, r3
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
 800206e:	e004      	b.n	800207a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	4a0c      	ldr	r2, [pc, #48]	; (80020a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002074:	fb02 f303 	mul.w	r3, r2, r3
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800207a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207c:	623b      	str	r3, [r7, #32]
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002082:	623b      	str	r3, [r7, #32]
      break;
 8002084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002086:	6a3b      	ldr	r3, [r7, #32]
}
 8002088:	4618      	mov	r0, r3
 800208a:	3728      	adds	r7, #40	; 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bc90      	pop	{r4, r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	08003de0 	.word	0x08003de0
 8002098:	08003df0 	.word	0x08003df0
 800209c:	40021000 	.word	0x40021000
 80020a0:	007a1200 	.word	0x007a1200
 80020a4:	003d0900 	.word	0x003d0900

080020a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020ac:	4b02      	ldr	r3, [pc, #8]	; (80020b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80020ae:	681b      	ldr	r3, [r3, #0]
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	20000000 	.word	0x20000000

080020bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020c0:	f7ff fff2 	bl	80020a8 <HAL_RCC_GetHCLKFreq>
 80020c4:	4601      	mov	r1, r0
 80020c6:	4b05      	ldr	r3, [pc, #20]	; (80020dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	0a1b      	lsrs	r3, r3, #8
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	4a03      	ldr	r2, [pc, #12]	; (80020e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80020d8:	4618      	mov	r0, r3
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08003e0c 	.word	0x08003e0c

080020e4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	220f      	movs	r2, #15
 80020f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <HAL_RCC_GetClockConfig+0x58>)
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f003 0203 	and.w	r2, r3, #3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_RCC_GetClockConfig+0x58>)
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_RCC_GetClockConfig+0x58>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_RCC_GetClockConfig+0x58>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	08db      	lsrs	r3, r3, #3
 800211e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetClockConfig+0x5c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0207 	and.w	r2, r3, #7
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr
 800213c:	40021000 	.word	0x40021000
 8002140:	40022000 	.word	0x40022000

08002144 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800214c:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <RCC_Delay+0x34>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a0a      	ldr	r2, [pc, #40]	; (800217c <RCC_Delay+0x38>)
 8002152:	fba2 2303 	umull	r2, r3, r2, r3
 8002156:	0a5b      	lsrs	r3, r3, #9
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	fb02 f303 	mul.w	r3, r2, r3
 800215e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002160:	bf00      	nop
  }
  while (Delay --);
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	1e5a      	subs	r2, r3, #1
 8002166:	60fa      	str	r2, [r7, #12]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f9      	bne.n	8002160 <RCC_Delay+0x1c>
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20000000 	.word	0x20000000
 800217c:	10624dd3 	.word	0x10624dd3

08002180 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d07d      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800219c:	2300      	movs	r3, #0
 800219e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a0:	4b4f      	ldr	r3, [pc, #316]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10d      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b4c      	ldr	r3, [pc, #304]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	4a4b      	ldr	r2, [pc, #300]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b6:	61d3      	str	r3, [r2, #28]
 80021b8:	4b49      	ldr	r3, [pc, #292]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021c4:	2301      	movs	r3, #1
 80021c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d118      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021d4:	4b43      	ldr	r3, [pc, #268]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a42      	ldr	r2, [pc, #264]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e0:	f7fe fc90 	bl	8000b04 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e6:	e008      	b.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e8:	f7fe fc8c 	bl	8000b04 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	; 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e06d      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b3a      	ldr	r3, [pc, #232]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002206:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800220e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d02e      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	429a      	cmp	r2, r3
 8002222:	d027      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002224:	4b2e      	ldr	r3, [pc, #184]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800222e:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002230:	2201      	movs	r2, #1
 8002232:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002234:	4b2c      	ldr	r3, [pc, #176]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800223a:	4a29      	ldr	r2, [pc, #164]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	2b00      	cmp	r3, #0
 8002248:	d014      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224a:	f7fe fc5b 	bl	8000b04 <HAL_GetTick>
 800224e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002250:	e00a      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002252:	f7fe fc57 	bl	8000b04 <HAL_GetTick>
 8002256:	4602      	mov	r2, r0
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002260:	4293      	cmp	r3, r2
 8002262:	d901      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e036      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002268:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d0ee      	beq.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002274:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4917      	ldr	r1, [pc, #92]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002282:	4313      	orrs	r3, r2
 8002284:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002286:	7dfb      	ldrb	r3, [r7, #23]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d105      	bne.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800228e:	69db      	ldr	r3, [r3, #28]
 8002290:	4a13      	ldr	r2, [pc, #76]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002292:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002296:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d008      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	490b      	ldr	r1, [pc, #44]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0310 	and.w	r3, r3, #16
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	68db      	ldr	r3, [r3, #12]
 80022ce:	4904      	ldr	r1, [pc, #16]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
 80022e8:	42420440 	.word	0x42420440

080022ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e041      	b.n	8002382 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d106      	bne.n	8002318 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 f839 	bl	800238a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2202      	movs	r2, #2
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3304      	adds	r3, #4
 8002328:	4619      	mov	r1, r3
 800232a:	4610      	mov	r0, r2
 800232c:	f000 fa56 	bl	80027dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2201      	movs	r2, #1
 8002364:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2201      	movs	r2, #1
 800236c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2201      	movs	r2, #1
 8002374:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2201      	movs	r2, #1
 800237c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d001      	beq.n	80023b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e03a      	b.n	800242a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f042 0201 	orr.w	r2, r2, #1
 80023ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a18      	ldr	r2, [pc, #96]	; (8002434 <HAL_TIM_Base_Start_IT+0x98>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d00e      	beq.n	80023f4 <HAL_TIM_Base_Start_IT+0x58>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023de:	d009      	beq.n	80023f4 <HAL_TIM_Base_Start_IT+0x58>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a14      	ldr	r2, [pc, #80]	; (8002438 <HAL_TIM_Base_Start_IT+0x9c>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d004      	beq.n	80023f4 <HAL_TIM_Base_Start_IT+0x58>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a13      	ldr	r2, [pc, #76]	; (800243c <HAL_TIM_Base_Start_IT+0xa0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d111      	bne.n	8002418 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f003 0307 	and.w	r3, r3, #7
 80023fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	2b06      	cmp	r3, #6
 8002404:	d010      	beq.n	8002428 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f042 0201 	orr.w	r2, r2, #1
 8002414:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002416:	e007      	b.n	8002428 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40012c00 	.word	0x40012c00
 8002438:	40000400 	.word	0x40000400
 800243c:	40000800 	.word	0x40000800

08002440 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e093      	b.n	800257c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b00      	cmp	r3, #0
 800245e:	d106      	bne.n	800246e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f7fe f9dd 	bl	8000828 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2202      	movs	r2, #2
 8002472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002484:	f023 0307 	bic.w	r3, r3, #7
 8002488:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3304      	adds	r3, #4
 8002492:	4619      	mov	r1, r3
 8002494:	4610      	mov	r0, r2
 8002496:	f000 f9a1 	bl	80027dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	697a      	ldr	r2, [r7, #20]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024c2:	f023 0303 	bic.w	r3, r3, #3
 80024c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	689a      	ldr	r2, [r3, #8]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	021b      	lsls	r3, r3, #8
 80024d2:	4313      	orrs	r3, r2
 80024d4:	693a      	ldr	r2, [r7, #16]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80024e0:	f023 030c 	bic.w	r3, r3, #12
 80024e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80024ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	68da      	ldr	r2, [r3, #12]
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	4313      	orrs	r3, r2
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	4313      	orrs	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	011a      	lsls	r2, r3, #4
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	031b      	lsls	r3, r3, #12
 8002510:	4313      	orrs	r3, r2
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800251e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	695b      	ldr	r3, [r3, #20]
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	4313      	orrs	r3, r2
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	693a      	ldr	r2, [r7, #16]
 8002540:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	68fa      	ldr	r2, [r7, #12]
 8002548:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2201      	movs	r2, #1
 8002566:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d122      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	f003 0302 	and.w	r3, r3, #2
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d11b      	bne.n	80025e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0202 	mvn.w	r2, #2
 80025b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f000 f8ed 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 80025cc:	e005      	b.n	80025da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8e0 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f000 f8ef 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	f003 0304 	and.w	r3, r3, #4
 80025ea:	2b04      	cmp	r3, #4
 80025ec:	d122      	bne.n	8002634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d11b      	bne.n	8002634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f06f 0204 	mvn.w	r2, #4
 8002604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2202      	movs	r2, #2
 800260a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699b      	ldr	r3, [r3, #24]
 8002612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8c3 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 8002620:	e005      	b.n	800262e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8b6 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f8c5 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b08      	cmp	r3, #8
 8002640:	d122      	bne.n	8002688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0308 	and.w	r3, r3, #8
 800264c:	2b08      	cmp	r3, #8
 800264e:	d11b      	bne.n	8002688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0208 	mvn.w	r2, #8
 8002658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2204      	movs	r2, #4
 800265e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	69db      	ldr	r3, [r3, #28]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f000 f899 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 8002674:	e005      	b.n	8002682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f88c 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f89b 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b10      	cmp	r3, #16
 8002694:	d122      	bne.n	80026dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f003 0310 	and.w	r3, r3, #16
 80026a0:	2b10      	cmp	r3, #16
 80026a2:	d11b      	bne.n	80026dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f06f 0210 	mvn.w	r2, #16
 80026ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2208      	movs	r2, #8
 80026b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f86f 	bl	80027a6 <HAL_TIM_IC_CaptureCallback>
 80026c8:	e005      	b.n	80026d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f862 	bl	8002794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f000 f871 	bl	80027b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	691b      	ldr	r3, [r3, #16]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d10e      	bne.n	8002708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d107      	bne.n	8002708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f06f 0201 	mvn.w	r2, #1
 8002700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fd ff9e 	bl	8000644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002712:	2b80      	cmp	r3, #128	; 0x80
 8002714:	d10e      	bne.n	8002734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002720:	2b80      	cmp	r3, #128	; 0x80
 8002722:	d107      	bne.n	8002734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800272c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f91d 	bl	800296e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273e:	2b40      	cmp	r3, #64	; 0x40
 8002740:	d10e      	bne.n	8002760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d107      	bne.n	8002760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f835 	bl	80027ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0320 	and.w	r3, r3, #32
 800276a:	2b20      	cmp	r3, #32
 800276c:	d10e      	bne.n	800278c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0320 	and.w	r3, r3, #32
 8002778:	2b20      	cmp	r3, #32
 800277a:	d107      	bne.n	800278c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0220 	mvn.w	r2, #32
 8002784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f8e8 	bl	800295c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800278c:	bf00      	nop
 800278e:	3708      	adds	r7, #8
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}

08002794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027dc:	b480      	push	{r7}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a29      	ldr	r2, [pc, #164]	; (8002894 <TIM_Base_SetConfig+0xb8>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d00b      	beq.n	800280c <TIM_Base_SetConfig+0x30>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027fa:	d007      	beq.n	800280c <TIM_Base_SetConfig+0x30>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a26      	ldr	r2, [pc, #152]	; (8002898 <TIM_Base_SetConfig+0xbc>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <TIM_Base_SetConfig+0x30>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a25      	ldr	r2, [pc, #148]	; (800289c <TIM_Base_SetConfig+0xc0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d108      	bne.n	800281e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a1c      	ldr	r2, [pc, #112]	; (8002894 <TIM_Base_SetConfig+0xb8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d00b      	beq.n	800283e <TIM_Base_SetConfig+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282c:	d007      	beq.n	800283e <TIM_Base_SetConfig+0x62>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a19      	ldr	r2, [pc, #100]	; (8002898 <TIM_Base_SetConfig+0xbc>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d003      	beq.n	800283e <TIM_Base_SetConfig+0x62>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a18      	ldr	r2, [pc, #96]	; (800289c <TIM_Base_SetConfig+0xc0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d108      	bne.n	8002850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	4313      	orrs	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a07      	ldr	r2, [pc, #28]	; (8002894 <TIM_Base_SetConfig+0xb8>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d103      	bne.n	8002884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	691a      	ldr	r2, [r3, #16]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2201      	movs	r2, #1
 8002888:	615a      	str	r2, [r3, #20]
}
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	40012c00 	.word	0x40012c00
 8002898:	40000400 	.word	0x40000400
 800289c:	40000800 	.word	0x40000800

080028a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d101      	bne.n	80028b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80028b4:	2302      	movs	r3, #2
 80028b6:	e046      	b.n	8002946 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a16      	ldr	r2, [pc, #88]	; (8002950 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00e      	beq.n	800291a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002904:	d009      	beq.n	800291a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d004      	beq.n	800291a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d10c      	bne.n	8002934 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002920:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	68ba      	ldr	r2, [r7, #8]
 8002928:	4313      	orrs	r3, r2
 800292a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68ba      	ldr	r2, [r7, #8]
 8002932:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2200      	movs	r2, #0
 8002940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	bc80      	pop	{r7}
 800294e:	4770      	bx	lr
 8002950:	40012c00 	.word	0x40012c00
 8002954:	40000400 	.word	0x40000400
 8002958:	40000800 	.word	0x40000800

0800295c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	bc80      	pop	{r7}
 800296c:	4770      	bx	lr

0800296e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr

08002980 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	4603      	mov	r3, r0
 8002988:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800298a:	2300      	movs	r3, #0
 800298c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800298e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002992:	2b84      	cmp	r3, #132	; 0x84
 8002994:	d005      	beq.n	80029a2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002996:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	4413      	add	r3, r2
 800299e:	3303      	adds	r3, #3
 80029a0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bc80      	pop	{r7}
 80029ac:	4770      	bx	lr

080029ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80029b2:	f000 facd 	bl	8002f50 <vTaskStartScheduler>
  
  return osOK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}

080029bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80029bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af04      	add	r7, sp, #16
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d020      	beq.n	8002a10 <osThreadCreate+0x54>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01c      	beq.n	8002a10 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685c      	ldr	r4, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681d      	ldr	r5, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	691e      	ldr	r6, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff ffc9 	bl	8002980 <makeFreeRtosPriority>
 80029ee:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80029f8:	9202      	str	r2, [sp, #8]
 80029fa:	9301      	str	r3, [sp, #4]
 80029fc:	9100      	str	r1, [sp, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	4632      	mov	r2, r6
 8002a02:	4629      	mov	r1, r5
 8002a04:	4620      	mov	r0, r4
 8002a06:	f000 f8e8 	bl	8002bda <xTaskCreateStatic>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e01c      	b.n	8002a4a <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685c      	ldr	r4, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a1c:	b29e      	uxth	r6, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ffab 	bl	8002980 <makeFreeRtosPriority>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	f107 030c 	add.w	r3, r7, #12
 8002a30:	9301      	str	r3, [sp, #4]
 8002a32:	9200      	str	r2, [sp, #0]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	4632      	mov	r2, r6
 8002a38:	4629      	mov	r1, r5
 8002a3a:	4620      	mov	r0, r4
 8002a3c:	f000 f926 	bl	8002c8c <xTaskCreate>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d001      	beq.n	8002a4a <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002a46:	2300      	movs	r3, #0
 8002a48:	e000      	b.n	8002a4c <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a54 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <osDelay+0x16>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	e000      	b.n	8002a6c <osDelay+0x18>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f000 fa3b 	bl	8002ee8 <vTaskDelay>
  
  return osOK;
 8002a72:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3710      	adds	r7, #16
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f103 0208 	add.w	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f04f 32ff 	mov.w	r2, #4294967295
 8002a94:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f103 0208 	add.w	r2, r3, #8
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f103 0208 	add.w	r2, r3, #8
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ab0:	bf00      	nop
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bc80      	pop	{r7}
 8002ad0:	4770      	bx	lr

08002ad2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	687a      	ldr	r2, [r7, #4]
 8002b02:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	1c5a      	adds	r2, r3, #1
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	601a      	str	r2, [r3, #0]
}
 8002b0e:	bf00      	nop
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2e:	d103      	bne.n	8002b38 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	60fb      	str	r3, [r7, #12]
 8002b36:	e00c      	b.n	8002b52 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3308      	adds	r3, #8
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	e002      	b.n	8002b46 <vListInsert+0x2e>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d2f6      	bcs.n	8002b40 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	685a      	ldr	r2, [r3, #4]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	68fa      	ldr	r2, [r7, #12]
 8002b66:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	601a      	str	r2, [r3, #0]
}
 8002b7e:	bf00      	nop
 8002b80:	3714      	adds	r7, #20
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc80      	pop	{r7}
 8002b86:	4770      	bx	lr

08002b88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b085      	sub	sp, #20
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	691b      	ldr	r3, [r3, #16]
 8002b94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	6892      	ldr	r2, [r2, #8]
 8002b9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	6852      	ldr	r2, [r2, #4]
 8002ba8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d103      	bne.n	8002bbc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689a      	ldr	r2, [r3, #8]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	1e5a      	subs	r2, r3, #1
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3714      	adds	r7, #20
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bc80      	pop	{r7}
 8002bd8:	4770      	bx	lr

08002bda <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b08e      	sub	sp, #56	; 0x38
 8002bde:	af04      	add	r7, sp, #16
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d109      	bne.n	8002c02 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	623b      	str	r3, [r7, #32]
 8002c00:	e7fe      	b.n	8002c00 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8002c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d109      	bne.n	8002c1c <xTaskCreateStatic+0x42>
 8002c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c0c:	f383 8811 	msr	BASEPRI, r3
 8002c10:	f3bf 8f6f 	isb	sy
 8002c14:	f3bf 8f4f 	dsb	sy
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e7fe      	b.n	8002c1a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002c1c:	2354      	movs	r3, #84	; 0x54
 8002c1e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	2b54      	cmp	r3, #84	; 0x54
 8002c24:	d009      	beq.n	8002c3a <xTaskCreateStatic+0x60>
 8002c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2a:	f383 8811 	msr	BASEPRI, r3
 8002c2e:	f3bf 8f6f 	isb	sy
 8002c32:	f3bf 8f4f 	dsb	sy
 8002c36:	61bb      	str	r3, [r7, #24]
 8002c38:	e7fe      	b.n	8002c38 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d01e      	beq.n	8002c7e <xTaskCreateStatic+0xa4>
 8002c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d01b      	beq.n	8002c7e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002c58:	2300      	movs	r3, #0
 8002c5a:	9303      	str	r3, [sp, #12]
 8002c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5e:	9302      	str	r3, [sp, #8]
 8002c60:	f107 0314 	add.w	r3, r7, #20
 8002c64:	9301      	str	r3, [sp, #4]
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f850 	bl	8002d16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002c78:	f000 f8cc 	bl	8002e14 <prvAddNewTaskToReadyList>
 8002c7c:	e001      	b.n	8002c82 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002c82:	697b      	ldr	r3, [r7, #20]
	}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3728      	adds	r7, #40	; 0x28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	; 0x30
 8002c90:	af04      	add	r7, sp, #16
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002c9c:	88fb      	ldrh	r3, [r7, #6]
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f000 fe53 	bl	800394c <pvPortMalloc>
 8002ca6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d00e      	beq.n	8002ccc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002cae:	2054      	movs	r0, #84	; 0x54
 8002cb0:	f000 fe4c 	bl	800394c <pvPortMalloc>
 8002cb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8002cc2:	e005      	b.n	8002cd0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002cc4:	6978      	ldr	r0, [r7, #20]
 8002cc6:	f000 ff03 	bl	8003ad0 <vPortFree>
 8002cca:	e001      	b.n	8002cd0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d017      	beq.n	8002d06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002cde:	88fa      	ldrh	r2, [r7, #6]
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	9303      	str	r3, [sp, #12]
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	9302      	str	r3, [sp, #8]
 8002ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cea:	9301      	str	r3, [sp, #4]
 8002cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f80e 	bl	8002d16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002cfa:	69f8      	ldr	r0, [r7, #28]
 8002cfc:	f000 f88a 	bl	8002e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002d00:	2301      	movs	r3, #1
 8002d02:	61bb      	str	r3, [r7, #24]
 8002d04:	e002      	b.n	8002d0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002d06:	f04f 33ff 	mov.w	r3, #4294967295
 8002d0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
	}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3720      	adds	r7, #32
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b088      	sub	sp, #32
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f023 0307 	bic.w	r3, r3, #7
 8002d3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d009      	beq.n	8002d5c <prvInitialiseNewTask+0x46>
 8002d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	617b      	str	r3, [r7, #20]
 8002d5a:	e7fe      	b.n	8002d5a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	e012      	b.n	8002d88 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4413      	add	r3, r2
 8002d68:	7819      	ldrb	r1, [r3, #0]
 8002d6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	3334      	adds	r3, #52	; 0x34
 8002d72:	460a      	mov	r2, r1
 8002d74:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8002d76:	68ba      	ldr	r2, [r7, #8]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3301      	adds	r3, #1
 8002d86:	61fb      	str	r3, [r7, #28]
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	2b0f      	cmp	r3, #15
 8002d8c:	d9e9      	bls.n	8002d62 <prvInitialiseNewTask+0x4c>
 8002d8e:	e000      	b.n	8002d92 <prvInitialiseNewTask+0x7c>
		{
			break;
 8002d90:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	2b06      	cmp	r3, #6
 8002d9e:	d901      	bls.n	8002da4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002da0:	2306      	movs	r3, #6
 8002da2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002dae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002db0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db2:	2200      	movs	r2, #0
 8002db4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db8:	3304      	adds	r3, #4
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff fe7d 	bl	8002aba <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc2:	3318      	adds	r3, #24
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff fe78 	bl	8002aba <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	f1c3 0207 	rsb	r2, r3, #7
 8002dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de2:	2200      	movs	r2, #0
 8002de4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002dee:	683a      	ldr	r2, [r7, #0]
 8002df0:	68f9      	ldr	r1, [r7, #12]
 8002df2:	69b8      	ldr	r0, [r7, #24]
 8002df4:	f000 fc06 	bl	8003604 <pxPortInitialiseStack>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8002dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e08:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e0a:	bf00      	nop
 8002e0c:	3720      	adds	r7, #32
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002e1c:	f000 fcdc 	bl	80037d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002e20:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <prvAddNewTaskToReadyList+0xb8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	3301      	adds	r3, #1
 8002e26:	4a29      	ldr	r2, [pc, #164]	; (8002ecc <prvAddNewTaskToReadyList+0xb8>)
 8002e28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002e2a:	4b29      	ldr	r3, [pc, #164]	; (8002ed0 <prvAddNewTaskToReadyList+0xbc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002e32:	4a27      	ldr	r2, [pc, #156]	; (8002ed0 <prvAddNewTaskToReadyList+0xbc>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002e38:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <prvAddNewTaskToReadyList+0xb8>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d110      	bne.n	8002e62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002e40:	f000 fabc 	bl	80033bc <prvInitialiseTaskLists>
 8002e44:	e00d      	b.n	8002e62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002e46:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <prvAddNewTaskToReadyList+0xc0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d109      	bne.n	8002e62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002e4e:	4b20      	ldr	r3, [pc, #128]	; (8002ed0 <prvAddNewTaskToReadyList+0xbc>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d802      	bhi.n	8002e62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002e5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ed0 <prvAddNewTaskToReadyList+0xbc>)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002e62:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <prvAddNewTaskToReadyList+0xc4>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	3301      	adds	r3, #1
 8002e68:	4a1b      	ldr	r2, [pc, #108]	; (8002ed8 <prvAddNewTaskToReadyList+0xc4>)
 8002e6a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	2201      	movs	r2, #1
 8002e72:	409a      	lsls	r2, r3
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <prvAddNewTaskToReadyList+0xc8>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	4a18      	ldr	r2, [pc, #96]	; (8002edc <prvAddNewTaskToReadyList+0xc8>)
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4a15      	ldr	r2, [pc, #84]	; (8002ee0 <prvAddNewTaskToReadyList+0xcc>)
 8002e8c:	441a      	add	r2, r3
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	3304      	adds	r3, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f7ff fe1c 	bl	8002ad2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e9a:	f000 fccb 	bl	8003834 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ed4 <prvAddNewTaskToReadyList+0xc0>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00e      	beq.n	8002ec4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ea6:	4b0a      	ldr	r3, [pc, #40]	; (8002ed0 <prvAddNewTaskToReadyList+0xbc>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d207      	bcs.n	8002ec4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002eb4:	4b0b      	ldr	r3, [pc, #44]	; (8002ee4 <prvAddNewTaskToReadyList+0xd0>)
 8002eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000380 	.word	0x20000380
 8002ed0:	20000280 	.word	0x20000280
 8002ed4:	2000038c 	.word	0x2000038c
 8002ed8:	2000039c 	.word	0x2000039c
 8002edc:	20000388 	.word	0x20000388
 8002ee0:	20000284 	.word	0x20000284
 8002ee4:	e000ed04 	.word	0xe000ed04

08002ee8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002efa:	4b13      	ldr	r3, [pc, #76]	; (8002f48 <vTaskDelay+0x60>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d009      	beq.n	8002f16 <vTaskDelay+0x2e>
 8002f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	60bb      	str	r3, [r7, #8]
 8002f14:	e7fe      	b.n	8002f14 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002f16:	f000 f879 	bl	800300c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f1a:	2100      	movs	r1, #0
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 fb0b 	bl	8003538 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002f22:	f000 f881 	bl	8003028 <xTaskResumeAll>
 8002f26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d107      	bne.n	8002f3e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8002f2e:	4b07      	ldr	r3, [pc, #28]	; (8002f4c <vTaskDelay+0x64>)
 8002f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f34:	601a      	str	r2, [r3, #0]
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002f3e:	bf00      	nop
 8002f40:	3710      	adds	r7, #16
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200003a8 	.word	0x200003a8
 8002f4c:	e000ed04 	.word	0xe000ed04

08002f50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b08a      	sub	sp, #40	; 0x28
 8002f54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002f56:	2300      	movs	r3, #0
 8002f58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002f5e:	463a      	mov	r2, r7
 8002f60:	1d39      	adds	r1, r7, #4
 8002f62:	f107 0308 	add.w	r3, r7, #8
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd f8f2 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002f6c:	6839      	ldr	r1, [r7, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68ba      	ldr	r2, [r7, #8]
 8002f72:	9202      	str	r2, [sp, #8]
 8002f74:	9301      	str	r3, [sp, #4]
 8002f76:	2300      	movs	r3, #0
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	460a      	mov	r2, r1
 8002f7e:	491d      	ldr	r1, [pc, #116]	; (8002ff4 <vTaskStartScheduler+0xa4>)
 8002f80:	481d      	ldr	r0, [pc, #116]	; (8002ff8 <vTaskStartScheduler+0xa8>)
 8002f82:	f7ff fe2a 	bl	8002bda <xTaskCreateStatic>
 8002f86:	4602      	mov	r2, r0
 8002f88:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <vTaskStartScheduler+0xac>)
 8002f8a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <vTaskStartScheduler+0xac>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d002      	beq.n	8002f9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002f94:	2301      	movs	r3, #1
 8002f96:	617b      	str	r3, [r7, #20]
 8002f98:	e001      	b.n	8002f9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d115      	bne.n	8002fd0 <vTaskStartScheduler+0x80>
 8002fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002fb6:	4b12      	ldr	r3, [pc, #72]	; (8003000 <vTaskStartScheduler+0xb0>)
 8002fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002fbc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002fbe:	4b11      	ldr	r3, [pc, #68]	; (8003004 <vTaskStartScheduler+0xb4>)
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002fc4:	4b10      	ldr	r3, [pc, #64]	; (8003008 <vTaskStartScheduler+0xb8>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002fca:	f000 fb95 	bl	80036f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002fce:	e00d      	b.n	8002fec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d109      	bne.n	8002fec <vTaskStartScheduler+0x9c>
 8002fd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fdc:	f383 8811 	msr	BASEPRI, r3
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	f3bf 8f4f 	dsb	sy
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	e7fe      	b.n	8002fea <vTaskStartScheduler+0x9a>
}
 8002fec:	bf00      	nop
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	08003df4 	.word	0x08003df4
 8002ff8:	0800338d 	.word	0x0800338d
 8002ffc:	200003a4 	.word	0x200003a4
 8003000:	200003a0 	.word	0x200003a0
 8003004:	2000038c 	.word	0x2000038c
 8003008:	20000384 	.word	0x20000384

0800300c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003010:	4b04      	ldr	r3, [pc, #16]	; (8003024 <vTaskSuspendAll+0x18>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	3301      	adds	r3, #1
 8003016:	4a03      	ldr	r2, [pc, #12]	; (8003024 <vTaskSuspendAll+0x18>)
 8003018:	6013      	str	r3, [r2, #0]
}
 800301a:	bf00      	nop
 800301c:	46bd      	mov	sp, r7
 800301e:	bc80      	pop	{r7}
 8003020:	4770      	bx	lr
 8003022:	bf00      	nop
 8003024:	200003a8 	.word	0x200003a8

08003028 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003032:	2300      	movs	r3, #0
 8003034:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <xTaskResumeAll+0x114>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <xTaskResumeAll+0x2a>
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	e7fe      	b.n	8003050 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003052:	f000 fbc1 	bl	80037d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <xTaskResumeAll+0x114>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	3b01      	subs	r3, #1
 800305c:	4a37      	ldr	r2, [pc, #220]	; (800313c <xTaskResumeAll+0x114>)
 800305e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003060:	4b36      	ldr	r3, [pc, #216]	; (800313c <xTaskResumeAll+0x114>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d161      	bne.n	800312c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003068:	4b35      	ldr	r3, [pc, #212]	; (8003140 <xTaskResumeAll+0x118>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d05d      	beq.n	800312c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003070:	e02e      	b.n	80030d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003072:	4b34      	ldr	r3, [pc, #208]	; (8003144 <xTaskResumeAll+0x11c>)
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	3318      	adds	r3, #24
 800307e:	4618      	mov	r0, r3
 8003080:	f7ff fd82 	bl	8002b88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	3304      	adds	r3, #4
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff fd7d 	bl	8002b88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003092:	2201      	movs	r2, #1
 8003094:	409a      	lsls	r2, r3
 8003096:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <xTaskResumeAll+0x120>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4313      	orrs	r3, r2
 800309c:	4a2a      	ldr	r2, [pc, #168]	; (8003148 <xTaskResumeAll+0x120>)
 800309e:	6013      	str	r3, [r2, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	4a27      	ldr	r2, [pc, #156]	; (800314c <xTaskResumeAll+0x124>)
 80030ae:	441a      	add	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3304      	adds	r3, #4
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f7ff fd0b 	bl	8002ad2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	4b23      	ldr	r3, [pc, #140]	; (8003150 <xTaskResumeAll+0x128>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80030ca:	4b22      	ldr	r3, [pc, #136]	; (8003154 <xTaskResumeAll+0x12c>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80030d0:	4b1c      	ldr	r3, [pc, #112]	; (8003144 <xTaskResumeAll+0x11c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1cc      	bne.n	8003072 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80030de:	f000 fa07 	bl	80034f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <xTaskResumeAll+0x130>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d010      	beq.n	8003110 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80030ee:	f000 f837 	bl	8003160 <xTaskIncrementTick>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d002      	beq.n	80030fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80030f8:	4b16      	ldr	r3, [pc, #88]	; (8003154 <xTaskResumeAll+0x12c>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3b01      	subs	r3, #1
 8003102:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d1f1      	bne.n	80030ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <xTaskResumeAll+0x130>)
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003110:	4b10      	ldr	r3, [pc, #64]	; (8003154 <xTaskResumeAll+0x12c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d009      	beq.n	800312c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003118:	2301      	movs	r3, #1
 800311a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800311c:	4b0f      	ldr	r3, [pc, #60]	; (800315c <xTaskResumeAll+0x134>)
 800311e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800312c:	f000 fb82 	bl	8003834 <vPortExitCritical>

	return xAlreadyYielded;
 8003130:	68bb      	ldr	r3, [r7, #8]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	200003a8 	.word	0x200003a8
 8003140:	20000380 	.word	0x20000380
 8003144:	20000340 	.word	0x20000340
 8003148:	20000388 	.word	0x20000388
 800314c:	20000284 	.word	0x20000284
 8003150:	20000280 	.word	0x20000280
 8003154:	20000394 	.word	0x20000394
 8003158:	20000390 	.word	0x20000390
 800315c:	e000ed04 	.word	0xe000ed04

08003160 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316a:	4b50      	ldr	r3, [pc, #320]	; (80032ac <xTaskIncrementTick+0x14c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f040 808c 	bne.w	800328c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003174:	4b4e      	ldr	r3, [pc, #312]	; (80032b0 <xTaskIncrementTick+0x150>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3301      	adds	r3, #1
 800317a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800317c:	4a4c      	ldr	r2, [pc, #304]	; (80032b0 <xTaskIncrementTick+0x150>)
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d11f      	bne.n	80031c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003188:	4b4a      	ldr	r3, [pc, #296]	; (80032b4 <xTaskIncrementTick+0x154>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <xTaskIncrementTick+0x46>
 8003192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003196:	f383 8811 	msr	BASEPRI, r3
 800319a:	f3bf 8f6f 	isb	sy
 800319e:	f3bf 8f4f 	dsb	sy
 80031a2:	603b      	str	r3, [r7, #0]
 80031a4:	e7fe      	b.n	80031a4 <xTaskIncrementTick+0x44>
 80031a6:	4b43      	ldr	r3, [pc, #268]	; (80032b4 <xTaskIncrementTick+0x154>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]
 80031ac:	4b42      	ldr	r3, [pc, #264]	; (80032b8 <xTaskIncrementTick+0x158>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a40      	ldr	r2, [pc, #256]	; (80032b4 <xTaskIncrementTick+0x154>)
 80031b2:	6013      	str	r3, [r2, #0]
 80031b4:	4a40      	ldr	r2, [pc, #256]	; (80032b8 <xTaskIncrementTick+0x158>)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b40      	ldr	r3, [pc, #256]	; (80032bc <xTaskIncrementTick+0x15c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	3301      	adds	r3, #1
 80031c0:	4a3e      	ldr	r2, [pc, #248]	; (80032bc <xTaskIncrementTick+0x15c>)
 80031c2:	6013      	str	r3, [r2, #0]
 80031c4:	f000 f994 	bl	80034f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80031c8:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <xTaskIncrementTick+0x160>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	693a      	ldr	r2, [r7, #16]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d34d      	bcc.n	800326e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80031d2:	4b38      	ldr	r3, [pc, #224]	; (80032b4 <xTaskIncrementTick+0x154>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <xTaskIncrementTick+0x80>
 80031dc:	2301      	movs	r3, #1
 80031de:	e000      	b.n	80031e2 <xTaskIncrementTick+0x82>
 80031e0:	2300      	movs	r3, #0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d004      	beq.n	80031f0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031e6:	4b36      	ldr	r3, [pc, #216]	; (80032c0 <xTaskIncrementTick+0x160>)
 80031e8:	f04f 32ff 	mov.w	r2, #4294967295
 80031ec:	601a      	str	r2, [r3, #0]
					break;
 80031ee:	e03e      	b.n	800326e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031f0:	4b30      	ldr	r3, [pc, #192]	; (80032b4 <xTaskIncrementTick+0x154>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	429a      	cmp	r2, r3
 8003206:	d203      	bcs.n	8003210 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003208:	4a2d      	ldr	r2, [pc, #180]	; (80032c0 <xTaskIncrementTick+0x160>)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6013      	str	r3, [r2, #0]
						break;
 800320e:	e02e      	b.n	800326e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	3304      	adds	r3, #4
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fcb7 	bl	8002b88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	2b00      	cmp	r3, #0
 8003220:	d004      	beq.n	800322c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003222:	68bb      	ldr	r3, [r7, #8]
 8003224:	3318      	adds	r3, #24
 8003226:	4618      	mov	r0, r3
 8003228:	f7ff fcae 	bl	8002b88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	2201      	movs	r2, #1
 8003232:	409a      	lsls	r2, r3
 8003234:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <xTaskIncrementTick+0x164>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4313      	orrs	r3, r2
 800323a:	4a22      	ldr	r2, [pc, #136]	; (80032c4 <xTaskIncrementTick+0x164>)
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003242:	4613      	mov	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4413      	add	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <xTaskIncrementTick+0x168>)
 800324c:	441a      	add	r2, r3
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3304      	adds	r3, #4
 8003252:	4619      	mov	r1, r3
 8003254:	4610      	mov	r0, r2
 8003256:	f7ff fc3c 	bl	8002ad2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325e:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <xTaskIncrementTick+0x16c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	429a      	cmp	r2, r3
 8003266:	d3b4      	bcc.n	80031d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003268:	2301      	movs	r3, #1
 800326a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800326c:	e7b1      	b.n	80031d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800326e:	4b17      	ldr	r3, [pc, #92]	; (80032cc <xTaskIncrementTick+0x16c>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	4914      	ldr	r1, [pc, #80]	; (80032c8 <xTaskIncrementTick+0x168>)
 8003276:	4613      	mov	r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	4413      	add	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	440b      	add	r3, r1
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d907      	bls.n	8003296 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8003286:	2301      	movs	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
 800328a:	e004      	b.n	8003296 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800328c:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <xTaskIncrementTick+0x170>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	4a0f      	ldr	r2, [pc, #60]	; (80032d0 <xTaskIncrementTick+0x170>)
 8003294:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003296:	4b0f      	ldr	r3, [pc, #60]	; (80032d4 <xTaskIncrementTick+0x174>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800329e:	2301      	movs	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80032a2:	697b      	ldr	r3, [r7, #20]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	200003a8 	.word	0x200003a8
 80032b0:	20000384 	.word	0x20000384
 80032b4:	20000338 	.word	0x20000338
 80032b8:	2000033c 	.word	0x2000033c
 80032bc:	20000398 	.word	0x20000398
 80032c0:	200003a0 	.word	0x200003a0
 80032c4:	20000388 	.word	0x20000388
 80032c8:	20000284 	.word	0x20000284
 80032cc:	20000280 	.word	0x20000280
 80032d0:	20000390 	.word	0x20000390
 80032d4:	20000394 	.word	0x20000394

080032d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032de:	4b26      	ldr	r3, [pc, #152]	; (8003378 <vTaskSwitchContext+0xa0>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80032e6:	4b25      	ldr	r3, [pc, #148]	; (800337c <vTaskSwitchContext+0xa4>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80032ec:	e03e      	b.n	800336c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80032ee:	4b23      	ldr	r3, [pc, #140]	; (800337c <vTaskSwitchContext+0xa4>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80032f4:	4b22      	ldr	r3, [pc, #136]	; (8003380 <vTaskSwitchContext+0xa8>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003302:	7afb      	ldrb	r3, [r7, #11]
 8003304:	f1c3 031f 	rsb	r3, r3, #31
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	491e      	ldr	r1, [pc, #120]	; (8003384 <vTaskSwitchContext+0xac>)
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d109      	bne.n	8003332 <vTaskSwitchContext+0x5a>
	__asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	607b      	str	r3, [r7, #4]
 8003330:	e7fe      	b.n	8003330 <vTaskSwitchContext+0x58>
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4a11      	ldr	r2, [pc, #68]	; (8003384 <vTaskSwitchContext+0xac>)
 800333e:	4413      	add	r3, r2
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	3308      	adds	r3, #8
 8003354:	429a      	cmp	r2, r3
 8003356:	d104      	bne.n	8003362 <vTaskSwitchContext+0x8a>
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	685a      	ldr	r2, [r3, #4]
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	605a      	str	r2, [r3, #4]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <vTaskSwitchContext+0xb0>)
 800336a:	6013      	str	r3, [r2, #0]
}
 800336c:	bf00      	nop
 800336e:	371c      	adds	r7, #28
 8003370:	46bd      	mov	sp, r7
 8003372:	bc80      	pop	{r7}
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	200003a8 	.word	0x200003a8
 800337c:	20000394 	.word	0x20000394
 8003380:	20000388 	.word	0x20000388
 8003384:	20000284 	.word	0x20000284
 8003388:	20000280 	.word	0x20000280

0800338c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003394:	f000 f852 	bl	800343c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <prvIdleTask+0x28>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d9f9      	bls.n	8003394 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <prvIdleTask+0x2c>)
 80033a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033b0:	e7f0      	b.n	8003394 <prvIdleTask+0x8>
 80033b2:	bf00      	nop
 80033b4:	20000284 	.word	0x20000284
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	e00c      	b.n	80033e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4a12      	ldr	r2, [pc, #72]	; (800341c <prvInitialiseTaskLists+0x60>)
 80033d4:	4413      	add	r3, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fb50 	bl	8002a7c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3301      	adds	r3, #1
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d9ef      	bls.n	80033c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80033e8:	480d      	ldr	r0, [pc, #52]	; (8003420 <prvInitialiseTaskLists+0x64>)
 80033ea:	f7ff fb47 	bl	8002a7c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80033ee:	480d      	ldr	r0, [pc, #52]	; (8003424 <prvInitialiseTaskLists+0x68>)
 80033f0:	f7ff fb44 	bl	8002a7c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80033f4:	480c      	ldr	r0, [pc, #48]	; (8003428 <prvInitialiseTaskLists+0x6c>)
 80033f6:	f7ff fb41 	bl	8002a7c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80033fa:	480c      	ldr	r0, [pc, #48]	; (800342c <prvInitialiseTaskLists+0x70>)
 80033fc:	f7ff fb3e 	bl	8002a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003400:	480b      	ldr	r0, [pc, #44]	; (8003430 <prvInitialiseTaskLists+0x74>)
 8003402:	f7ff fb3b 	bl	8002a7c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <prvInitialiseTaskLists+0x78>)
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <prvInitialiseTaskLists+0x64>)
 800340a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <prvInitialiseTaskLists+0x7c>)
 800340e:	4a05      	ldr	r2, [pc, #20]	; (8003424 <prvInitialiseTaskLists+0x68>)
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000284 	.word	0x20000284
 8003420:	20000310 	.word	0x20000310
 8003424:	20000324 	.word	0x20000324
 8003428:	20000340 	.word	0x20000340
 800342c:	20000354 	.word	0x20000354
 8003430:	2000036c 	.word	0x2000036c
 8003434:	20000338 	.word	0x20000338
 8003438:	2000033c 	.word	0x2000033c

0800343c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003442:	e019      	b.n	8003478 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003444:	f000 f9c8 	bl	80037d8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003448:	4b0f      	ldr	r3, [pc, #60]	; (8003488 <prvCheckTasksWaitingTermination+0x4c>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4618      	mov	r0, r3
 8003456:	f7ff fb97 	bl	8002b88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <prvCheckTasksWaitingTermination+0x50>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3b01      	subs	r3, #1
 8003460:	4a0a      	ldr	r2, [pc, #40]	; (800348c <prvCheckTasksWaitingTermination+0x50>)
 8003462:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003464:	4b0a      	ldr	r3, [pc, #40]	; (8003490 <prvCheckTasksWaitingTermination+0x54>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3b01      	subs	r3, #1
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <prvCheckTasksWaitingTermination+0x54>)
 800346c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800346e:	f000 f9e1 	bl	8003834 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f80e 	bl	8003494 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <prvCheckTasksWaitingTermination+0x54>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e1      	bne.n	8003444 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003480:	bf00      	nop
 8003482:	3708      	adds	r7, #8
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	20000354 	.word	0x20000354
 800348c:	20000380 	.word	0x20000380
 8003490:	20000368 	.word	0x20000368

08003494 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003494:	b580      	push	{r7, lr}
 8003496:	b084      	sub	sp, #16
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d108      	bne.n	80034b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 fb10 	bl	8003ad0 <vPortFree>
				vPortFree( pxTCB );
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fb0d 	bl	8003ad0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034b6:	e017      	b.n	80034e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d103      	bne.n	80034ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 fb04 	bl	8003ad0 <vPortFree>
	}
 80034c8:	e00e      	b.n	80034e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d009      	beq.n	80034e8 <prvDeleteTCB+0x54>
 80034d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d8:	f383 8811 	msr	BASEPRI, r3
 80034dc:	f3bf 8f6f 	isb	sy
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	e7fe      	b.n	80034e6 <prvDeleteTCB+0x52>
	}
 80034e8:	bf00      	nop
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034f6:	4b0e      	ldr	r3, [pc, #56]	; (8003530 <prvResetNextTaskUnblockTime+0x40>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d101      	bne.n	8003504 <prvResetNextTaskUnblockTime+0x14>
 8003500:	2301      	movs	r3, #1
 8003502:	e000      	b.n	8003506 <prvResetNextTaskUnblockTime+0x16>
 8003504:	2300      	movs	r3, #0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d004      	beq.n	8003514 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <prvResetNextTaskUnblockTime+0x44>)
 800350c:	f04f 32ff 	mov.w	r2, #4294967295
 8003510:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003512:	e008      	b.n	8003526 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <prvResetNextTaskUnblockTime+0x40>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <prvResetNextTaskUnblockTime+0x44>)
 8003524:	6013      	str	r3, [r2, #0]
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	bc80      	pop	{r7}
 800352e:	4770      	bx	lr
 8003530:	20000338 	.word	0x20000338
 8003534:	200003a0 	.word	0x200003a0

08003538 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003548:	4b28      	ldr	r3, [pc, #160]	; (80035ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	3304      	adds	r3, #4
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fb1a 	bl	8002b88 <uxListRemove>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800355a:	4b24      	ldr	r3, [pc, #144]	; (80035ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003560:	2201      	movs	r2, #1
 8003562:	fa02 f303 	lsl.w	r3, r2, r3
 8003566:	43da      	mvns	r2, r3
 8003568:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4013      	ands	r3, r2
 800356e:	4a20      	ldr	r2, [pc, #128]	; (80035f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003570:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003578:	d10a      	bne.n	8003590 <prvAddCurrentTaskToDelayedList+0x58>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003580:	4b1a      	ldr	r3, [pc, #104]	; (80035ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3304      	adds	r3, #4
 8003586:	4619      	mov	r1, r3
 8003588:	481a      	ldr	r0, [pc, #104]	; (80035f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800358a:	f7ff faa2 	bl	8002ad2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800358e:	e026      	b.n	80035de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68ba      	ldr	r2, [r7, #8]
 800359e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d209      	bcs.n	80035bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035a8:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3304      	adds	r3, #4
 80035b2:	4619      	mov	r1, r3
 80035b4:	4610      	mov	r0, r2
 80035b6:	f7ff faaf 	bl	8002b18 <vListInsert>
}
 80035ba:	e010      	b.n	80035de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	3304      	adds	r3, #4
 80035c6:	4619      	mov	r1, r3
 80035c8:	4610      	mov	r0, r2
 80035ca:	f7ff faa5 	bl	8002b18 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80035ce:	4b0c      	ldr	r3, [pc, #48]	; (8003600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	68ba      	ldr	r2, [r7, #8]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d202      	bcs.n	80035de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80035d8:	4a09      	ldr	r2, [pc, #36]	; (8003600 <prvAddCurrentTaskToDelayedList+0xc8>)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	6013      	str	r3, [r2, #0]
}
 80035de:	bf00      	nop
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000384 	.word	0x20000384
 80035ec:	20000280 	.word	0x20000280
 80035f0:	20000388 	.word	0x20000388
 80035f4:	2000036c 	.word	0x2000036c
 80035f8:	2000033c 	.word	0x2000033c
 80035fc:	20000338 	.word	0x20000338
 8003600:	200003a0 	.word	0x200003a0

08003604 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003604:	b480      	push	{r7}
 8003606:	b085      	sub	sp, #20
 8003608:	af00      	add	r7, sp, #0
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	60b9      	str	r1, [r7, #8]
 800360e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	3b04      	subs	r3, #4
 8003614:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800361c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	3b04      	subs	r3, #4
 8003622:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	f023 0201 	bic.w	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	3b04      	subs	r3, #4
 8003632:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003634:	4a08      	ldr	r2, [pc, #32]	; (8003658 <pxPortInitialiseStack+0x54>)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3b14      	subs	r3, #20
 800363e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	3b20      	subs	r3, #32
 800364a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800364c:	68fb      	ldr	r3, [r7, #12]
}
 800364e:	4618      	mov	r0, r3
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	0800365d 	.word	0x0800365d

0800365c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003662:	2300      	movs	r3, #0
 8003664:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003666:	4b10      	ldr	r3, [pc, #64]	; (80036a8 <prvTaskExitError+0x4c>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d009      	beq.n	8003684 <prvTaskExitError+0x28>
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	e7fe      	b.n	8003682 <prvTaskExitError+0x26>
 8003684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003688:	f383 8811 	msr	BASEPRI, r3
 800368c:	f3bf 8f6f 	isb	sy
 8003690:	f3bf 8f4f 	dsb	sy
 8003694:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003696:	bf00      	nop
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0fc      	beq.n	8003698 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bc80      	pop	{r7}
 80036a6:	4770      	bx	lr
 80036a8:	2000000c 	.word	0x2000000c
 80036ac:	00000000 	.word	0x00000000

080036b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80036b0:	4b07      	ldr	r3, [pc, #28]	; (80036d0 <pxCurrentTCBConst2>)
 80036b2:	6819      	ldr	r1, [r3, #0]
 80036b4:	6808      	ldr	r0, [r1, #0]
 80036b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80036ba:	f380 8809 	msr	PSP, r0
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f04f 0000 	mov.w	r0, #0
 80036c6:	f380 8811 	msr	BASEPRI, r0
 80036ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80036ce:	4770      	bx	lr

080036d0 <pxCurrentTCBConst2>:
 80036d0:	20000280 	.word	0x20000280
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80036d4:	bf00      	nop
 80036d6:	bf00      	nop

080036d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80036d8:	4806      	ldr	r0, [pc, #24]	; (80036f4 <prvPortStartFirstTask+0x1c>)
 80036da:	6800      	ldr	r0, [r0, #0]
 80036dc:	6800      	ldr	r0, [r0, #0]
 80036de:	f380 8808 	msr	MSP, r0
 80036e2:	b662      	cpsie	i
 80036e4:	b661      	cpsie	f
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	df00      	svc	0
 80036f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80036f2:	bf00      	nop
 80036f4:	e000ed08 	.word	0xe000ed08

080036f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80036fe:	4b31      	ldr	r3, [pc, #196]	; (80037c4 <xPortStartScheduler+0xcc>)
 8003700:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	b2db      	uxtb	r3, r3
 8003708:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	22ff      	movs	r2, #255	; 0xff
 800370e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	b2db      	uxtb	r3, r3
 8003716:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003720:	b2da      	uxtb	r2, r3
 8003722:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <xPortStartScheduler+0xd0>)
 8003724:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003726:	4b29      	ldr	r3, [pc, #164]	; (80037cc <xPortStartScheduler+0xd4>)
 8003728:	2207      	movs	r2, #7
 800372a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800372c:	e009      	b.n	8003742 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800372e:	4b27      	ldr	r3, [pc, #156]	; (80037cc <xPortStartScheduler+0xd4>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3b01      	subs	r3, #1
 8003734:	4a25      	ldr	r2, [pc, #148]	; (80037cc <xPortStartScheduler+0xd4>)
 8003736:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	005b      	lsls	r3, r3, #1
 800373e:	b2db      	uxtb	r3, r3
 8003740:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003742:	78fb      	ldrb	r3, [r7, #3]
 8003744:	b2db      	uxtb	r3, r3
 8003746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800374a:	2b80      	cmp	r3, #128	; 0x80
 800374c:	d0ef      	beq.n	800372e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800374e:	4b1f      	ldr	r3, [pc, #124]	; (80037cc <xPortStartScheduler+0xd4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f1c3 0307 	rsb	r3, r3, #7
 8003756:	2b04      	cmp	r3, #4
 8003758:	d009      	beq.n	800376e <xPortStartScheduler+0x76>
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	f383 8811 	msr	BASEPRI, r3
 8003762:	f3bf 8f6f 	isb	sy
 8003766:	f3bf 8f4f 	dsb	sy
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	e7fe      	b.n	800376c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800376e:	4b17      	ldr	r3, [pc, #92]	; (80037cc <xPortStartScheduler+0xd4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	021b      	lsls	r3, r3, #8
 8003774:	4a15      	ldr	r2, [pc, #84]	; (80037cc <xPortStartScheduler+0xd4>)
 8003776:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <xPortStartScheduler+0xd4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003780:	4a12      	ldr	r2, [pc, #72]	; (80037cc <xPortStartScheduler+0xd4>)
 8003782:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800378c:	4b10      	ldr	r3, [pc, #64]	; (80037d0 <xPortStartScheduler+0xd8>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a0f      	ldr	r2, [pc, #60]	; (80037d0 <xPortStartScheduler+0xd8>)
 8003792:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003796:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003798:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <xPortStartScheduler+0xd8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a0c      	ldr	r2, [pc, #48]	; (80037d0 <xPortStartScheduler+0xd8>)
 800379e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80037a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80037a4:	f000 f8b0 	bl	8003908 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80037a8:	4b0a      	ldr	r3, [pc, #40]	; (80037d4 <xPortStartScheduler+0xdc>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80037ae:	f7ff ff93 	bl	80036d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80037b2:	f7ff fd91 	bl	80032d8 <vTaskSwitchContext>
	prvTaskExitError();
 80037b6:	f7ff ff51 	bl	800365c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	e000e400 	.word	0xe000e400
 80037c8:	200003ac 	.word	0x200003ac
 80037cc:	200003b0 	.word	0x200003b0
 80037d0:	e000ed20 	.word	0xe000ed20
 80037d4:	2000000c 	.word	0x2000000c

080037d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e2:	f383 8811 	msr	BASEPRI, r3
 80037e6:	f3bf 8f6f 	isb	sy
 80037ea:	f3bf 8f4f 	dsb	sy
 80037ee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <vPortEnterCritical+0x54>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3301      	adds	r3, #1
 80037f6:	4a0d      	ldr	r2, [pc, #52]	; (800382c <vPortEnterCritical+0x54>)
 80037f8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <vPortEnterCritical+0x54>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d10e      	bne.n	8003820 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003802:	4b0b      	ldr	r3, [pc, #44]	; (8003830 <vPortEnterCritical+0x58>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b00      	cmp	r3, #0
 800380a:	d009      	beq.n	8003820 <vPortEnterCritical+0x48>
 800380c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	603b      	str	r3, [r7, #0]
 800381e:	e7fe      	b.n	800381e <vPortEnterCritical+0x46>
	}
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	bc80      	pop	{r7}
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	2000000c 	.word	0x2000000c
 8003830:	e000ed04 	.word	0xe000ed04

08003834 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800383a:	4b10      	ldr	r3, [pc, #64]	; (800387c <vPortExitCritical+0x48>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d109      	bne.n	8003856 <vPortExitCritical+0x22>
 8003842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003846:	f383 8811 	msr	BASEPRI, r3
 800384a:	f3bf 8f6f 	isb	sy
 800384e:	f3bf 8f4f 	dsb	sy
 8003852:	607b      	str	r3, [r7, #4]
 8003854:	e7fe      	b.n	8003854 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8003856:	4b09      	ldr	r3, [pc, #36]	; (800387c <vPortExitCritical+0x48>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	3b01      	subs	r3, #1
 800385c:	4a07      	ldr	r2, [pc, #28]	; (800387c <vPortExitCritical+0x48>)
 800385e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003860:	4b06      	ldr	r3, [pc, #24]	; (800387c <vPortExitCritical+0x48>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d104      	bne.n	8003872 <vPortExitCritical+0x3e>
 8003868:	2300      	movs	r3, #0
 800386a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003872:	bf00      	nop
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	2000000c 	.word	0x2000000c

08003880 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003880:	f3ef 8009 	mrs	r0, PSP
 8003884:	f3bf 8f6f 	isb	sy
 8003888:	4b0d      	ldr	r3, [pc, #52]	; (80038c0 <pxCurrentTCBConst>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003890:	6010      	str	r0, [r2, #0]
 8003892:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003896:	f04f 0050 	mov.w	r0, #80	; 0x50
 800389a:	f380 8811 	msr	BASEPRI, r0
 800389e:	f7ff fd1b 	bl	80032d8 <vTaskSwitchContext>
 80038a2:	f04f 0000 	mov.w	r0, #0
 80038a6:	f380 8811 	msr	BASEPRI, r0
 80038aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80038ae:	6819      	ldr	r1, [r3, #0]
 80038b0:	6808      	ldr	r0, [r1, #0]
 80038b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80038b6:	f380 8809 	msr	PSP, r0
 80038ba:	f3bf 8f6f 	isb	sy
 80038be:	4770      	bx	lr

080038c0 <pxCurrentTCBConst>:
 80038c0:	20000280 	.word	0x20000280
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop

080038c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
	__asm volatile
 80038ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d2:	f383 8811 	msr	BASEPRI, r3
 80038d6:	f3bf 8f6f 	isb	sy
 80038da:	f3bf 8f4f 	dsb	sy
 80038de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80038e0:	f7ff fc3e 	bl	8003160 <xTaskIncrementTick>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d003      	beq.n	80038f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <SysTick_Handler+0x3c>)
 80038ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038f0:	601a      	str	r2, [r3, #0]
 80038f2:	2300      	movs	r3, #0
 80038f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80038fc:	bf00      	nop
 80038fe:	3708      	adds	r7, #8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	e000ed04 	.word	0xe000ed04

08003908 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800390c:	4b0a      	ldr	r3, [pc, #40]	; (8003938 <vPortSetupTimerInterrupt+0x30>)
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003912:	4b0a      	ldr	r3, [pc, #40]	; (800393c <vPortSetupTimerInterrupt+0x34>)
 8003914:	2200      	movs	r2, #0
 8003916:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <vPortSetupTimerInterrupt+0x38>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a09      	ldr	r2, [pc, #36]	; (8003944 <vPortSetupTimerInterrupt+0x3c>)
 800391e:	fba2 2303 	umull	r2, r3, r2, r3
 8003922:	099b      	lsrs	r3, r3, #6
 8003924:	4a08      	ldr	r2, [pc, #32]	; (8003948 <vPortSetupTimerInterrupt+0x40>)
 8003926:	3b01      	subs	r3, #1
 8003928:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800392a:	4b03      	ldr	r3, [pc, #12]	; (8003938 <vPortSetupTimerInterrupt+0x30>)
 800392c:	2207      	movs	r2, #7
 800392e:	601a      	str	r2, [r3, #0]
}
 8003930:	bf00      	nop
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr
 8003938:	e000e010 	.word	0xe000e010
 800393c:	e000e018 	.word	0xe000e018
 8003940:	20000000 	.word	0x20000000
 8003944:	10624dd3 	.word	0x10624dd3
 8003948:	e000e014 	.word	0xe000e014

0800394c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003958:	f7ff fb58 	bl	800300c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800395c:	4b57      	ldr	r3, [pc, #348]	; (8003abc <pvPortMalloc+0x170>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003964:	f000 f90c 	bl	8003b80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003968:	4b55      	ldr	r3, [pc, #340]	; (8003ac0 <pvPortMalloc+0x174>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4013      	ands	r3, r2
 8003970:	2b00      	cmp	r3, #0
 8003972:	f040 808c 	bne.w	8003a8e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d01c      	beq.n	80039b6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800397c:	2208      	movs	r2, #8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	2b00      	cmp	r3, #0
 800398c:	d013      	beq.n	80039b6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f023 0307 	bic.w	r3, r3, #7
 8003994:	3308      	adds	r3, #8
 8003996:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <pvPortMalloc+0x6a>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	e7fe      	b.n	80039b4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d068      	beq.n	8003a8e <pvPortMalloc+0x142>
 80039bc:	4b41      	ldr	r3, [pc, #260]	; (8003ac4 <pvPortMalloc+0x178>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d863      	bhi.n	8003a8e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80039c6:	4b40      	ldr	r3, [pc, #256]	; (8003ac8 <pvPortMalloc+0x17c>)
 80039c8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80039ca:	4b3f      	ldr	r3, [pc, #252]	; (8003ac8 <pvPortMalloc+0x17c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039d0:	e004      	b.n	80039dc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80039d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d903      	bls.n	80039ee <pvPortMalloc+0xa2>
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d1f1      	bne.n	80039d2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80039ee:	4b33      	ldr	r3, [pc, #204]	; (8003abc <pvPortMalloc+0x170>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d04a      	beq.n	8003a8e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80039f8:	6a3b      	ldr	r3, [r7, #32]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2208      	movs	r2, #8
 80039fe:	4413      	add	r3, r2
 8003a00:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	6a3b      	ldr	r3, [r7, #32]
 8003a08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	685a      	ldr	r2, [r3, #4]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	1ad2      	subs	r2, r2, r3
 8003a12:	2308      	movs	r3, #8
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d91e      	bls.n	8003a58 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4413      	add	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f003 0307 	and.w	r3, r3, #7
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d009      	beq.n	8003a40 <pvPortMalloc+0xf4>
 8003a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	e7fe      	b.n	8003a3e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	1ad2      	subs	r2, r2, r3
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003a52:	69b8      	ldr	r0, [r7, #24]
 8003a54:	f000 f8f6 	bl	8003c44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a58:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <pvPortMalloc+0x178>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	4a18      	ldr	r2, [pc, #96]	; (8003ac4 <pvPortMalloc+0x178>)
 8003a64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a66:	4b17      	ldr	r3, [pc, #92]	; (8003ac4 <pvPortMalloc+0x178>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b18      	ldr	r3, [pc, #96]	; (8003acc <pvPortMalloc+0x180>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d203      	bcs.n	8003a7a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a72:	4b14      	ldr	r3, [pc, #80]	; (8003ac4 <pvPortMalloc+0x178>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a15      	ldr	r2, [pc, #84]	; (8003acc <pvPortMalloc+0x180>)
 8003a78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	4b10      	ldr	r3, [pc, #64]	; (8003ac0 <pvPortMalloc+0x174>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003a8e:	f7ff facb 	bl	8003028 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	f003 0307 	and.w	r3, r3, #7
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d009      	beq.n	8003ab0 <pvPortMalloc+0x164>
 8003a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aa0:	f383 8811 	msr	BASEPRI, r3
 8003aa4:	f3bf 8f6f 	isb	sy
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	e7fe      	b.n	8003aae <pvPortMalloc+0x162>
	return pvReturn;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3728      	adds	r7, #40	; 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000fbc 	.word	0x20000fbc
 8003ac0:	20000fc8 	.word	0x20000fc8
 8003ac4:	20000fc0 	.word	0x20000fc0
 8003ac8:	20000fb4 	.word	0x20000fb4
 8003acc:	20000fc4 	.word	0x20000fc4

08003ad0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d046      	beq.n	8003b70 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	425b      	negs	r3, r3
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4413      	add	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	4b20      	ldr	r3, [pc, #128]	; (8003b78 <vPortFree+0xa8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4013      	ands	r3, r2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <vPortFree+0x42>
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	e7fe      	b.n	8003b10 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d009      	beq.n	8003b2e <vPortFree+0x5e>
 8003b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1e:	f383 8811 	msr	BASEPRI, r3
 8003b22:	f3bf 8f6f 	isb	sy
 8003b26:	f3bf 8f4f 	dsb	sy
 8003b2a:	60bb      	str	r3, [r7, #8]
 8003b2c:	e7fe      	b.n	8003b2c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <vPortFree+0xa8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d019      	beq.n	8003b70 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d115      	bne.n	8003b70 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <vPortFree+0xa8>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	401a      	ands	r2, r3
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003b54:	f7ff fa5a 	bl	800300c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	4b07      	ldr	r3, [pc, #28]	; (8003b7c <vPortFree+0xac>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4413      	add	r3, r2
 8003b62:	4a06      	ldr	r2, [pc, #24]	; (8003b7c <vPortFree+0xac>)
 8003b64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003b66:	6938      	ldr	r0, [r7, #16]
 8003b68:	f000 f86c 	bl	8003c44 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003b6c:	f7ff fa5c 	bl	8003028 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003b70:	bf00      	nop
 8003b72:	3718      	adds	r7, #24
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000fc8 	.word	0x20000fc8
 8003b7c:	20000fc0 	.word	0x20000fc0

08003b80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003b86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003b8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003b8c:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <prvHeapInit+0xac>)
 8003b8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00c      	beq.n	8003bb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	3307      	adds	r3, #7
 8003b9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f023 0307 	bic.w	r3, r3, #7
 8003ba6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	4a1f      	ldr	r2, [pc, #124]	; (8003c2c <prvHeapInit+0xac>)
 8003bb0:	4413      	add	r3, r2
 8003bb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003bb8:	4a1d      	ldr	r2, [pc, #116]	; (8003c30 <prvHeapInit+0xb0>)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003bbe:	4b1c      	ldr	r3, [pc, #112]	; (8003c30 <prvHeapInit+0xb0>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	4413      	add	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003bcc:	2208      	movs	r2, #8
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1a9b      	subs	r3, r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0307 	bic.w	r3, r3, #7
 8003bda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4a15      	ldr	r2, [pc, #84]	; (8003c34 <prvHeapInit+0xb4>)
 8003be0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <prvHeapInit+0xb4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2200      	movs	r2, #0
 8003be8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003bea:	4b12      	ldr	r3, [pc, #72]	; (8003c34 <prvHeapInit+0xb4>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	68fa      	ldr	r2, [r7, #12]
 8003bfa:	1ad2      	subs	r2, r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003c00:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <prvHeapInit+0xb4>)
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	4a0a      	ldr	r2, [pc, #40]	; (8003c38 <prvHeapInit+0xb8>)
 8003c0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	4a09      	ldr	r2, [pc, #36]	; (8003c3c <prvHeapInit+0xbc>)
 8003c16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003c18:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <prvHeapInit+0xc0>)
 8003c1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003c1e:	601a      	str	r2, [r3, #0]
}
 8003c20:	bf00      	nop
 8003c22:	3714      	adds	r7, #20
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bc80      	pop	{r7}
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	200003b4 	.word	0x200003b4
 8003c30:	20000fb4 	.word	0x20000fb4
 8003c34:	20000fbc 	.word	0x20000fbc
 8003c38:	20000fc4 	.word	0x20000fc4
 8003c3c:	20000fc0 	.word	0x20000fc0
 8003c40:	20000fc8 	.word	0x20000fc8

08003c44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003c4c:	4b27      	ldr	r3, [pc, #156]	; (8003cec <prvInsertBlockIntoFreeList+0xa8>)
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	e002      	b.n	8003c58 <prvInsertBlockIntoFreeList+0x14>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d8f7      	bhi.n	8003c52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d108      	bne.n	8003c86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	441a      	add	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d118      	bne.n	8003ccc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	4b14      	ldr	r3, [pc, #80]	; (8003cf0 <prvInsertBlockIntoFreeList+0xac>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d00d      	beq.n	8003cc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	441a      	add	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e008      	b.n	8003cd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003cc2:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <prvInsertBlockIntoFreeList+0xac>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e003      	b.n	8003cd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d002      	beq.n	8003ce2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003ce2:	bf00      	nop
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bc80      	pop	{r7}
 8003cea:	4770      	bx	lr
 8003cec:	20000fb4 	.word	0x20000fb4
 8003cf0:	20000fbc 	.word	0x20000fbc

08003cf4 <__libc_init_array>:
 8003cf4:	b570      	push	{r4, r5, r6, lr}
 8003cf6:	2500      	movs	r5, #0
 8003cf8:	4e0c      	ldr	r6, [pc, #48]	; (8003d2c <__libc_init_array+0x38>)
 8003cfa:	4c0d      	ldr	r4, [pc, #52]	; (8003d30 <__libc_init_array+0x3c>)
 8003cfc:	1ba4      	subs	r4, r4, r6
 8003cfe:	10a4      	asrs	r4, r4, #2
 8003d00:	42a5      	cmp	r5, r4
 8003d02:	d109      	bne.n	8003d18 <__libc_init_array+0x24>
 8003d04:	f000 f822 	bl	8003d4c <_init>
 8003d08:	2500      	movs	r5, #0
 8003d0a:	4e0a      	ldr	r6, [pc, #40]	; (8003d34 <__libc_init_array+0x40>)
 8003d0c:	4c0a      	ldr	r4, [pc, #40]	; (8003d38 <__libc_init_array+0x44>)
 8003d0e:	1ba4      	subs	r4, r4, r6
 8003d10:	10a4      	asrs	r4, r4, #2
 8003d12:	42a5      	cmp	r5, r4
 8003d14:	d105      	bne.n	8003d22 <__libc_init_array+0x2e>
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d1c:	4798      	blx	r3
 8003d1e:	3501      	adds	r5, #1
 8003d20:	e7ee      	b.n	8003d00 <__libc_init_array+0xc>
 8003d22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d26:	4798      	blx	r3
 8003d28:	3501      	adds	r5, #1
 8003d2a:	e7f2      	b.n	8003d12 <__libc_init_array+0x1e>
 8003d2c:	08003e14 	.word	0x08003e14
 8003d30:	08003e14 	.word	0x08003e14
 8003d34:	08003e14 	.word	0x08003e14
 8003d38:	08003e18 	.word	0x08003e18

08003d3c <memset>:
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4402      	add	r2, r0
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d100      	bne.n	8003d46 <memset+0xa>
 8003d44:	4770      	bx	lr
 8003d46:	f803 1b01 	strb.w	r1, [r3], #1
 8003d4a:	e7f9      	b.n	8003d40 <memset+0x4>

08003d4c <_init>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	bf00      	nop
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr

08003d58 <_fini>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr
